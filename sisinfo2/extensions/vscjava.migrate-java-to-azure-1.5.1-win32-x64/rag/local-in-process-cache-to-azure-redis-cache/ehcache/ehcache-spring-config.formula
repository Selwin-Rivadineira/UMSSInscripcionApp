name: 'Migrate Ehcache Spring configuration to Azure Cache for Redis'
description: "Converts Ehcache Spring configuration to Azure Cache for Redis configuration"
codeLocation:
  type: textsearch
  filePattern: '**/*.java'
  codePattern: >-
    @EnableCaching|CacheManager|EhCacheCacheManager|EhCacheManagerFactoryBean|net.sf.ehcache

steps:
  - description: "Migrate Ehcache Spring configuration to Azure Cache for Redis configuration"
    type: "instruction"
    content: |
      Your task is to migrate a Java Spring configuration file from using Ehcache to Azure Cache for Redis.
      Pay attention that you should only update the specific configuration classes/methods and keep the rest of the file - you cannot replace the whole file. What you return must be a valid, complete Java file.

      Below are examples of Ehcache Spring configurations and their Azure Redis equivalents:

      Ehcache Spring configuration example:
      ```java
      @Configuration
      @EnableCaching
      public class CacheConfig {
        
        @Bean
        public CacheManager cacheManager() {
          return new EhCacheCacheManager(ehCacheCacheManager().getObject());
        }
        
        @Bean
        public EhCacheManagerFactoryBean ehCacheCacheManager() {
          EhCacheManagerFactoryBean factory = new EhCacheManagerFactoryBean();
          factory.setConfigLocation(new ClassPathResource("ehcache.xml"));
          factory.setShared(true);
          return factory;
        }
      }
      ```

      Or with programmatic configuration:
      ```java
      @Configuration
      @EnableCaching
      public class CacheConfig {
        
        @Bean
        public CacheManager cacheManager() {
          net.sf.ehcache.config.Configuration config = new net.sf.ehcache.config.Configuration();
          CacheConfiguration cacheConfig = new CacheConfiguration("defaultCache", 1000)
              .timeToLiveSeconds(3600)
              .timeToIdleSeconds(0)
              .memoryStoreEvictionPolicy(MemoryStoreEvictionPolicy.LRU);
          config.addCache(cacheConfig);
          
          net.sf.ehcache.CacheManager ehCacheManager = net.sf.ehcache.CacheManager.newInstance(config);
          return new EhCacheCacheManager(ehCacheManager);
        }
      }
      ```

      Azure Cache for Redis Spring configuration example using Lettuce:
      ```java
      @Configuration
      @EnableCaching
      public class CacheConfig {
        
        @Bean
        public LettuceConnectionFactory redisConnectionFactory(
            @Value("${spring.redis.host:your-azure-redis-instance.redis.cache.windows.net}") String host,
            @Value("${spring.redis.port:6380}") int port,
            @Value("${spring.redis.password:your-access-key}") String password) {
          
          RedisStandaloneConfiguration redisConfig = new RedisStandaloneConfiguration();
          redisConfig.setHostName(host);
          redisConfig.setPort(port);
          redisConfig.setPassword(password);
          
          LettuceClientConfiguration clientConfig = LettuceClientConfiguration.builder()
            .useSsl(true) // Azure Cache for Redis requires SSL
            .build();
          
          return new LettuceConnectionFactory(redisConfig, clientConfig);
        }
        
        @Bean
        public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory) {
          RedisTemplate<String, Object> template = new RedisTemplate<>();
          template.setConnectionFactory(connectionFactory);
          
          // Add serializers for keys and values
          template.setKeySerializer(new StringRedisSerializer());
          template.setValueSerializer(new JdkSerializationRedisSerializer());
          template.setHashKeySerializer(new StringRedisSerializer());
          template.setHashValueSerializer(new JdkSerializationRedisSerializer());
          
          template.afterPropertiesSet();
          return template;
        }
        
        @Bean
        public RedisCacheManager cacheManager(RedisConnectionFactory connectionFactory) {
          RedisCacheConfiguration defaultCacheConfig = RedisCacheConfiguration.defaultCacheConfig()
            .entryTtl(Duration.ofHours(1))
            .disableCachingNullValues();
          
          // Create configurations for specific caches as needed
          Map<String, RedisCacheConfiguration> cacheConfigurations = new HashMap<>();
          cacheConfigurations.put("userCache", defaultCacheConfig.entryTtl(Duration.ofMinutes(10)));
          cacheConfigurations.put("productCache", defaultCacheConfig.entryTtl(Duration.ofMinutes(30)));
          
          return RedisCacheManager.builder(connectionFactory)
            .cacheDefaults(defaultCacheConfig)
            .withInitialCacheConfigurations(cacheConfigurations)
            .build();
        }
      }
      ```

      Implementation notes:
      1. Keep the @EnableCaching annotation in place
      2. Replace EhCacheCacheManager with RedisCacheManager
      3. Replace EhCacheManagerFactoryBean configurations with LettuceConnectionFactory (the default Redis client in Spring Boot)
      4. Always include RedisTemplate bean for directly interacting with Redis
      5. Convert Ehcache TTL and eviction policies to their Redis equivalents using RedisCacheConfiguration
      6. Ensure all Redis connection parameters are externalized via @Value annotations
      7. For Azure Cache for Redis, always set SSL to true and use port 6380
      8. Configure proper serializers for RedisTemplate based on your application's needs
