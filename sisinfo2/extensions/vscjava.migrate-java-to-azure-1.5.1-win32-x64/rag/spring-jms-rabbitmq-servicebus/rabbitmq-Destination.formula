name: "Migrate Spring JMS RabbitMQ Destination"
description: "Migrate Spring JMS RabbitMQ Destination"

codeLocation:
  type: "textsearch"
  filePattern: "**/*.java"
  codePattern: "RMQDestination"

steps:
  - description: "Migrate RabbitMQ Destination to Common JMS Destination"
    type: "instruction"
    content: |
      Your task is to migrate the usage of RabbitMQ Destination to common JMS Destination. When there is a bean or variable
      created with the type of "RMQDestination", remove the creation of RMQDestination and define a common JMS destination instance of Queue or Topic
      according to the semantics of RMQDestination if the source code doesn't define it.

      Below are the APIs provided for your reference:
        Class: RMQDestination
          Package: com.rabbitmq.jms.admin

        Class: Destination
          Package: jakarta.jms|javax.jms

        Class: Queue
          Package: jakarta.jms|javax.jms

        Class: Topic
          Package: jakarta.jms|javax.jms

      Important guidelines:

      1. Remove the creation of RMQDestination and create a JMS Destination instead when the source code doesn't create a common JMS Destination,
        when creating the common JMS Destination, you need to analyse the semantics of the original RMQDestination to decide whether a queue or topic Destination should be created:
        - Example of code that need to create the JMS Queue Destination:
          ```java
          // before for the JMS Queue case:
          @Bean
          public Queue queue() throws Exception {
            String queueName = (amqpProperties.amqpQueueName != null && !"".equals(amqpProperties.amqpQueueName)) ? amqpProperties.amqpQueueName : jmsProperties.queueName;
            Queue queue = new RMQDestination(amqpProperties.amqpExchangeName, amqpProperties.amqpExchangeName, queueName, null);
            return queue;
          }

          // after
          @Bean
          public Queue queue() throws Exception {
            Queue queue = jmsSession.createQueue(jmsProperties.queueName);
            return queue;
          }
          ```
        - Example of code that need to create the JMS Topic Destination:
          ```java
          // before for the JMS Topic case:
          @Bean
          public Topic topic() throws Exception {
            Topic topic = new RMQDestination(amqpProperties.amqpExchangeName, amqpProperties.amqpExchangeName, jmsProperties.topicName, null);
            return topic;
          }

          // after
          @Bean
          public Topic topic() throws Exception {
            Topic topic = jmsSession.createTopic(jmsProperties.topicName);
            return topic;
          }
          ```
      2. Remove the creation of RMQDestination and don't need to create a JMS Destination instead when the source code already contains the logic of creating a common JMS Destination.
        - Example of code that remove the RMQDestination code entirly:
          ```java
          //before
          @Bean
          public Queue queue() throws Exception {
            Queue queue = null;
            if(amqpProperties.amqpExchangeName != null && !"".equals(amqpProperties.amqpExchangeName)) {
              String queueName = (amqpProperties.amqpQueueName != null && !"".equals(amqpProperties.amqpQueueName)) ? amqpProperties.amqpQueueName : jmsProperties.queueName;
              log.info("rmqExchangeName is set, using native RMQDestination to create MessageProducer.  queueName="+queueName+", amqpExchangeName="+amqpProperties.amqpExchangeName);
              queue = new RMQDestination(amqpProperties.amqpExchangeName, amqpProperties.amqpExchangeName, queueName, null);
            }
            else {
              log.info("Creating MessageProducer using JMS Queue obj for queueName="+jmsProperties.queueName);
              queue = jmsSession.createQueue(jmsProperties.queueName);
            }
            return queue;
          }

          //after
          @Bean
          public Queue queue() throws Exception {
            Queue queue = null;
            log.info("Creating MessageProducer using JMS Queue obj for queueName="+jmsProperties.queueName);
            queue = jmsSession.createQueue(jmsProperties.queueName);
            return queue;
          }
          ```

      3. Import Cleanup:
         - All imports from packages starting with 'com.rabbitmq.jms'
         - Any other unused imports that were related to RabbitMQ
