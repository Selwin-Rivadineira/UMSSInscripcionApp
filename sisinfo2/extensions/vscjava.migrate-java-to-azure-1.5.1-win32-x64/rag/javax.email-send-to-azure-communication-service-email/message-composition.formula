name: "JavaMail message composition to Azure Communication Service email"
description: "Migrate from JavaMail message composition to Azure Communication Service email API"
codeLocation:
  type: textsearch
  filePattern: '**/*.java'
  codePattern: >-
    MimeMessage|MimeBodyPart|MimeMultipart|SimpleMailMessage|SimpleEmail|MultiPartEmail|HtmlEmail|ImageHtmlEmail|EmailBuilder

steps:
  - description: "Migrate JavaMail message composition to Azure Communication Service email API"
    type: "instruction"
    content: |
      Your task is to migrate a Java file from using the Java Mail (javax.mail.*), Spring Java Mail (org.springframework.mail.*), Simple Java Mail (org.simplejavamail.*) and Apache Commons Email (org.apache.commons.mail.*) to the Azure Communication Service email API while maintaining the same functionality. Below is a reference to the relevant APIs for your convenience. You can tell whether it's JavaMail or Azure API from the package name.
      Try replace all references to Java Mail (javax.mail.*), Spring Java Mail (org.springframework.mail.*), Simple Java Mail (org.simplejavamail.*) and Apache Commons Email (org.apache.commons.mail.*) APIs with equivalent Azure Communication Service email APIs, using the provided API descriptions as guidance.
      Ensure the resulting code is clean, efficient, and preserves the original functionality. Keep all the irrelevant code/comment unchanged.
      Some of the methods are of the same name under different class, please pay attention to the type before using.
      Note:
        1. By default, use `DefaultAzureCredential` from the `com.azure.identity` package to authenticate the `EmailClient`. For example:
           ```java
           EmailClient emailClient = new EmailClientBuilder()
               .endpoint("https://<resource-name>.communication.azure.com/")
               .credential(new DefaultAzureCredentialBuilder().build())
               .buildClient();
           ```
        2. Please add one line of comment on the `EmailClientBuilder.setSenderAddress` method, explaining that the sender address should be a verified domain configured on Azure Portal, it looks like `.setSenderAddress("DoNotReply@<your-own-verified-domain>.azurecomm.net")`.
        3. EmailClientBuilder & EmailClient have no APIs like `setSenderAddress`, check the SDK provided below carefully.
        4. Consider calling `getFinalResult` after `EmailClient.beginSend` and check for the `EmailSendResult` & `EmailSendStatus`.
      Below are the APIs provided for your reference, don't forget to import the package whenever you are adding a new class reference in code edit:

      Class: MimeMessage
        Package: javax.mail.internet.MimeMessage
        Description: This class represents a MIME style email message. It implements the Message abstract class and the MimePart interface.
        Methods:
          - public void addFrom(Address[] addresses)
            Description: Add the specified addresses to the existing "From" field. If the "From" field does not already exist, it is created.
            Parameters:
              - addresses - the senders of this message
            Returns: N/A
          - public Address getSender()
            Description: Returns the value of the RFC 822 "Sender" header field. If the "Sender" header field is absent, null is returned.
             Returns: Address object
          - public void setSender(Address address)
            Description: Set the RFC 822 "Sender" header field. Any existing values are replaced with the given address. If address is null, this header is removed.
            Parameters:
              - addresses - address - the sender of this message
            Returns: N/A
          - public Address[] getRecipients(Message.RecipientType type)
            Description: Returns the recipients specified by the type. The mapping between the type and the corresponding RFC 822 header is as follows:
            Parameters:
              - type - Type of recipient
            Returns: array of Address objects
          - public Address[] getAllRecipients()
            Description: Get all the recipient addresses for the message. Extracts the TO, CC, BCC, and NEWSGROUPS recipients.
            Returns: array of Address objects
          - public void setRecipients(Message.RecipientType type, Address[] addresses)
            Description: Set the specified recipient type to the given addresses. If the address parameter is null, the corresponding recipient field is removed.
            Parameters:
              - type - Recipient type
              - addresses - Addresses
            Returns: N/A
          - public void setRecipients(Message.RecipientType type, string addresses)
            Description: Set the specified recipient type to the given addresses. If the address parameter is null, the corresponding recipient field is removed.
            Parameters:
              - type - Recipient type
              - addresses - Addresses
            Returns: N/A
          - public void addRecipients(Message.RecipientType type, Address[] addresses)
            Description: Add the given addresses to the specified recipient type.
            Parameters:
              - type - Recipient type
              - addresses - Addresses
            Returns: N/A
          - public void setReplyTo(Address[] addresses)
            Description: Set the RFC 822 "Reply-To" header field. If the address parameter is null, this header is removed.
            Parameters:
              - addresses - addresses to which replies should be directed
            Returns: N/A
          - public Address[] getReplyTo()
            Description: Return the value of the RFC 822 "Reply-To" header field. If this header is unavailable or its value is absent, then the getFrom method is called and its value is returned. This implementation uses the getHeader method to obtain the requisite header field.
            Parameters: N/A
            Returns: addresses to which replies should be directed
          - public String getSubject()
            Description: Returns the value of the "Subject" header field. Returns null if the subject field is unavailable or its value is absent.
            Parameters: N/A
            Returns: Subject
          - public void setSubject(String subject)
            Description: Set the "Subject" header field. If the subject contains non US-ASCII characters, it will be encoded using the platform's default charset. If the subject contains only US-ASCII characters, no encoding is done and it is used as-is. If the subject is null, the existing "Subject" field is removed.
            Parameters:
              - subject - The subject
            Returns: N/A
          - public void setSubject(String subject, String charset)
            Description: Set the "Subject" header field. If the subject contains non US-ASCII characters, it will be encoded using the specified charset. If the subject contains only US-ASCII characters, no encoding is done and it is used as-is. If the subject is null, the existing "Subject" header field is removed.
            Parameters:
              - subject - The subject
              - charset - The charset
            Returns: N/A
          - public void setText(String text)
            Description: Convenience method that sets the given String as this part's content, with a MIME type of "text/plain". If the string contains non US-ASCII characters. it will be encoded using the platform's default charset. The charset is also used to set the "charset" parameter.
            Parameters:
              - text - the text content to set
            Returns: N/A
          - public void setSubject(String subject, String charset)
            Description: Convenience method that sets the given String as this part's content, with a MIME type of "text/plain" and the specified charset. The given Unicode string will be charset-encoded using the specified charset. The charset is also used to set the "charset" parameter.
            Parameters:
              - text - the text content to set
              - charset - The charset
            Returns: N/A
          - public void setText(String text, String charset, String subtype)
            Description: Convenience method that sets the given String as this part's content, with a primary MIME type of "text" and the specified MIME subtype. The given Unicode string will be charset-encoded using the specified charset. The charset is also used to set the "charset" parameter.
            Parameters:
              - text - the text content to set
              - charset - The charset
              - subtype - the MIME subtype to use (e.g., "html")
            Returns: N/A
          - public void setContent(Multipart mp)
            Description: This method sets the Message's content to a Multipart object.
            Parameters:
              - mp - The multipart object that is the Message's content
            Returns: N/A

      Class: MineBodyPart
        Description: This class represents a MIME body part. It implements the BodyPart abstract class and the MimePart interface. MimeBodyParts are contained in MimeMultipart objects.
        Package: javax.mail.internet.MimeBodyPart
        Methods:
          - public void addHeader(String name, String value)
            Description: Add this value to the existing values for this header_name.
            Parameters:
              - value - header value
            Returns: N/A
          - public void attachFile(File file)
            Description: Use the specified file to provide the data for this part. The simple file name is used as the file name for this part and the data in the file is used as the data for this part.
            Parameters:
              - file - the File object to attach
            Returns: N/A
          - public void attachFile(File file, String contentType, String encoding)
            Description: Use the specified file with the specified Content-Type and Content-Transfer-Encoding to provide the data for this part. If contentType or encoding are null, appropriate values will be chosen
            Parameters:
              - file - the File object to attach
              - contentType - the Content-Type, or null
              - encoding - the Content-Transfer-Encoding, or null
            Returns: N/A
          - public Object getContent()
            Description: Return the content as a Java object. The type of the object returned is of course dependent on the content itself.
            Parameters: N/A
            Returns: Object
          - public int getSize()
            Description: Return the size of the content of this body part in bytes. Return -1 if the size cannot be determined.
            Parameters: N/A
            Returns: size in bytes, or -1 if not known
          - public void setContent(Multipart mp)
            Description: This method sets the body part's content to a Multipart object.
            Parameters:
              - mp - The multipart object that is the Message's content
            Returns: N/A

      Class: MimeMultipart extends Multipart
        Description: The MimeMultipart class is an implementation of the abstract Multipart class that uses MIME conventions for the multipart data.
        Package: javax.mail.internet.MimeMultipart
        Methods:
          - public void addBodyPart(BodyPart part)
            Description: Adds a Part to the multipart. The BodyPart is appended to the list of existing Parts.
            Parameters:
              - part - The Part to be appended
            Returns: N/A
          - public void addBodyPart(BodyPart part, int index)
            Description: Adds a BodyPart at position index. If index is not the last one in the list, the subsequent parts are shifted up. If index is larger than the number of parts present, the BodyPart is appended to the end.
            Parameters:
              - part - The Part to be appended
              - index - Location where to insert the part
            Returns: N/A

      Class: SimpleMailMessage implements MailMessage
        Description: Models a simple mail message, including data such as the from, to, cc, subject, and text fields.
        Package: org.springframework.mail.SimpleMailMessage
        Methods:
          - public void setFrom(@Nullable String from)
          - @Nullable public String getFrom()
          - public void setReplyTo(@Nullable String replyTo)
          - @Nullable public String getReplyTo()
          - public void setTo(@Nullable String to)
          - @Nullable public String[] getTo()
          - public void setCc(@Nullable String... cc)
          - @Nullable public String[] getCc()
          - public void setSentDate(@Nullable Date sentDate)
          - @Nullable public Date getSentDate()
          - public void setSubject(@Nullable String subject)
          - @Nullable public String getSubject()
          - public void setText(@Nullable String text)
          - @Nullable public String getText()

      Class: SimpleEmail
        Description: Sends simple Internet email messages without attachments.
        Package: org.apache.commons.mail
        Methods:
          - public Email setMsg(String msg) throws EmailException
            Description: Sets the content of the mail.
            Parameters:
            - msg - A String.
            Returns: An Email.

      Class: MultiPartEmail
        Description: A multipart email. This class is used to send multi-part internet email like messages with attachments. To create a multi-part email, call the default constructor and then you can call setMsg() to set the message and call the different attach() methods.
        Package: org.apache.commons.mail
        Methods:
          - public Email addPart(String partContent, String partContentType) throws EmailException
            Description: Adds a new part to the email.
            Parameters:
            - partContent - The content.
            - partContentType - The content type.
            Returns: An Email.
          - public MultiPartEmail attach(DataSource dataSource, String name, String description) throws EmailException
            Description: Attaches a file specified as a DataSource interface.
            Parameters:
            - dataSource - A DataSource interface for the file.
            - name - The name field for the attachment.
            - description - A description for the attachment.
            Returns: A MultiPartEmail.
          - public MultiPartEmail attach(DataSource dataSource, String name, String description, String disposition) throws EmailException
            Description: Attaches a file specified as a DataSource interface.
            Parameters:
            - dataSource - A DataSource interface for the file.
            - name - The name field for the attachment.
            - description - A description for the attachment.
            - disposition - Either mixed or inline.
            Returns: A MultiPartEmail.
          - public MultiPartEmail attach(EmailAttachment attachment) throws EmailException
            Description: Attaches an EmailAttachment.
            Parameters:
            - attachment - An EmailAttachment.
            Returns: A MultiPartEmail.
          - public MultiPartEmail attach(File file) throws EmailException
            Description: Attaches a file.
            Parameters:
            - file - A file attachment
            Returns: A MultiPartEmail.
          - public MultiPartEmail attach(Path file, OpenOption... options) throws EmailException
            Description: Attaches a path.
            Parameters:
            - file - A file attachment.
            - options - options for opening file streams.
            Returns: A MultiPartEmail.
          - public MultiPartEmail attach(URL url, String name, String description) throws EmailException
            Description: Attaches a file located by its URL. The disposition of the file is set to mixed.
            Parameters:
            - url - The URL of the file (may be any valid URL).
            - name - The name field for the attachment.
            - description - A description for the attachment.
            Returns: A MultiPartEmail.
          - public MultiPartEmail attach(URL url, String name, String description, String disposition) throws EmailException
            Description: Attaches a file located by its URL.
            Parameters:
            - url - The URL of the file (may be any valid URL).
            - name - The name field for the attachment.
            - description - A description for the attachment.
            - disposition - Either mixed or inline.
            Returns: A MultiPartEmail.
          - public void setBoolHasAttachments(boolean hasAttachments)
            Description: Sets whether there are attachments.
            Parameters:
            - hasAttachments - the attachments flag
          - public Email setMsg(String msg) throws EmailException
            Description: Sets the message of the email.
            Parameters:
            - msg - A String.
            Returns: An Email.
          - public void setSubType(String subType)
            Description: Sets the MIME subtype of the email.
            Parameters:
            - subType - MIME subtype of the email
          - public boolean isBoolHasAttachments()
            Description: Tests whether there are attachments.
            Returns: true if there are attachments

      Class: HtmlEmail
        Description: An HTML multipart email. This class is used to send HTML formatted email. A text message can also be set for HTML unaware email clients, such as text-based email clients. This class also inherits from MultiPartEmail, so it is easy to add attachments to the email. To send an email in HTML, one should create a HtmlEmail, then use the Email.setFrom(String), Email.addTo(String) etc. methods. The HTML content can be set with the setHtmlMsg(String) method. The alternative text content can be set with setTextMsg(String). Either the text or HTML can be omitted, in which case the "main" part of the multipart becomes whichever is supplied rather than a multipart/alternative.
        Package: org.apache.commons.mail
        Methods:
          - public void buildMimeMessage() throws EmailException
            Description: Builds the MimeMessage. Please note that a user rarely calls this method directly and only if he/she is interested in the sending the underlying MimeMessage without commons-email.
          - public String embed(DataSource dataSource, String name) throws EmailException
            Description: Embeds the specified DataSource in the HTML using a randomly generated Content-ID. Returns the generated Content-ID string.
            Parameters:
            - dataSource - the DataSource to embed
            - name - the name that will be set in the file name header field
            Returns: the generated Content-ID for this DataSource
          - public String embed(DataSource dataSource, String name, String cid) throws EmailException
            Description: Embeds the specified DataSource in the HTML using the specified Content-ID. Returns the specified Content-ID string.
            Parameters:
            - dataSource - the DataSource to embed
            - name - the name that will be set in the file name header field
            - cid - the Content-ID to use for this DataSource
            Returns: the URL encoded Content-ID for this DataSource
          - public String embed(File file) throws EmailException
            Description: Embeds a file in the HTML. This implementation delegates to embed(File, String).
            Parameters:
            - file - The File object to embed
            Returns: A String with the Content-ID of the file.
          - public String embed(File file, String cid) throws EmailException
            Description: Embeds a file in the HTML. This method embeds a file located by an URL into the mail body. It allows, for instance, to add inline images to the email. Inline files may be referenced with a cid:xxxxxx URL, where xxxxxx is the Content-ID returned by the embed function. Files are bound to their names, which is the value returned by File.getName(). If the same file is embedded multiple times, the same CID is guaranteed to be returned. While functionally the same as passing FileDataSource to embed(DataSource, String, String), this method attempts to validate the file before embedding it in the message and will throw EmailException if the validation fails. In this case, the HtmlEmail object will not be changed.
            Parameters:
            - file - The File to embed
            - cid - the Content-ID to use for the embedded File
            Returns: A String with the Content-ID of the file.
          - public String embed(String urlString, String name) throws EmailException
            Description: Parses the specified String as a URL that will then be embedded in the message.
            Parameters:
            - urlString - String representation of the URL.
            - name - The name that will be set in the file name header field.
            Returns: A String with the Content-ID of the URL.
          - public String embed(URL url, String name) throws EmailException
            Description: Embeds an URL in the HTML. This method embeds a file located by an URL into the mail body. It allows, for instance, to add inline images to the email. Inline files may be referenced with a cid:xxxxxx URL, where xxxxxx is the Content-ID returned by the embed function. It is an error to bind the same name to more than one URL; if the same URL is embedded multiple times, the same Content-ID is guaranteed to be returned. While functionally the same as passing URLDataSource to embed(DataSource, String, String), this method attempts to validate the URL before embedding it in the message and will throw EmailException if the validation fails. In this case, the HtmlEmail object will not be changed.
            Parameters:
            - url - The URL of the file.
            - name - The name that will be set in the file name header field.
            Returns: A String with the Content-ID of the file.
          - public String getHtml()
            Description: Gets the HTML content.
            Returns: the HTML content.
          - public String getText()
            Description: Gets the message text.
            Returns: the message text.
          - public HtmlEmail setHtmlMsg(String html) throws EmailException
            Description: Sets the HTML content.
            Parameters:
            - html - A String.
            Returns: An HtmlEmail.
          - public Email setMsg(String msg) throws EmailException
            Description: Sets the message. This method overrides MultiPartEmail.setMsg(String) in order to send an HTML message instead of a plain text message in the mail body. The message is formatted in HTML for the HTML part of the message; it is left as is in the alternate text part.
            Overrides: setMsg in class MultiPartEmail
            Parameters:
            - msg - the message text to use
            Returns: this HtmlEmail
          - public HtmlEmail setTextMsg(String text) throws EmailException
            Description: Sets the text content.
            Parameters:
            - text - A String.
            Returns: An HtmlEmail.

      Class: ImageHtmlEmail
        Description: Small wrapper class on top of HtmlEmail which encapsulates the required logic to retrieve images that are contained in "<img src=../>" elements in the HTML code. This is done by replacing all img-src-elements with "cid:"-entries and embedding images in the email. For local files the class tries to either load them via an absolute path or - if available - use a relative path starting from a base directory. For files that are not found locally, the implementation tries to download the element and link it in. The image loading is done by an instance of DataSourceResolver which has to be provided by the caller.
        Package: org.apache.commons.mail
        Methods:
          - public void buildMimeMessage() throws EmailException
            Description: Does the work of actually building the MimeMessage.
          - public DataSourceResolver getDataSourceResolver()
            Description: Gets the data source resolver.
            Returns: the resolver
          - public void setDataSourceResolver(DataSourceResolver dataSourceResolver)
            Description: Sets the data source resolver.
            Parameters:
            - dataSourceResolver - the resolver

      Class: EmailBuilder
        Description: Builder starter which offers initial starting places after which control is passed on to the EmailPopulatingBuilderImpl for filling in details.
        Package: org.simplejavamail.email
        Methods:
          - public static org.simplejavamail.api.email.EmailStartingBuilder ignoringDefaults()
            Description: Configures this builder to create an email ignoring the normal (optional) defaults that apply from property config files.
          - public static org.simplejavamail.api.email.EmailPopulatingBuilder replyingTo(@NotNull @NotNull org.simplejavamail.api.email.Email email)
            Description: Delegates to EmailStartingBuilder.replyingTo(Email).
          - public static org.simplejavamail.api.email.EmailPopulatingBuilder replyingToAll(@NotNull @NotNull org.simplejavamail.api.email.Email email)
            Description: Delegates to EmailStartingBuilder.replyingToAll(Email).
          - public static org.simplejavamail.api.email.EmailPopulatingBuilder replyingToAll(@NotNull @NotNull org.simplejavamail.api.email.Email email, @NotNull @NotNull String customQuotingTemplate)
            Description: Delegates to EmailStartingBuilder.replyingToAll(Email, String).
          - public static org.simplejavamail.api.email.EmailPopulatingBuilder replyingTo(@NotNull @NotNull org.simplejavamail.api.email.Email email, @NotNull @NotNull String customQuotingTemplate)
            Description: Delegates to EmailStartingBuilder.replyingTo(Email, String).
          - public static org.simplejavamail.api.email.EmailPopulatingBuilder replyingTo(@NotNull @NotNull jakarta.mail.internet.MimeMessage email)
            Description: Delegates to EmailStartingBuilder.replyingTo(MimeMessage).
          - public static org.simplejavamail.api.email.EmailPopulatingBuilder replyingToAll(@NotNull @NotNull jakarta.mail.internet.MimeMessage email, @NotNull @NotNull String customQuotingTemplate)
            Description: Delegates to EmailStartingBuilder.replyingToAll(MimeMessage, String).
          - public static org.simplejavamail.api.email.EmailPopulatingBuilder replyingTo(@NotNull @NotNull jakarta.mail.internet.MimeMessage email, @NotNull @NotNull String customQuotingTemplate)
            Description: Delegates to EmailStartingBuilder.replyingTo(MimeMessage, String).
          - public static org.simplejavamail.api.email.EmailPopulatingBuilder replyingToAll(@NotNull @NotNull jakarta.mail.internet.MimeMessage email)
            Description: Delegates to EmailStartingBuilder.replyingToAll(MimeMessage).
          - public static org.simplejavamail.api.email.EmailPopulatingBuilder forwarding(@NotNull @NotNull org.simplejavamail.api.email.Email email)
            Description: Delegates to EmailStartingBuilder.forwarding(Email).
          - public static org.simplejavamail.api.email.EmailPopulatingBuilder forwarding(@NotNull @NotNull jakarta.mail.internet.MimeMessage emailMessage)
            Description: Delegates to EmailStartingBuilder.forwarding(MimeMessage).
          - public static org.simplejavamail.api.email.EmailPopulatingBuilder copying(@NotNull @NotNull jakarta.mail.internet.MimeMessage message)
            Description: Delegates to EmailStartingBuilder.copying(MimeMessage).
          - public static org.simplejavamail.api.email.EmailPopulatingBuilder copying(@NotNull @NotNull org.simplejavamail.api.email.EmailPopulatingBuilder emailBuilder)
            Description: Delegates to EmailStartingBuilder.copying(EmailPopulatingBuilder).
          - public static org.simplejavamail.api.email.EmailPopulatingBuilder copying(@NotNull @NotNull org.simplejavamail.api.email.Email email)
            Description: Delegates to EmailStartingBuilder.copying(Email).
          - public static org.simplejavamail.api.email.EmailPopulatingBuilder startingBlank()
            Description: Delegates to EmailStartingBuilder.startingBlank().

      Class: EmailMessage
        Package: com.azure.communication.email.models
        Description: Message payload for sending an email.
        Methods:
          - public List getAttachments()
            Description: Get the attachments property: List of attachments. Please note that we limit the total size of an email request (which includes attachments) to 10MB.
            Parameters: N/A
            Returns: the attachments value.
          - public List getBccRecipients()
            Description: Get the bccRecipients property: Email BCC recipients.
            Parameters: N/A
            Returns: the bCC value.
          - public String getBodyHtml()
            Description: Get the bodyHtml property: Html version of the email message.
            Parameters: N/A
            Returns: the html value.
          - public String getBodyPlainText()
            Description: Get the bodyPlainText property: Plain text version of the email message.
            Parameters: N/A
            Returns: the bodyPlainText value.
          - public List getCcRecipients()
            Description: Get the ccRecipients property: Email CC recipients.
            Parameters: N/A
            Returns: the cc value.
          - public Map getHeaders()
            Description: Get the headers property: Custom email headers to be passed.
            Parameters: N/A
            Returns: the headers value.
          - public List getReplyTo()
            Description: Get the replyTo property: Email addresses where recipients' replies will be sent to.
            Parameters: N/A
            Returns: the replyTo value.
          - public String getSenderAddress()
            Description: Get the senderAddress property: Sender email address from a verified domain.
            Parameters: N/A
            Returns: the senderAddress value.
          - public String getSubject()
            Description: Get the subject property: Subject of the email message.
            Parameters: N/A
            Returns: the subject value.
          - public List getToRecipients()
            Description: Get the toRecipients property: Email To recipients.
            Parameters: N/A
            Returns: the toRecipients value.
          - public EmailMessage setAttachments(EmailAttachment[] attachments)
            Description: Set the attachments property: List of attachments. Please note that we limit the total size of an email request (which includes attachments) to 10MB.
            Parameters:
              - attachments - the attachments value to set.
            Returns: the EmailMessage object itself.
          - public EmailMessage setAttachments(List<EmailAttachment> attachments)
            Description: Set the attachments property: List of attachments. Please note that we limit the total size of an email request (which includes attachments) to 10MB.
            Parameters:
              - attachments - the attachments value to set.
            Returns: the EmailMessage object itself.
          - public EmailMessage setBccRecipients(EmailAddress[] bccRecipients)
            Description: Set the bccRecipients property: Email BCC recipients.
            Parameters:
              - bccRecipients - the bccRecipients value to set.
            Returns: the EmailMessage object itself.
          - public EmailMessage setBccRecipients(String[] bccRecipientAddresses)
            Description: Set the bccRecipients property: Email BCC recipients.
            Parameters:
              - bccRecipients - the bccRecipients value to set.
            Returns: the EmailMessage object itself.
          - public EmailMessage setBccRecipients(List<EmailAddress> bccRecipients)
            Description: Set the bccRecipients property: Email BCC recipients.
            Parameters:
              - bccRecipients - the bccRecipients value to set.
            Returns: the EmailMessage object itself.
          - public EmailMessage setBodyHtml(String bodyHtml)
            Description: Set the bodyHtml property: Html version of the email message.
            Parameters:
              - bodyHtml - the html value to set.
            Returns: the EmailMessage object itself.
          - public EmailMessage setBodyPlainText(String bodyPlainText)
            Description: Set the bodyPlainText property: Plain text version of the email message.
            Parameters:
              - bodyPlainText - the bodyPlainText value to set.
            Returns: the EmailMessage object itself.
          - public EmailMessage setCcRecipients(EmailAddress[] ccRecipients)
            Description: Set the ccRecipients property: Email CC recipients.
            Parameters:
              - ccRecipients - the cc value to set.
            Returns: the EmailMessage object itself.
          - public EmailMessage setCcRecipients(List<EmailAddress> ccRecipients)
            Description: Set the ccRecipients property: Email CC recipients.
            Parameters:
              - ccRecipients - the cc value to set.
            Returns: the EmailMessage object itself.
          - public EmailMessage setCcRecipients(String[] ccRecipientAddresses)
            Description: Set the ccRecipients property: Email CC recipients.
            Parameters:
              - ccRecipients - the cc value to set.
            Returns: the EmailMessage object itself.
          - public EmailMessage setReplyTo(EmailAddress[] replyTo)
            Description: Set the replyTo property: Email addresses where recipients' replies will be sent to.
            Parameters:
              - replyTo - the replyTo value to set.
            Returns: the EmailMessage object itself.
          - public EmailMessage setReplyTo(List<EmailAddress> replyTo)
            Description: Set the replyTo property: Email addresses where recipients' replies will be sent to.
            Parameters:
              - replyTo - the replyTo value to set.
            Returns: the EmailMessage object itself.
          - public EmailMessage setSenderAddress(String senderAddress)
            Description: Set the senderAddress property: Sender email address from a verified domain.
            Note: Please add one line of comment on this `setSenderAddress` method, explaining that the sender address should be a verified domain like `.setSenderAddress("DoNotReply@<your-own-verified-domain>.azurecomm.net")`.
            Parameters:
              - senderAddress - the senderAddress value to set.
            Returns: the EmailMessage object itself.
          - public EmailMessage setSubject(String subject)
            Description: Set the subject property: Subject of the email message.
            Parameters:
              - subject - the subject value to set.
            Returns: the EmailMessage object itself.
          - public EmailMessage setToRecipients(EmailAddress[] toRecipients)
            Description: Set the toRecipients property: Email To recipients.
            Parameters:
              - toRecipients - the toRecipients value to set.
            Returns: the EmailMessage object itself.
          - public EmailMessage setToRecipients(List<EmailAddress> toRecipients)
            Description: Set the toRecipients property: Email To recipients.
            Parameters:
              - toRecipients - the toRecipients value to set.
            Returns: the EmailMessage object itself.
          - public EmailMessage setToRecipients(String[] toRecipientAddresses)
            Description: Set the toRecipients property: Email To recipients.
            Parameters:
              - toRecipients - the toRecipients value to set.
            Returns: the EmailMessage object itself.

      Class: EmailAddress
        Package: com.azure.communication.email.models
        Description: An object representing the email address and its display name.
        Constructor:
          - public EmailAddress(String address)
            Description: Creates an instance of EmailAddress class.
            Parameters:
              - address - the address value to set.
        Methods:
          - public String getAddress()
            Description: Get the address property: Email address.
            Parameters: N/A
            Returns: the address value.
          - public String getDisplayName()
            Description: Get the displayName property: Email display name.
            Parameters: N/A
            Returns: the displayName value.
          - public EmailAddress setDisplayName(String displayName)
            Description: Set the displayName property: Email display name.
            Parameters:
              - displayName - the displayName value to set.
            Returns: the EmailAddress object itself.

      Class: EmailAttachment
        Description: Attachment to the email.
        Package: com.azure.communication.email.models
        Constructor:
          - public EmailAttachment(String name, String contentType, BinaryData content)
            Description: Creates an instance of EmailAttachment class.
            Parameters:
              - name - the name value to set.
              - contentType - the contentType value to set.
              - content - the content value to set.
        Methods:
          - public BinaryData getContent()
            Description: Get the content property: Contents of the attachment.
            Parameters: N/A
            Returns: the content value.
          - public String getContentType()
            Description: Get the contentType property: MIME type of the content being attached.
            Parameters: N/A
            Returns: the contentType value.
          - public String getName()
            Description: Get the name property: Name of the attachment.
            Parameters: N/A
            Returns: the name value.

      Class: EmailSendResult
        Description: Status of the long running operation.
        Package: com.azure.communication.email.models
        Methods:
          - public ResponseError getError()
            Description: Get the error property: Response error when status is a non-success terminal state.
            Returns: the error value.
          - public String getId()
            Description: Get the ID property: The unique id of the operation. Use a UUID.
            Returns: the id value.
          - public EmailSendStatus getStatus()
            Description: Get the status property: Status of operation.
            Returns: the status value.
