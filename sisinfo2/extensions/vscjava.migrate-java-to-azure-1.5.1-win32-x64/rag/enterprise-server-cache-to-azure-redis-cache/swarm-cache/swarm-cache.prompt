#codebase

Here's a draft prompt for migrating from SwarmCache to Azure Cache for Redis in a Java project. I'll focus on code patterns and technical adaptations:

---

### Context
Your Java project currently uses SwarmCache as a distributed cache
Key Points:
1. You need to migrate the entire project to use Azure Cache for Redis instead of SwarmCache, focusing on code changes, dependency updates, and configuration adjustments.
2. Please find suitable places to make the changes directly, like in-place modifying the pom.xml/build.gradle/application.yml file, write compilable code, don't leave uncompleted code blocks.
3. You need to change the all the SwarmCache cache related logic and keep other unchanged. At the same time, each place that uses SwarmCache API, must be replaced with Azure cache for redis ones.
4. Ignore data migration and infrastructure setup.
5. You should delete or comment out the original implementation, since the depdendency will be removed. Or we cannot pass the build.
---

### **Key Differences to Address**
1. **Communication Mechanism**
   - SwarmCache: Uses **IP multicast** for node discovery and data synchronization.
   - Azure Redis: Relies on **unicast TCP** with built-in clustering and replication.

2. **Data Persistence & High Availability**
   - SwarmCache: Typically ephemeral; lacks native persistence.
   - Azure Redis: Supports **RDB/AOF persistence** and **geo-replication** for disaster recovery.

3. **Security Model**
   - SwarmCache: Relies on network-level security (e.g., firewalls).
   - Azure Redis: Enforces **SSL/TLS encryption** and integrates with **Azure Active Directory**.

---

### **Migration Steps**

#### 1. **Dependency Replacement**
- Remove SwarmCache dependencies (e.g., `swarmcache-*.jar`).
- Add Redis client (Jedis/Lettuce) and Azure SDK:
```xml
<dependency>
    <groupId>redis.clients</groupId>
    <artifactId>jedis</artifactId>
    <version>5.2.0</version>
</dependency>
<!-- Optional: Spring Boot Redis Starter -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-redis</artifactId>
    <version>3.4.4</version>
</dependency>
```

#### 2. **API Translation**
- Configure Azure Redis Connection
    Implement secure connection with Microsoft Entra ID authentication:
    ```java
    // Jedis library doesn't support passing in AzureCredentials, so fall back to access key solution
    JedisPoolConfig poolConfig = new JedisPoolConfig();
    poolConfig.setMaxTotal(50); // Match WebSphere thread pool

    JedisPool pool = new JedisPool(poolConfig,
        "<your-cache>.redis.cache.windows.net",
        6380,
        2000,
        "<your-access-key>",
        true // SSL
    );
    ```
- Optional: Spring Boot `application.yml` Configuration
  If using Spring Boot, update Redis properties (keep strict the same properties), and please also consider using the following configs in the redis connection file above:
  ```yaml
  spring:
    data:
      redis:
        host: <AZURE_REDIS_HOST>
        port: 6380
        username: <USERNAME>
        password: <PASSWORD>
				ssl:
          enabled: true
        lettuce:
          pool:
            max-active: 20  # Optimize for Azure Redis connection limits
  ```

- Convert SwarmCache operations to Redis equivalents:
```java
// SwarmCache multicast-based put
cache.put("region:user:123", userData);

// Azure Redis equivalent with hash structure
try (Jedis jedis = pool.getResource()) {
    jedis.hset("region:user", "123", serializeToJson(userData));
    jedis.expire("region:user:123", 3600); // TTL emulation
}
```

#### 3. **Cluster Configuration**
Replace SwarmCache multicast settings with Azure Redis connection pooling:
```java
JedisPoolConfig config = new JedisPoolConfig();
config.setMaxTotal(100); // Match SwarmCache thread pool size
JedisPool pool = new JedisPool(config, "<azure-redis-host>", 6380, 2000, "<access-key>", true);
```

#### 4. **High Availability & Fault Tolerance**
- Migrate SwarmCache failover logic to Azure Redis **geo-redundancy**:
```java
// Enable active geo-replication via Azure CLI
az redis update --name <cache-name> --resource-group <rg> --replicas-per-master 2
```

#### 5. **Performance Optimization**
- Replace SwarmCache multicast efficiency with **Redis pipelining**:
```java
try (Jedis jedis = pool.getResource()) {
    Pipeline p = jedis.pipelined();
    p.hset("inventory:2024", "itemA", "100");
    p.hset("inventory:2024", "itemB", "200");
    p.sync();
}
```

### Pass the build
Use this command to check whether the project can pass the build after migration. If not, fix any build error and make sure it pass the build.
For windows:
```
cmd /c "mvn clean compile -B -fn -DskipTests -Dossindex.failOnError=false -Dossindex.skip=true -Dlicense.skip=true -Dcheckstyle.skip=true -Dencoding=UTF-8"
```
For Linux / macOS:
```
mvn clean compile -B -fn -DskipTests -Dossindex.failOnError=false -Dossindex.skip=true -Dlicense.skip=true -Dcheckstyle.skip=true -Dencoding=UTF-8
```
