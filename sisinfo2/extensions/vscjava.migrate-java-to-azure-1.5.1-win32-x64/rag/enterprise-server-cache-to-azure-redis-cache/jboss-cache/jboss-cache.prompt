#codebase

Here's a draft prompt for migrating from JBoss Cache to Azure Cache for Redis in a Java project. I'll focus on code patterns and technical adaptations:

---

### Context
Your Java project currently uses JBoss Cache as a distributed cache
Key Points:
1. You need to migrate the entire project to use Azure Cache for Redis instead of JBoss Cache, focusing on code changes, dependency updates, and configuration adjustments.
2. Please find suitable places to make the changes directly, like in-place modifying the pom.xml/build.gradle/application.yml file, write compilable code, don't leave uncompleted code blocks.
3. You need to change the all the JBoss Cache cache related logic and keep other unchanged. At the same time, each place that uses JBoss Cache API, must be replaced with Azure cache for redis ones.
4. Ignore data migration and infrastructure setup.
5. You should delete or comment out the original implementation, since the depdendency will be removed. Or we cannot pass the build.

**Key Migration Steps**
1. **Dependency Replacement**
   - Remove JBoss Cache dependencies (`jbosscache-core`, `treecache`, etc.)
   - Add Redis client (Jedis/Lettuce) and Azure SDK dependencies:
     ```xml
    <dependency>
        <groupId>redis.clients</groupId>
        <artifactId>jedis</artifactId>
        <version>4.4.0</version>
    </dependency>
    <dependency>
        <groupId>com.azure.resourcemanager</groupId>
        <artifactId>azure-resourcemanager-redis</artifactId>
        <version>2.25.0</version>
    </dependency>
    <!-- Optional: Spring Boot Redis Starter -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-redis</artifactId>
        <version>3.4.4</version>
    </dependency>
     ```

2. **API Translation**
   - Configure Azure Redis Connection
    Implement secure connection with Microsoft Entra ID authentication:
    ```java
    // Jedis library doesn't support passing in AzureCredentials, so fall back to access key solution
    JedisPoolConfig poolConfig = new JedisPoolConfig();
    poolConfig.setMaxTotal(50); // Match WebSphere thread pool

    JedisPool pool = new JedisPool(poolConfig,
        "<your-cache>.redis.cache.windows.net",
        6380,
        2000,
        "<your-access-key>",
        true // SSL
    );
    ```
   - Optional: Spring Boot `application.yml` Configuration
    If using Spring Boot, update Redis properties (keep strict the same properties), and please also consider using the following configs in the redis connection file above:
    ```yaml
    spring:
        data:
        redis:
            host: <AZURE_REDIS_HOST>
            port: 6380
            username: <USERNAME>
            password: <PASSWORD>
                    ssl:
            enabled: true
            lettuce:
            pool:
                max-active: 20  # Optimize for Azure Redis connection limits
    ```

   - Convert JBoss Cache tree operations to Redis data structures:
     ```java
     // JBoss Cache
     cache.put(fqn, key, value);

     // Azure Redis equivalent
     try (Jedis jedis = pool.getResource()) {
         jedis.hset(fqn.toString(), key, serialize(value));
     }
     ```
   - Replace transactional patterns using `TransactionManager` with Redis MULTI/EXEC

3. **Cluster Configuration**
   - Remove JBoss Cache cluster config (`ClusterConfig` in treecache.xml)
   - Implement Azure Redis connection factory:
     ```java
     JedisPoolConfig poolConfig = new JedisPoolConfig();
     poolConfig.setJmxEnabled(false); // Azure handles monitoring
     JedisPool pool = new JedisPool(poolConfig, "your-redis.redis.cache.windows.net", 6380, 2000, "accessKey", true);
     ```

4. **Cache Policy Conversion**
   - Translate eviction strategies:
     ```xml
     <!-- JBoss Cache -->
     <attribute name="EvictionPolicyClass">org.jboss.cache.eviction.LRUPolicy</attribute>

     <!-- Redis equivalent via CLI -->
     config set maxmemory-policy allkeys-lru
     ```
   - Replace replication modes (`REPL_SYNC/REPL_ASYNC`) with Azure geo-replication

5. **Exception Handling**
   - Convert JBoss-specific exceptions (`CacheException`) to Redis/Jedis exceptions:
     ```java
     // Before
     catch (org.jboss.cache.CacheException e) { ... }

     // After
     catch (JedisConnectionException | RedisException e) { ... }
     ```

### Pass the build
Use this command to check whether the project can pass the build after migration. If not, fix any build error and make sure it pass the build.
For windows:
```
cmd /c "mvn clean compile -B -fn -DskipTests -Dossindex.failOnError=false -Dossindex.skip=true -Dlicense.skip=true -Dcheckstyle.skip=true -Dencoding=UTF-8"
```
For Linux / macOS:
```
mvn clean compile -B -fn -DskipTests -Dossindex.failOnError=false -Dossindex.skip=true -Dlicense.skip=true -Dcheckstyle.skip=true -Dencoding=UTF-8
```
