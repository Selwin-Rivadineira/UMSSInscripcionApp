name: 'Migrate TLS/MTLS certificate from local to Azure Key Vault'
description: "Migrate TLS/MTLS certificate management from local storage to Azure Key Vault"
codeLocation:
  type: textsearch
  filePattern: "**/*.java"
  codePattern: >-
    KeyStore|Certificate|SSLContext

steps:
  - description: "Migrate TLS/MTLS certificate management from local storage to Azure Key Vault"
    type: "instruction"
    content: |
      Your task is to migrate a Java file from managing TLS/MTLS certificates locally (e.g., using KeyStore) to managing certificates in Azure Key Vault JCA while maintaining the same functionality. Below is a reference to the relevant Azure Key Vault APIs and migration examples for your convenience.
      Please notes:
      Replace `KeyStore` initialization with Azure Key Vault JCA equivalents.         
        - Example:
        ```java
        // Local KeyStore example
        KeyStore keyStore = KeyStore.getInstance("JKS");

        // Azure Key Vault JCA equivalent
        KeyVaultJcaProvider provider = new KeyVaultJcaProvider();
        Security.addProvider(provider);
        KeyStore keyStore = KeyVaultKeyStore.getKeyVaultKeyStoreBySystemProperty();
        ```
      Should not remove KeyManagerFactory, need it to initialize SSLContext.
      Make sure you add the following Descriptions as Comments if using KeyVaultKeyStore.getKeyVaultKeyStoreBySystemProperty()
        /**
         * Set the following configuration as system properties
         * - `azure.keyvault.uri`: The URI of your Azure Key Vault.
         * - `azure.keyvault.tenant-id`: The tenant ID of your Azure Active Directory.
         * - `azure.keyvault.client-id`: The client ID of your Azure Active Directory application.
         * - `azure.keyvault.client-secret`: The client secret of your Azure Active Directory application.
         */

      Ensure the resulting code is clean, efficient, and preserves the original functionality. Keep all irrelevant code/comments unchanged.
