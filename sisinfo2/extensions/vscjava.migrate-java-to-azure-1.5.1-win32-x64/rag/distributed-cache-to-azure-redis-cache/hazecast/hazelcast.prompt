#codebase

Prompt for Java Project Code Migration: Hazelcast → Azure Cache for Redis

### Context
Your Java project currently uses Hazelcast as a distributed cache (e.g., `IMap`, `HazelcastInstance`).
Key Points:
1. You need to migrate the entire project to use Azure Cache for Redis instead of Hazelcast, focusing on code changes, dependency updates, and configuration adjustments.
2. Please find suitable places to make the changes directly, like in-place modifying the pom.xml/build.gradle/application.yml file, write compilable code, don't leave uncompleted code blocks.
3. You need to change the all the Hazelcast cache related logic and keep other unchanged. At the same time, each place that uses Hazelcast API (e.g. `HazelcastInstance`), must be replaced with Azure cache for redis ones.
4. Ignore data migration and infrastructure setup.
5. You should delete or comment out the original implementation, since the depdendency will be removed. Or we cannot pass the build.

---

### Actionable Steps

#### 1. Dependency Replacement
Hazelcast Dependency → Redis Client
- Remove Hazelcast from `pom.xml`:
  ```xml
  <!-- Remove this -->
  <dependency>
    <groupId>com.hazelcast</groupId>
    <artifactId>hazelcast</artifactId>
    <version>5.x</version>
  </dependency>
  ```
- Add Redis Client (e.g., Lettuce):
  ```xml
  <dependency>
    <groupId>io.lettuce</groupId>
    <artifactId>lettuce-core</artifactId>
    <version>6.2.4</version>
  </dependency>
  <!-- Optional: Spring Boot Redis Starter -->
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-redis</artifactId>
    <version>3.4.4</version>
  </dependency>
  ```

---

#### 2. Configuration Migration
Hazelcast Config → Redis Connection
Note: if it's a spring boot project, consider leveraging the spring boot properties file to init the redis connections. At the same time, Azure cache for Redis requires SSL -> true by default.
- Replace Hazelcast XML/Java config with Redis connection setup:
  ```java
  // Hazelcast (remove)
  HazelcastInstance hz = Hazelcast.newHazelcastInstance();
  IMap<String, String> map = hz.getMap("my-map");

  // Redis (new)
  RedisURI uri = RedisURI.Builder.redis("<AZURE_REDIS_HOST>")
      .withPort(6380)
      .withSsl(true)
      .withAuthentication("<USERNAME>", "<PASSWORD>")
      .build();
  RedisClient client = RedisClient.create(uri);
  StatefulRedisConnection<String, String> connection = client.connect();
  RedisCommands<String, String> commands = connection.sync();

  ```
- Optional: Spring Boot `application.yml` Configuration
  If using Spring Boot, update Redis properties (keep strict the same properties), and please also consider using the following configs in the redis connection file above:
  ```yaml
  spring:
    data:
      redis:
        host: <AZURE_REDIS_HOST>
        port: 6380
        username: <USERNAME>
        password: <PASSWORD>
        ssl:
          enabled: true
    # Optional: Enable Azure passwordless authentication
    cloud:
      azure:
        redis:
          passwordless-enabled: true
  ```
---

#### 3. Code Refactoring

You need to find all the distributed cache related usages and replace them with Azure cache for redis implementation base on the guides below:

Hazelcast-Specific APIs → Redis Commands
- Distributed Map Operations:
  ```java
  // Hazelcast
  map.put("key", "value");
  String value = map.get("key");

  // Redis
  commands.set("key", "value");
  String value = commands.get("key");

  ```
- Locking Mechanisms:
  ```java
  // Hazelcast (ILock)
  ILock lock = hz.getLock("my-lock");
  lock.lock();
  // ... critical section ...
  lock.unlock();

  // Redis (use SET with NX/EX)
  String result = commands.set("lock-key", "owner", SetArgs.Builder.nx().ex(10));
  if ("OK".equals(result)) {
    // ... critical section ...
    commands.del("lock-key");
  }

  ```

---

#### 4. Cluster Configuration (Optional)
If using Hazelcast cluster features:
- Replace with Redis Cluster:
  ```java
  // Hazelcast (cluster config)
  config.getNetworkConfig().getJoin().getTcpIpConfig().addMember("node1:5701");

  // Redis (cluster client)
  RedisClusterClient clusterClient = RedisClusterClient.create("redis://<HOST>:<PORT>");
  StatefulRedisClusterConnection<String, String> clusterConnection = clusterClient.connect();

  ```

---

#### 5. Error Handling
- Hazelcast Exceptions (e.g., `HazelcastInstanceNotActiveException`) → Redis Exceptions (e.g., `RedisException`):
  ```java
  try {
    commands.get("key");
  } catch (RedisException e) {
    // Handle connection/timeout issues
  }

  ```

### Pass the build
Use this command to check whether the project can pass the build after migration. If not, fix any build error and make sure it pass the build.
For windows:
```
cmd /c "mvn clean compile -B -fn -DskipTests -Dossindex.failOnError=false -Dossindex.skip=true -Dlicense.skip=true -Dcheckstyle.skip=true -Dencoding=UTF-8"
```
For Linux / macOS:
```
mvn clean compile -B -fn -DskipTests -Dossindex.failOnError=false -Dossindex.skip=true -Dlicense.skip=true -Dcheckstyle.skip=true -Dencoding=UTF-8
```
