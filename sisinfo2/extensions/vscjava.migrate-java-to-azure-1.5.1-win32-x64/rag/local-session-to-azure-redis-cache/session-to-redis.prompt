#codebase

The target is to migrate from local session management in a spring app to use Azure Cache for Redis to manage session data.
Key Points:
1. You need to migrate the entire project to use Azure Cache for Redis instead of Spring Boot Cache, focusing on code changes, dependency updates, and configuration adjustments.
2. Please find suitable places to make the changes directly, like in-place modifying the pom.xml/build.gradle/application.yml file, write compilable code, don't leave uncompleted code blocks.
3. You need to change the all the Spring Boot Cache cache related logic and keep other unchanged. At the same time, each place that uses Spring Boot Cache API, must be replaced with Azure cache for redis ones.
4. Ignore data migration and infrastructure setup.
5. You should delete or comment out the original implementation, since the depdendency will be removed. Or we cannot pass the build.

The example of local session management is like the API below:

```
HttpSession session = request.getSession();
session.setAttribute("user", user);
```
Migrate to Spring Data Redis only involves several minor changes listed above, please follow the steps to do the migration:

1. Update the pom dependency to support spring data redis
```xml
    <!-- Spring Data Redis -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-redis</artifactId>
    </dependency>

    <!-- Spring Session for Redis integration -->
    <dependency>
        <groupId>org.springframework.session</groupId>
        <artifactId>spring-session-data-redis</artifactId>
    </dependency>

```
2. Update config file like application.properties/yml (create one if necessary). The example below is a yml format, change to .properties if you need.
```yml
spring:
  session:
    store-type: redis
    timeout: 1800s  # 30-minute session expiration
    redis:
      namespace: "myapp:sessions"  # Custom key prefix[10](@ref)

  redis:
    host: <your-cache-name>.redis.cache.windows.net
    port: 6380  # Azure's mandatory SSL port[4](@ref)
    password: <primary-access-key>  # From Azure portal
    ssl: true  # Required for Azure Redis[2,4](@ref)
    lettuce:
      pool:
        max-active: 8
        max-idle: 4
        min-idle: 1
```
3. Create a new class in suitable place to register a Redis Configration Class
```java
package com.example.config;

import io.netty.handler.ssl.util.InsecureTrustManagerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisStandaloneConfiguration;
import org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
import org.springframework.session.data.redis.config.ConfigureRedisAction;
import org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;
import io.lettuce.core.ClientOptions;
import io.lettuce.core.SslOptions;

@Configuration
@EnableRedisHttpSession  // Activates Redis session storage
public class RedisSessionConfig {

    @Value("${spring.redis.host}")
    private String host;

    @Value("${spring.redis.port}")
    private int port;

    @Value("${spring.redis.password}")
    private String password;

    @Bean
    public static ConfigureRedisAction configureRedisAction() {
        return ConfigureRedisAction.NO_OP; // Azure Cache for Redis doesn't support CONFIG cmd
    }

    @Bean
    public LettuceConnectionFactory redisConnectionFactory() {
        SslOptions sslOptions = SslOptions.builder()
                .trustManager(InsecureTrustManagerFactory.INSTANCE) // Change to secure ca when using in prod
                .build();

        LettuceClientConfiguration clientConfig = LettuceClientConfiguration.builder()
                .clientOptions(ClientOptions.builder().autoReconnect(true).sslOptions(sslOptions).build())
                .useSsl()
                .build();

        RedisStandaloneConfiguration serverConfig = new RedisStandaloneConfiguration();
        serverConfig.setHostName(host);
        serverConfig.setPort(port);
        serverConfig.setPassword(password);

        return new LettuceConnectionFactory(serverConfig, clientConfig);
    }
}
```

### Pass the build
Use this command to check whether the project can pass the build after migration. If not, fix any build error and make sure it pass the build.
For windows:
```
cmd /c "mvn clean compile -B -fn -DskipTests -Dossindex.failOnError=false -Dossindex.skip=true -Dlicense.skip=true -Dcheckstyle.skip=true -Dencoding=UTF-8"
```
For Linux / macOS:
```
mvn clean compile -B -fn -DskipTests -Dossindex.failOnError=false -Dossindex.skip=true -Dlicense.skip=true -Dcheckstyle.skip=true -Dencoding=UTF-8
```
