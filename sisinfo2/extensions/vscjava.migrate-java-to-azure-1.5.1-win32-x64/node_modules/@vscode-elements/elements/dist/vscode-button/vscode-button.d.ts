import { PropertyValueMap, TemplateResult } from 'lit';
import { VscElement } from '../includes/VscElement.js';
import '../vscode-icon/index.js';
/**
 * Clickable element that are used to trigger actions.
 *
 * @tag vscode-button
 *
 * @fires vsc-click Dispatched only when button is not in disabled state.
 *
 * @cssprop [--vscode-button-background=#0078d4]
 * @cssprop [--vscode-button-foreground=#ffffff]
 * @cssprop [--vscode-button-border=var(--vscode-button-background, rgba(255, 255, 255, 0.07))]
 * @cssprop [--vscode-button-hoverBackground=#026ec1]
 * @cssprop [--vscode-font-family=sans-serif] - A sans-serif font type depends on the host OS.
 * @cssprop [--vscode-font-size=13px]
 * @cssprop [--vscode-font-weight=normal]
 * @cssprop [--vscode-button-secondaryForeground=#cccccc]
 * @cssprop [--vscode-button-secondaryBackground=#313131]
 * @cssprop [--vscode-button-secondaryHoverBackground=#3c3c3c]
 * @cssprop [--vscode-focusBorder=#0078d4]
 */
export declare class VscodeButton extends VscElement {
    static styles: import("lit").CSSResultGroup;
    /** @internal */
    static formAssociated: boolean;
    autofocus: boolean;
    /** @internal */
    tabIndex: number;
    /**
     * Button has a less prominent style.
     */
    secondary: boolean;
    /** @internal */
    role: string;
    disabled: boolean;
    /**
     * A [Codicon](https://microsoft.github.io/vscode-codicons/dist/codicon.html) before the label
     */
    icon: string;
    /**
     * Spin property for the icon
     */
    iconSpin?: boolean | undefined;
    /**
     * Duration property for the icon
     */
    iconSpinDuration?: number;
    /**
     * A [Codicon](https://microsoft.github.io/vscode-codicons/dist/codicon.html) after the label
     */
    iconAfter: string;
    /**
     * Spin property for the after icon
     */
    iconAfterSpin: boolean;
    /**
     * Duration property for the after icon
     */
    iconAfterSpinDuration?: number;
    focused: boolean;
    name: string | undefined;
    iconOnly: boolean;
    type: 'submit' | 'reset' | 'button';
    value: string;
    private _prevTabindex;
    private _internals;
    get form(): HTMLFormElement | null;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    update(changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void;
    private _executeAction;
    private _handleKeyDown;
    private _handleClick;
    private _handleFocus;
    private _handleBlur;
    render(): TemplateResult;
}
declare global {
    interface HTMLElementTagNameMap {
        'vscode-button': VscodeButton;
    }
}
//# sourceMappingURL=vscode-button.d.ts.map