"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.supportedBuildCmds = void 0;
exports.createBuildTool = createBuildTool;
exports.isMavenSupportedInRepo = isMavenSupportedInRepo;
exports.isGradleSupportedInRepo = isGradleSupportedInRepo;
const fs_1 = require("fs");
const path_1 = require("path");
const GradleBuildTool_1 = require("./GradleBuildTool");
const MavenBuildTool_1 = require("./MavenBuildTool");
exports.supportedBuildCmds = ['mvn', 'mvnw', 'gradle', 'gradlew'];
function createBuildTool(repoPath, env, cmdInfo, logger, signal) {
    const buildCmd = (env === null || env === void 0 ? void 0 : env.getExecutableNames().find((name) => exports.supportedBuildCmds.includes(name))) || 'mvn';
    switch (buildCmd) {
        case 'mvn':
        case 'mvnw':
            return new MavenBuildTool_1.MavenBuildTool(buildCmd, repoPath, env, cmdInfo, logger, signal);
        case 'gradle':
        case 'gradlew':
            return new GradleBuildTool_1.GradleBuildTool(buildCmd, repoPath, env, cmdInfo, logger, signal);
        default:
            throw new Error('No supported build command found.');
    }
}
function isMavenSupportedInRepo(repoPath) {
    const pomConfigPath = (0, path_1.join)(repoPath, 'pom.xml');
    return (0, fs_1.existsSync)(pomConfigPath);
}
function isGradleSupportedInRepo(repoPath) {
    const gradleConfigPath = (0, path_1.join)(repoPath, 'build.gradle');
    const gradleKotlinsConfigPath = (0, path_1.join)(repoPath, 'build.gradle.kts');
    return (0, fs_1.existsSync)(gradleConfigPath) || (0, fs_1.existsSync)(gradleKotlinsConfigPath);
}
//# sourceMappingURL=JavaBuildTool.utils.js.map