import { IRunOptions } from '../common/shell';
import { EnvVars } from '../common/types';
import { IEnvironmentExecutable } from './types';
export declare const localExecutable: (command: string) => IEnvironmentExecutable;
export declare const pathExecutable: (command: string, commandPath: string) => IEnvironmentExecutable;
export declare function checkCommandExist(command: string, commandPath: string): boolean;
export declare class Environment {
    readonly name: string;
    static readonly Local: Environment;
    static readonly Maven: Environment;
    static readonly Gradle: Environment;
    readonly executables: IEnvironmentExecutable[];
    envVars: EnvVars;
    constructor(name: string, executables: IEnvironmentExecutable[], envVars?: EnvVars);
    getExecutableNames(): string[];
    getFullCmdArgs(command: string, args: string[]): string[];
    runCommand(workDir: string, command: string, args: string[], runOptions?: IRunOptions): Promise<string>;
    private getPathEnvVariable;
}
//# sourceMappingURL=Environment.d.ts.map