"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var MCPLoggerImpl_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MCPLoggerImpl = void 0;
const path_1 = __importDefault(require("path"));
const tsyringe_1 = require("tsyringe");
const winston_1 = __importDefault(require("winston"));
const settings_1 = require("./settings");
const types_1 = require("./types");
let MCPLoggerImpl = MCPLoggerImpl_1 = class MCPLoggerImpl {
    constructor(settings) {
        this.settings = settings;
        this.winstonLogger = this.createWinstonLogger();
    }
    createWinstonLogger() {
        const addPid = winston_1.default.format((info) => {
            info.pid = process.pid;
            return info;
        });
        const winstonLogger = winston_1.default.createLogger({
            levels: MCPLoggerImpl_1.customLevels,
            level: this.settings.getLogLevel(),
            format: winston_1.default.format.combine(addPid(), winston_1.default.format.colorize({
                colors: {
                    fatal: 'red',
                    error: 'red',
                    warn: 'yellow',
                    info: 'green',
                    telemetry: 'cyan',
                    debug: 'blue',
                    trace: 'magenta',
                },
            }), winston_1.default.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss.SSS' }), MCPLoggerImpl_1.customizedFormat),
            transports: [
                new winston_1.default.transports.File({
                    filename: path_1.default.join(this.settings.getLogFilePath(), 'mcp-server.log'),
                    lazy: false,
                    maxsize: 100 * 1024 * 1024,
                    maxFiles: 5,
                }),
            ],
        });
        return winstonLogger;
    }
    rebuildLogger() {
        this.winstonLogger = this.createWinstonLogger();
    }
    info(message, ...args) {
        if (this.winstonLogger.isInfoEnabled()) {
            this.winstonLogger.info(message, ...args);
        }
    }
    warn(message, ...args) {
        if (this.winstonLogger.isWarnEnabled()) {
            this.winstonLogger.warn(message, ...args);
        }
    }
    error(message, ...args) {
        if (this.winstonLogger.isErrorEnabled()) {
            this.winstonLogger.error(message, ...args);
        }
    }
    debug(message, ...args) {
        if (this.winstonLogger.isDebugEnabled()) {
            this.winstonLogger.debug(message, ...args);
        }
    }
    trace(message, ...args) {
        if (this.winstonLogger.isLevelEnabled('trace')) {
            this.winstonLogger.log('trace', message, ...args);
        }
    }
    telemetry(eventName, properties, measurements) {
        if (!this.winstonLogger.isLevelEnabled('telemetry')) {
            return;
        }
        this.winstonLogger.log('telemetry', `Telemetry Event: ${eventName}`, {
            properties: properties || {},
            measurements: measurements || {},
        });
    }
};
exports.MCPLoggerImpl = MCPLoggerImpl;
MCPLoggerImpl.customLevels = {
    fatal: 0,
    error: 1,
    warn: 2,
    telemetry: 3, // Ensure telemetry is logged when the level is set under this level
    info: 4,
    debug: 5,
    trace: 6,
};
MCPLoggerImpl.customizedFormat = winston_1.default.format.printf(({ timestamp, level, message, pid, ...meta }) => {
    let msg = `[${pid}] ${timestamp} [${level}] ${message}`;
    if (Object.keys(meta).length > 0) {
        msg += ` ${JSON.stringify(meta)}`;
    }
    return msg;
});
exports.MCPLoggerImpl = MCPLoggerImpl = MCPLoggerImpl_1 = __decorate([
    (0, tsyringe_1.injectable)(),
    __param(0, (0, tsyringe_1.inject)(types_1.Beans.Settings)),
    __metadata("design:paramtypes", [settings_1.Settings])
], MCPLoggerImpl);
//# sourceMappingURL=logger.js.map