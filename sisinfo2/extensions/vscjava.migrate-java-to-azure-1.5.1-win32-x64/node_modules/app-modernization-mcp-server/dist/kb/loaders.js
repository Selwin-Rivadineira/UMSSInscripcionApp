"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompositeLoader = exports.DirectoryLoader = exports.FileLoader = void 0;
exports.isDocumentLoaderWithWatcher = isDocumentLoaderWithWatcher;
exports.decorateWithWatcher = decorateWithWatcher;
exports.createLoaderFromPaths = createLoaderFromPaths;
exports.createLoadesMapping = createLoadesMapping;
const chokidar_1 = __importDefault(require("chokidar"));
const fs = __importStar(require("fs"));
const ignore_1 = __importDefault(require("ignore"));
const path = __importStar(require("path"));
const stream_1 = require("stream");
const utils_1 = require("../utils");
const metadata_1 = require("./metadata");
function isDocumentLoaderWithWatcher(loader) {
    return 'watch' in loader && typeof loader.watch === 'function';
}
class FileLoader {
    constructor(filePath, assignedMetadata) {
        this.filePath = filePath;
        this.assignedMetadata = assignedMetadata;
    }
    async load() {
        const content = await this.readFile(this.filePath);
        return [
            {
                pageContent: content,
                metadata: Object.assign({ source: this.filePath }, this.assignedMetadata),
            },
        ];
    }
    async readFile(filePath) {
        return fs.readFileSync(filePath, 'utf-8');
    }
}
exports.FileLoader = FileLoader;
class DirectoryLoader {
    constructor(directoryPath, loadersMapping, ignore, logger) {
        this.directoryPath = directoryPath;
        this.loadersMapping = loadersMapping;
        this.ignore = ignore;
        this.logger = logger;
    }
    async load() {
        if (!fs.existsSync(this.directoryPath)) {
            return [];
        }
        const files = fs.readdirSync(this.directoryPath, { withFileTypes: true });
        const documents = [];
        for (const file of files) {
            const filePath = path.resolve(this.directoryPath, file.name);
            if (file.isDirectory()) {
                const subLoader = new DirectoryLoader(filePath, this.loadersMapping, this.ignore, this.logger);
                const subDocuments = await subLoader.load();
                documents.push(...subDocuments);
                continue;
            }
            const ext = path.extname(filePath).toLowerCase();
            if (this.loadersMapping[ext]) {
                const loader = this.loadersMapping[ext](filePath);
                const docs = await loader.load();
                documents.push(...docs.filter((doc) => {
                    const relativePath = metadata_1.MetadataGetter.getRelativePath(doc);
                    const ignored = this.ignore.ignores(relativePath);
                    if (ignored) {
                        this.logger.debug(`Ignoring document: ${metadata_1.MetadataGetter.getSource(doc)}`);
                    }
                    return !ignored;
                }));
            }
        }
        return documents;
    }
}
exports.DirectoryLoader = DirectoryLoader;
function decorateWithWatcher(directoryLoader, logger) {
    const eventEmitter = new stream_1.EventEmitter();
    const { directoryPath, loadersMapping } = directoryLoader;
    const watcher = chokidar_1.default.watch(directoryPath, {
        persistent: true,
        ignoreInitial: true,
        ignorePermissionErrors: true,
        ignored: ['C:/', 'C:\\'],
        followSymlinks: false,
    });
    return {
        load: directoryLoader.load.bind(directoryLoader),
        on: (event, listener) => {
            eventEmitter.on(event, listener);
        },
        watch: () => {
            logger.debug(`Watching directory: ${directoryPath}`);
            watcher.on('all', async (event, filePath) => {
                if (event === 'add' || event === 'change') {
                    logger.info(`File ${event} detected: ${filePath}`);
                    const ext = path.extname(filePath).toLowerCase();
                    if (!loadersMapping[ext]) {
                        logger.warn(`No loader registered for extension ${ext} in file ${filePath}`);
                        return; // Skip files without a registered loader
                    }
                    const loader = loadersMapping[ext](filePath);
                    const docs = await loader.load();
                    eventEmitter.emit(event, {
                        filePath,
                        doc: docs[0] || { pageContent: '', metadata: { source: filePath } },
                    });
                }
                else if (event === 'unlink') {
                    logger.info(`File deleted: ${filePath}`);
                    eventEmitter.emit('delete', { filePath });
                }
            });
        },
    };
}
class CompositeLoader {
    constructor(...loaders) {
        this.loaders = loaders;
    }
    on(event, listener) {
        for (const loader of this.loaders) {
            if ('on' in loader) {
                loader.on(event, listener);
            }
        }
    }
    watch() {
        for (const loader of this.loaders) {
            if ('watch' in loader) {
                loader.watch();
            }
        }
    }
    async load() {
        const results = await Promise.all(this.loaders.map((loader) => loader.load()));
        return results.flat();
    }
    static from(...loaders) {
        return new CompositeLoader(...loaders);
    }
}
exports.CompositeLoader = CompositeLoader;
function createLoaderFromPaths(logger, options, ...paths) {
    const loaders = [];
    for (const p of paths) {
        const filePath = typeof p === 'string' ? p : p.filePath;
        const assignedMetadata = typeof p === 'string' ? {} : p.metadata;
        assignedMetadata['loadedFrom'] = filePath;
        const kbignore = (0, ignore_1.default)().add((0, utils_1.loadIgnoreFile)(path.join(filePath, '.kbignore')));
        const loaderMapping = createLoadesMapping(assignedMetadata);
        if (!fs.existsSync(filePath)) {
            if (options.watch) {
                logger.warn(`Directory does not exist: ${filePath}, create it`);
                fs.mkdirSync(filePath, { recursive: true });
            }
            else {
                logger.warn(`Directory does not exist: ${filePath}`);
                continue;
            }
        }
        logger.debug(`Loading from path: ${filePath} with metadata: ${JSON.stringify(assignedMetadata)}`);
        if (options.watch) {
            loaders.push(decorateWithWatcher(new DirectoryLoader(filePath, loaderMapping, kbignore, logger), logger));
        }
        else {
            loaders.push(new DirectoryLoader(filePath, loaderMapping, kbignore, logger));
        }
    }
    return CompositeLoader.from(...loaders);
}
function createLoadesMapping(assignedMetadata) {
    return {
        '.formula': (filePath) => new FileLoader(filePath, assignedMetadata),
        '.prompt': (filePath) => new FileLoader(filePath, assignedMetadata),
        '.md': (filePath) => new FileLoader(filePath, assignedMetadata),
        // Add more loaders for different file types as needed
    };
}
//# sourceMappingURL=loaders.js.map