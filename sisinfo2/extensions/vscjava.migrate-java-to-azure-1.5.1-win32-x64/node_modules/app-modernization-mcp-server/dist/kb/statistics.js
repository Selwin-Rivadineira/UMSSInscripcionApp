"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchStatistics = void 0;
/**
 * Provides statistical analysis for a set of numerical scores, including mean, median, min, max, standard deviation, z-scores, and outlier detection.
 *
 * @remarks
 * This class is useful for summarizing and analyzing an array of numbers, such as scores or measurements.
 *
 * @example
 * ```typescript
 * const stats = new DescriptionStatistics([1, 2, 3, 4, 5]);
 * console.log(stats.mean); // 3
 * console.log(stats.median); // 3
 * console.log(stats.min); // 1
 * console.log(stats.max); // 5
 * console.log(stats.standardDeviation); // ~1.41
 * console.log(stats.zScores); // [-1.41, -0.71, 0, 0.71, 1.41]
 * console.log(stats.detectedOutliers()); // []
 * ```
 *
 * @public
 */
class SearchStatistics {
    constructor(scores) {
        this.scores = scores;
    }
    get mean() {
        if (!this.scores || this.scores.length === 0)
            return NaN;
        return this.scores.reduce((a, b) => a + b, 0) / this.scores.length;
    }
    get median() {
        if (!this.scores || this.scores.length === 0)
            return NaN;
        const sorted = [...this.scores].sort((a, b) => a - b);
        const mid = Math.floor(sorted.length / 2);
        return sorted.length % 2 === 0 ? (sorted[mid - 1] + sorted[mid]) / 2 : sorted[mid];
    }
    get min() {
        if (!this.scores || this.scores.length === 0)
            return NaN;
        return Math.min(...this.scores);
    }
    get max() {
        if (!this.scores || this.scores.length === 0)
            return NaN;
        return Math.max(...this.scores);
    }
    get stddev() {
        if (!this.scores || this.scores.length === 0)
            return NaN;
        const avg = this.mean;
        const variance = this.scores.reduce((sum, score) => sum + (score - avg) ** 2, 0) / this.scores.length;
        return Math.sqrt(variance);
    }
    get zScores() {
        if (!this.scores || this.scores.length === 0)
            return [];
        const avg = this.mean;
        const std = this.stddev;
        if (isNaN(std) || std === 0)
            return this.scores.map(() => 0);
        return this.scores.map((score) => (score - avg) / std);
    }
    get outliersIQR() {
        if (!this.scores || this.scores.length === 0)
            return [];
        const sorted = [...this.scores].sort((a, b) => a - b);
        const q1 = sorted[Math.floor(sorted.length / 4)];
        const q3 = sorted[Math.floor((sorted.length * 3) / 4)];
        const iqr = q3 - q1;
        const lower = q1 - 1.5 * iqr;
        const upper = q3 + 1.5 * iqr;
        return this.scores
            .map((score, i) => ({ index: i, value: score }))
            .filter((item) => item.value < lower || item.value > upper);
    }
    toString() {
        return [
            `Mean: ${this.mean.toFixed(4)}`,
            `Median: ${this.median.toFixed(4)}`,
            `Min: ${this.min.toFixed(4)}`,
            `Max: ${this.max.toFixed(4)}`,
            `Standard Deviation: ${this.stddev.toFixed(4)}`,
            `Outliers: [${this.outliersIQR.map((item) => item.value).join(', ')}]`,
        ].join(', ');
    }
}
exports.SearchStatistics = SearchStatistics;
//# sourceMappingURL=statistics.js.map