"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarkdownToKb = void 0;
const gray_matter_1 = __importDefault(require("gray-matter"));
const win32_1 = __importDefault(require("path/win32"));
const tsyringe_1 = require("tsyringe");
const types_1 = require("../types");
const utils_1 = require("../utils");
const loaders_1 = require("./loaders");
const metadata_1 = require("./metadata");
let MarkdownToKb = class MarkdownToKb {
    constructor(documentLoader, logger) {
        this.documentLoader = documentLoader;
        this.logger = logger;
    }
    async load() {
        const docs = await this.documentLoader.load();
        return docs.flatMap((doc) => {
            const { ok, converted } = this.markdownConverter(doc);
            if (ok) {
                return [converted];
            }
            return [];
        });
    }
    markdownConverter(doc) {
        var _a;
        try {
            const source = metadata_1.MetadataGetter.getSource(doc);
            const ext = win32_1.default.extname(source).toLowerCase();
            if (ext !== types_1.MARKDOWN_EXTENSION) {
                return { ok: false, converted: {} };
            }
            const parsed = (0, gray_matter_1.default)(doc.pageContent);
            const metadata = parsed.data;
            const validation = types_1.KBSchema.safeParse(metadata);
            if (validation.success === false) {
                this.logger.warn(`Invalid markdown for kb: ${source}, error: ${JSON.stringify(validation.error)}`);
                return { ok: false, converted: {} };
            }
            return {
                ok: true,
                converted: {
                    id: metadata.id,
                    title: metadata.title,
                    description: metadata.description || '',
                    content: parsed.content,
                    disabled: (_a = metadata.disabled) !== null && _a !== void 0 ? _a : false,
                    metadata: {
                        docType: 'markdown',
                        ...doc.metadata,
                        ...(0, utils_1.omit)(metadata, ['id', 'title', 'description', 'disabled']),
                    },
                },
            };
        }
        catch (error) {
            this.logger.error(`Failed to convert markdown document: ${error}`);
            return { ok: false, converted: {} };
        }
    }
    onChange(callbacks) {
        if (!(0, loaders_1.isDocumentLoaderWithWatcher)(this.documentLoader)) {
            this.logger.warn('Document loader does not support change events');
            return;
        }
        this.documentLoader.on('add', ({ doc }) => {
            const source = metadata_1.MetadataGetter.getSource(doc);
            if (source.endsWith(types_1.MARKDOWN_EXTENSION)) {
                const kb = this.markdownConverter(doc);
                if (kb.ok) {
                    callbacks.onAdd(kb.converted);
                }
            }
        });
        this.documentLoader.on('change', ({ doc }) => {
            const source = metadata_1.MetadataGetter.getSource(doc);
            if (source.endsWith(types_1.MARKDOWN_EXTENSION)) {
                const kb = this.markdownConverter(doc);
                if (kb.ok) {
                    callbacks.onChange(kb.converted);
                }
            }
        });
        this.documentLoader.on('delete', ({ filePath }) => {
            if (filePath.endsWith(types_1.MARKDOWN_EXTENSION)) {
                callbacks.onDelete(filePath);
            }
        });
    }
};
exports.MarkdownToKb = MarkdownToKb;
exports.MarkdownToKb = MarkdownToKb = __decorate([
    (0, tsyringe_1.injectable)(),
    __metadata("design:paramtypes", [Object, Object])
], MarkdownToKb);
//# sourceMappingURL=markdown_to_kb.js.map