"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const codetocloud_1 = require("./codetocloud");
const server_1 = require("./server");
var ServerType;
(function (ServerType) {
    ServerType["JavaMigration"] = "javaMigration";
    ServerType["DotnetMigration"] = "dotnetMigration";
    ServerType["CodeToCloud"] = "codetocloud";
})(ServerType || (ServerType = {}));
function parseArg(argKey) {
    const args = process.argv.slice(2);
    const index = args.indexOf(argKey);
    return index !== -1 && index + 1 < args.length ? args[index + 1] : undefined;
}
// Parse command line arguments
function getServerType() {
    var _a;
    return (_a = parseArg('--serverType')) !== null && _a !== void 0 ? _a : ServerType.JavaMigration;
}
function getCodeToCloudDeployWorkflowName() {
    const workflowName = parseArg('--codeToCloudDeployWorkflowName');
    if (workflowName === undefined) {
        throw new Error('Missing required argument: --codeToCloudDeployWorkflowName');
    }
    return workflowName;
}
function getCodeToCloudDeployToExistingWorkflowName() {
    const workflowName = parseArg('--codeToCloudDeployToExistingWorkflowName');
    if (workflowName === undefined) {
        throw new Error('Missing required argument: --codeToCloudDeployToExistingWorkflowName');
    }
    return workflowName;
}
function getCodeToCloudContainerizationWorkflowName() {
    const workflowName = parseArg('--codeToCloudContainerizationWorkflowName');
    if (workflowName === undefined) {
        throw new Error('Missing required argument: --codeToCloudContainerizationWorkflowName');
    }
    return workflowName;
}
const serverType = getServerType();
try {
    switch (serverType) {
        case ServerType.JavaMigration:
            (0, server_1.setupJavaMigrationMcpServer)();
            break;
        case ServerType.DotnetMigration:
            (0, server_1.setupJavaMigrationMcpServer)();
            break;
        case ServerType.CodeToCloud:
            (0, codetocloud_1.setupCodeToCloudMcp)(getCodeToCloudDeployWorkflowName(), getCodeToCloudDeployToExistingWorkflowName(), getCodeToCloudContainerizationWorkflowName());
            break;
        default:
            throw new Error(`Unknown server type: ${serverType}. Supported types: javaMigration, codetocloud`);
    }
}
catch (error) {
    process.stderr.write(`Failed to start ${serverType} server: ${error}\n`);
    process.exit(1);
}
//# sourceMappingURL=index.js.map