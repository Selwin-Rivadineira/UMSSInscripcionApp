import { Settings } from './settings';
export interface MCPLogger {
    info(message: string, ...args: any[]): void;
    warn(message: string, ...args: any[]): void;
    error(message: string, ...args: any[]): void;
    debug(message: string, ...args: any[]): void;
    trace(message: string, ...args: any[]): void;
    telemetry(eventName: string, properties?: Record<string, string>, measurements?: Record<string, number>): void;
}
export declare class MCPLoggerImpl implements MCPLogger {
    private settings;
    private winstonLogger;
    private static customLevels;
    private static customizedFormat;
    constructor(settings: Settings);
    private createWinstonLogger;
    rebuildLogger(): void;
    info(message: string, ...args: any[]): void;
    warn(message: string, ...args: any[]): void;
    error(message: string, ...args: any[]): void;
    debug(message: string, ...args: any[]): void;
    trace(message: string, ...args: any[]): void;
    telemetry(eventName: string, properties?: Record<string, string>, measurements?: Record<string, number>): void;
}
//# sourceMappingURL=logger.d.ts.map