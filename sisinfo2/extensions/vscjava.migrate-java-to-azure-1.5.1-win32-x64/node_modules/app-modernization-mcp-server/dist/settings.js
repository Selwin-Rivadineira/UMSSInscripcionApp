"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Settings = void 0;
const console_1 = require("console");
const fs = __importStar(require("fs"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const utils_1 = require("./utils");
class Settings {
    constructor(basePath = __dirname) {
        this.packageJson = (0, utils_1.detectPackageJson)(basePath);
        (0, console_1.assert)(this.packageJson, 'package.json not found in the current directory or its parent directories');
    }
    getServerVersion() {
        return this.packageJson.version;
    }
    getServerName() {
        return this.packageJson.name;
    }
    getAiKey() {
        var _a;
        return ((_a = this.packageJson) === null || _a === void 0 ? void 0 : _a.aiKey) || '';
    }
    isTelemetryDisabled() {
        return (0, utils_1.getConfig)('APPMOD_DISABLE_TELEMETRY', true);
    }
    isDebugTelemetry() {
        return (0, utils_1.getConfig)('APPMOD_DEBUG_TELEMETRY', false);
    }
    getCustomKbPath() {
        return (0, utils_1.getConfig)('APPMOD_CUSTOM_KB_PATH', path.join(os.homedir(), '.ghcp-appmod', 'custom-kb'));
    }
    getMsftKbPaths() {
        const msftKbPaths = (0, utils_1.getConfig)('APPMOD_MSFT_KB_PATHS', '');
        if (msftKbPaths && msftKbPaths.length > 0) {
            return msftKbPaths
                .split(',')
                .map((p) => p.trim())
                .filter((p) => p);
        }
        return [path.join(__dirname, './rag'), path.join(__dirname, './kb')];
    }
    getLogLevel() {
        return (0, utils_1.getConfig)('APPMOD_LOG_LEVEL', 'info');
    }
    getLogFilePath() {
        const logDir = (0, utils_1.getConfig)('APPMOD_LOG_FILE_PATH', path.join(os.homedir(), '.ghcp-appmod', 'logs'));
        if (!fs.existsSync(logDir)) {
            fs.mkdirSync(logDir, { recursive: true });
        }
        return logDir;
    }
    isModelRemoteDownloadEnabled() {
        return (0, utils_1.getConfig)('APPMOD_ENABLE_MODEL_REMOTE_DOWNLOAD', false);
    }
    getModelPath() {
        return (0, utils_1.getConfig)('APPMOD_MODEL_PATH', path.join(__dirname, '..', './models'));
    }
    getEmbeddingModelName() {
        return (0, utils_1.getConfig)('APPMOD_EMBEDDING_MODEL_NAME', 'sentence-transformers/all-MiniLM-L6-v2');
    }
    getVectorStoreType() {
        return (0, utils_1.getConfig)('APPMOD_VECTOR_STORE_TYPE', 'in-memory');
    }
    getSimilarityThreshold() {
        const modelName = this.getEmbeddingModelName();
        const threshold = (0, utils_1.getConfig)('APPMOD_SIMILARITY_THRESHOLD', modelName === 'sentence-transformers/all-MiniLM-L6-v2' ? 0.4 : 0.5);
        if (isNaN(threshold) || threshold < 0 || threshold > 1) {
            throw new Error(`Invalid SIMILARITY_THRESHOLD: ${threshold}. Must be a number between 0 and 1.`);
        }
        return threshold;
    }
    isRerankingEnabled() {
        return (0, utils_1.getConfig)('APPMOD_RERANKING_ENABLED', true);
    }
    getRerankingThreshold() {
        const threshold = (0, utils_1.getConfig)('APPMOD_RERANKING_THRESHOLD', 0.7);
        if (isNaN(threshold) || threshold < 0 || threshold > 1) {
            throw new Error(`Invalid RERANKING_THRESHOLD: ${threshold}. Must be a number between 0 and 1.`);
        }
        return threshold;
    }
    getRerankingModelName() {
        return (0, utils_1.getConfig)('APPMOD_RERANKING_MODEL_NAME', 'cross-encoder/ms-marco-MiniLM-L6-v2');
    }
    getCallerMachineId() {
        return (0, utils_1.getConfig)('APPMOD_CALLER_MACHINE_ID', '');
    }
    getCallerSessionId() {
        return (0, utils_1.getConfig)('APPMOD_CALLER_SESSION_ID', '');
    }
    getCallerId() {
        return (0, utils_1.getConfig)('APPMOD_CALLER_ID', '');
    }
    getCallerType() {
        return (0, utils_1.getConfig)('APPMOD_CALLER_TYPE', '');
    }
    isRunningInIntelliJ() {
        const callerType = this.getCallerType();
        return callerType === 'intellij-plugin';
    }
    getCallerVersion() {
        return (0, utils_1.getConfig)('APPMOD_CALLER_VERSION', '');
    }
    getServerType() {
        var _a;
        return ((_a = (0, utils_1.parseArg)('--serverType')) !== null && _a !== void 0 ? _a : 'javaMigration');
    }
    getServeFrom() {
        return (0, utils_1.getConfig)('APPMOD_SERVE_FROM', 'mcp-server');
    }
    getMsbenchRepoName() {
        return (0, utils_1.getConfig)('MSBENCH_REPO_NAME', '');
    }
    getMsbenchRunId() {
        return (0, utils_1.getConfig)('MSBENCH_RUN_ID', '');
    }
}
exports.Settings = Settings;
//# sourceMappingURL=settings.js.map