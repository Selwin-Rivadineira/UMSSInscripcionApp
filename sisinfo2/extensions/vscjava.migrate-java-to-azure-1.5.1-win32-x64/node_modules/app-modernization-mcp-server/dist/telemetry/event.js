"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JavaTelemetryEventEmitter = exports.DummyMcpEventEmitter = void 0;
const events_1 = __importDefault(require("events"));
const tsyringe_1 = require("tsyringe");
const metadata_1 = require("../kb/metadata");
const types_1 = require("../types");
const appMetadata_1 = require("./appMetadata");
class DummyMcpEventEmitter {
    on(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _event, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _listener) {
        return this;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    emit(_event, _args) {
        return true;
    }
}
exports.DummyMcpEventEmitter = DummyMcpEventEmitter;
let JavaTelemetryEventEmitter = class JavaTelemetryEventEmitter {
    constructor(telemetryService, logger) {
        this.telemetryService = telemetryService;
        this.logger = logger;
        this.emitter = new events_1.default();
        this.emitter.setMaxListeners(100); // Increase max listeners to avoid warnings in large applications
        this.on('appcat_check_success', async (context, { workspacePathExists, isJavaProject, projectLanguages, appCatVersion }) => {
            await this.telemetryService.sendTelemetryEvent('java/migrateassistant/appcat/check', {
                ...succeeded(),
                workspacePathExists,
                isJavaProject,
                projectLanguages,
                appCatVersion,
            });
        });
        this.on('appcat_check_fail', async (context, { error, workspacePathExists, isJavaProject, projectLanguages, appCatVersion }) => {
            await this.telemetryService.sendTelemetryEvent('java/migrateassistant/appcat/check', {
                workspacePathExists,
                isJavaProject,
                projectLanguages,
                appCatVersion,
                ...failed(error),
            });
        });
        this.on('appcat_scan_success', async (context, { exitCode, duration }) => {
            await this.telemetryService.sendTelemetryEvent('java/migrateassistant/appcat/scan', {
                exitCode,
                ...succeeded(),
            }, {
                duration,
            });
        });
        this.on('appcat_scan_fail', async (context, { error, exitCode, duration }) => {
            await this.telemetryService.sendTelemetryEvent('java/migrateassistant/appcat/scan', {
                exitCode,
                ...failed(error),
            }, {
                duration,
            });
        });
        this.on('appcat_install_success', async (context, { duration }) => {
            await this.telemetryService.sendTelemetryEvent('java/migrateassistant/appcat/install', {
                ...succeeded(),
            }, {
                duration: duration || 0,
            });
        });
        this.on('appcat_install_fail', async (context, { error, duration }) => {
            await this.telemetryService.sendTelemetryEvent('java/migrateassistant/appcat/install', { ...failed(error) }, {
                duration: duration || 0,
            });
        });
        this.on('run_task_success', async (context, { kbId, scenario, workspacePath }) => {
            const appMetadataParser = (0, appMetadata_1.buildAppMetadataParser)(workspacePath);
            const appMetadatas = appMetadataParser.findAppMetadatas();
            for (const appMetadata of appMetadatas) {
                await this.telemetryService.sendTelemetryEvent('java/migrateassistant/task/run', {
                    kbId,
                    scenario,
                    ...succeeded(),
                    ...withApp(appMetadata),
                    ...correlates(context),
                });
            }
        });
        this.on('run_task_fail', async (context, { error, kbId, scenario, workspacePath }) => {
            const appMetadataParser = (0, appMetadata_1.buildAppMetadataParser)(workspacePath);
            const appMetadatas = appMetadataParser.findAppMetadatas();
            for (const appMetadata of appMetadatas) {
                await this.telemetryService.sendTelemetryEvent('java/migrateassistant/task/run', {
                    kbId,
                    scenario,
                    ...failed(error),
                    ...withApp(appMetadata),
                    ...correlates(context),
                });
            }
        });
        this.on('kb_load_success', async (context, { duration, loaded }) => {
            await this.telemetryService.sendTelemetryEvent('java/migrateassistant/kb/load', {
                ...succeeded(),
                ...correlates(context),
            }, {
                loaded,
                duration,
            });
        });
        this.on('kb_load_fail', async (context, { error, duration, loaded }) => {
            await this.telemetryService.sendTelemetryEvent('java/migrateassistant/kb/load', {
                ...failed(error),
                ...correlates(context),
            }, {
                loaded,
                duration,
            });
        });
        this.on('kb_get_success', async (context, { kbId, duration, hit }) => {
            await this.telemetryService.sendTelemetryEvent('java/migrateassistant/kb/get', {
                kbId,
                ...succeeded(),
                ...correlates(context),
            }, {
                hit,
                duration,
            });
        });
        this.on('kb_get_fail', async (context, { error, kbId, duration, hit }) => {
            await this.telemetryService.sendTelemetryEvent('java/migrateassistant/kb/get', {
                kbId,
                ...failed(error),
                ...correlates(context),
            }, {
                hit,
                duration,
            });
        });
        this.on('kb_list_success', async (context, { duration, hit }) => {
            await this.telemetryService.sendTelemetryEvent('java/migrateassistant/kb/list', {
                ...succeeded(),
                ...correlates(context),
            }, {
                hit,
                duration,
            });
        });
        this.on('kb_list_fail', async (context, { error, duration, hit }) => {
            await this.telemetryService.sendTelemetryEvent('java/migrateassistant/kb/list', {
                ...failed(error),
                ...correlates(context),
            }, {
                hit,
                duration,
            });
        });
        this.on('kb_search_success', async (context, { query, duration, perfMeter }) => {
            await this.telemetryService.sendTelemetryEvent('java/migrateassistant/kb/search', {
                ...succeeded(),
                ...correlates(context),
                query,
            }, {
                duration,
                total: perfMeter.total,
                hit: perfMeter.hit,
                reranked: perfMeter.reranked,
                mean: perfMeter.mean,
                median: perfMeter.median,
                stddev: perfMeter.stddev,
                min: perfMeter.min,
                max: perfMeter.max,
            });
        });
        this.on('kb_search_fail', async (context, { error, query, duration, perfMeter }) => {
            await this.telemetryService.sendTelemetryEvent('java/migrateassistant/kb/search', {
                ...failed(error),
                ...correlates(context),
                query,
            }, {
                duration,
                total: perfMeter.total,
                hit: perfMeter.hit,
                reranked: perfMeter.reranked,
                mean: perfMeter.mean,
                median: perfMeter.median,
                stddev: perfMeter.stddev,
                min: perfMeter.min,
                max: perfMeter.max,
            });
        });
        this.on('kb_apply_success', async (context, { kb, workspacePath }) => {
            const appMetadataParser = (0, appMetadata_1.buildAppMetadataParser)(workspacePath);
            const metadatas = appMetadataParser.findAppMetadatas();
            for (const metadata of metadatas) {
                this.telemetryService.sendTelemetryEvent('java/migrateassistant/formula/apply', {
                    ...succeeded(),
                    ...withFormula(kb),
                    ...withApp(metadata),
                    ...correlates(context),
                });
            }
        });
        this.on('kb_apply_fail', async (context, { error, kb, workspacePath }) => {
            const appMetadataParser = (0, appMetadata_1.buildAppMetadataParser)(workspacePath);
            const metadatas = appMetadataParser.findAppMetadatas();
            for (const metadata of metadatas) {
                await this.telemetryService.sendTelemetryEvent('java/migrateassistant/formula/apply', {
                    ...failed(error),
                    ...withFormula(kb),
                    ...withApp(metadata),
                    ...correlates(context),
                });
            }
        });
        this.on('file_search_success', async (context, { query, includePattern, hit, duration }) => {
            await this.telemetryService.sendTelemetryEvent('java/migrateassistant/file/search', {
                query,
                includePattern,
                ...succeeded(),
                ...correlates(context),
            }, {
                hit,
                duration,
            });
        });
        this.on('file_search_fail', async (context, { query, includePattern, error, duration }) => {
            await this.telemetryService.sendTelemetryEvent('java/migrateassistant/file/search', {
                query,
                includePattern,
                ...failed(error),
                ...correlates(context),
            }, {
                hit: 0,
                duration,
            });
        });
        this.on('kb_applied_success', async (context, { kb, workspacePath }) => {
            const appMetadataParser = (0, appMetadata_1.buildAppMetadataParser)(workspacePath);
            const metadatas = appMetadataParser.findAppMetadatas();
            for (const metadata of metadatas) {
                await this.telemetryService.sendTelemetryEvent('java/migrateassistant/kb/applied', {
                    ...succeeded(),
                    ...withKb(kb),
                    ...withApp(metadata),
                    ...correlates(context),
                });
            }
        });
        this.on('kb_applied_fail', async (context, { error, kb, workspacePath }) => {
            const appMetadataParser = (0, appMetadata_1.buildAppMetadataParser)(workspacePath);
            const metadatas = appMetadataParser.findAppMetadatas();
            for (const metadata of metadatas) {
                await this.telemetryService.sendTelemetryEvent('java/migrateassistant/kb/applied', {
                    ...failed(error),
                    ...withKb(kb),
                    ...withApp(metadata),
                    ...correlates(context),
                });
            }
        });
        this.on('tool_invoke_success', async (context, { invokedToolId, duration }) => {
            await this.telemetryService.sendTelemetryEvent('java/migrateassistant/tool/invoke', {
                ...correlates(context),
                ...succeeded(),
                invokedToolId,
            }, {
                duration,
            });
        });
        this.on('tool_invoke_fail', async (context, { error, invokedToolId, duration }) => {
            await this.telemetryService.sendTelemetryEvent('java/migrateassistant/tool/invoke', {
                ...correlates(context),
                ...failed(error),
                invokedToolId,
            }, {
                duration,
            });
        });
        this.on('build_fix_info', async (context, { jdkConfigured, buildToolType, buildToolConfigured, isWrapper, message, workspacePath, }) => {
            const appMetadataParser = (0, appMetadata_1.buildAppMetadataParser)(workspacePath);
            const appMetadatas = appMetadataParser.findAppMetadatas();
            for (const appMetadata of appMetadatas) {
                await this.telemetryService.sendTelemetryEvent('java/migrateassistant/buildFix/output', Object.assign({
                    result: 'info',
                    message,
                    jdkConfigured,
                    buildToolType,
                    buildToolConfigured,
                    isWrapper,
                }, withApp(appMetadata), correlates(context)));
            }
        });
        this.on('build_fix_result', async (context, { result, message, workspacePath }) => {
            const appMetadataParser = (0, appMetadata_1.buildAppMetadataParser)(workspacePath);
            const appMetadatas = appMetadataParser.findAppMetadatas();
            for (const appMetadata of appMetadatas) {
                await this.telemetryService.sendTelemetryEvent('java/migrateassistant/buildFix/output', {
                    result,
                    message,
                    ...withApp(appMetadata),
                    ...correlates(context),
                });
            }
        });
        this.on('build_success', async (context, { workspacePath }) => {
            const appMetadataParser = (0, appMetadata_1.buildAppMetadataParser)(workspacePath);
            const appMetadatas = appMetadataParser.findAppMetadatas();
            for (const appMetadata of appMetadatas) {
                await this.telemetryService.sendTelemetryEvent('java/migrateassistant/buildFix/build', {
                    ...succeeded(),
                    ...withApp(appMetadata),
                    ...correlates(context),
                });
            }
        });
        this.on('build_fail', async (context, { error, moduleBuildStatuses, workspacePath }) => {
            const appMetadataParser = (0, appMetadata_1.buildAppMetadataParser)(workspacePath);
            if (moduleBuildStatuses && moduleBuildStatuses.size > 0) {
                for (const modulePath of Object.keys(moduleBuildStatuses)) {
                    const appMetadata = appMetadataParser.findAppMetadata(modulePath) || {};
                    const success = moduleBuildStatuses === null || moduleBuildStatuses === void 0 ? void 0 : moduleBuildStatuses.get(modulePath);
                    if (success) {
                        await this.telemetryService.sendTelemetryEvent('java/migrateassistant/buildFix/build', {
                            ...succeeded(),
                            ...withApp(appMetadata),
                            ...correlates(context),
                        });
                    }
                    else {
                        await this.telemetryService.sendTelemetryEvent('java/migrateassistant/buildFix/build', {
                            ...failed(error),
                            ...withApp(appMetadata),
                            ...correlates(context),
                        });
                    }
                }
            }
            else {
                const appMetadatas = appMetadataParser.findAppMetadatas();
                for (const appMetadata of appMetadatas) {
                    await this.telemetryService.sendTelemetryEvent('java/migrateassistant/buildFix/build', {
                        ...failed(error),
                        ...withApp(appMetadata),
                        ...correlates(context),
                    });
                }
            }
        });
        this.on('test_fix_result', async (context, { result, message, workspacePath }) => {
            const appMetadataParser = (0, appMetadata_1.buildAppMetadataParser)(workspacePath);
            const appMetadatas = appMetadataParser.findAppMetadatas();
            for (const appMetadata of appMetadatas) {
                await this.telemetryService.sendTelemetryEvent('java/migrateassistant/testFix/output', {
                    result,
                    message,
                    ...withApp(appMetadata),
                    ...correlates(context),
                });
            }
        });
        this.on('test_success', async (context, { numberOfTestErrors, workspacePath }) => {
            const appMetadataParser = (0, appMetadata_1.buildAppMetadataParser)(workspacePath);
            const appMetadatas = appMetadataParser.findAppMetadatas();
            for (const appMetadata of appMetadatas) {
                await this.telemetryService.sendTelemetryEvent('java/migrateassistant/testFix/test', {
                    ...succeeded(),
                    ...withApp(appMetadata),
                    ...correlates(context),
                }, {
                    numberOfTestErrors,
                });
            }
        });
        this.on('test_fail', async (context, { error, numberOfTestErrors, workspacePath }) => {
            const appMetadataParser = (0, appMetadata_1.buildAppMetadataParser)(workspacePath);
            const appMetadatas = appMetadataParser.findAppMetadatas();
            for (const appMetadata of appMetadatas) {
                await this.telemetryService.sendTelemetryEvent('java/migrateassistant/testFix/test', {
                    ...failed(error),
                    ...withApp(appMetadata),
                    ...correlates(context),
                }, {
                    numberOfTestErrors,
                });
            }
        });
        this.on('cve_fix_result', async (context, { result, message, workspacePath }) => {
            const appMetadataParser = (0, appMetadata_1.buildAppMetadataParser)(workspacePath);
            const appMetadatas = appMetadataParser.findAppMetadatas();
            for (const appMetadata of appMetadatas) {
                await this.telemetryService.sendTelemetryEvent('java/migrateassistant/cveFix/output', {
                    result,
                    message,
                    ...withApp(appMetadata),
                    ...correlates(context),
                });
            }
        });
        this.on('consistency_check_result', async (context, { result, message, workspacePath }) => {
            const appMetadataParser = (0, appMetadata_1.buildAppMetadataParser)(workspacePath);
            const appMetadatas = appMetadataParser.findAppMetadatas();
            for (const appMetadata of appMetadatas) {
                await this.telemetryService.sendTelemetryEvent('java/migrateassistant/consistency/output', {
                    result,
                    message,
                    ...withApp(appMetadata),
                    ...correlates(context),
                });
            }
        });
        this.on('completeness_check_result', async (context, { result, message, workspacePath }) => {
            const appMetadataParser = (0, appMetadata_1.buildAppMetadataParser)(workspacePath);
            const appMetadatas = appMetadataParser.findAppMetadatas();
            for (const appMetadata of appMetadatas) {
                await this.telemetryService.sendTelemetryEvent('java/migrateassistant/completeness/output', {
                    result,
                    message,
                    ...withApp(appMetadata),
                    ...correlates(context),
                });
            }
        });
        this.on('version_control_result', async (context, { versionControlSystem, branchName, commitCount, hasUncommittedChanges, workspacePath, }) => {
            const appMetadataParser = (0, appMetadata_1.buildAppMetadataParser)(workspacePath);
            const appMetadatas = appMetadataParser.findAppMetadatas();
            for (const appMetadata of appMetadatas) {
                await this.telemetryService.sendTelemetryEvent('java/migrateassistant/versioncontrol/output', Object.assign({
                    versionControlSystem,
                    branchName,
                    commitCount,
                    hasUncommittedChanges,
                }, withApp(appMetadata), correlates(context)));
            }
        });
        this.on('version_control_commit', async (context, { versionControlSystem, commitId, workspacePath, isGithubcom }) => {
            const appMetadataParser = (0, appMetadata_1.buildAppMetadataParser)(workspacePath);
            const appMetadatas = appMetadataParser.findAppMetadatas();
            for (const appMetadata of appMetadatas) {
                await this.telemetryService.sendTelemetryEvent('java/migrateassistant/versioncontrol/commit', Object.assign({
                    versionControlSystem,
                    commitId,
                    isGithubcom,
                }, withApp(appMetadata), correlates(context)));
            }
        });
        this.on('version_control_fail', async (context, { versionControlSystem, action, workspacePath, error }) => {
            const appMetadataParser = (0, appMetadata_1.buildAppMetadataParser)(workspacePath);
            const appMetadatas = appMetadataParser.findAppMetadatas();
            for (const appMetadata of appMetadatas) {
                await this.telemetryService.sendTelemetryEvent('java/migrateassistant/versioncontrol/fail', Object.assign({
                    versionControlSystem,
                    action,
                    error,
                }, withApp(appMetadata), correlates(context)));
            }
        });
    }
    on(event, listener) {
        this.emitter.on(event, listener);
        return this;
    }
    emit(event, args, context) {
        return this.emitter.emit(event, context, args);
    }
};
exports.JavaTelemetryEventEmitter = JavaTelemetryEventEmitter;
exports.JavaTelemetryEventEmitter = JavaTelemetryEventEmitter = __decorate([
    (0, tsyringe_1.injectable)(),
    __param(0, (0, tsyringe_1.inject)(types_1.Beans.TelemetryService)),
    __param(1, (0, tsyringe_1.inject)(types_1.Beans.Logger)),
    __metadata("design:paramtypes", [Object, Object])
], JavaTelemetryEventEmitter);
function succeeded() {
    return {
        result: 'success',
    };
}
function failed(error) {
    return {
        result: 'fail',
        error: error === null || error === void 0 ? void 0 : error.message,
        stack: (error === null || error === void 0 ? void 0 : error.stack) || '',
    };
}
function correlates(context) {
    return {
        correlationId: (context === null || context === void 0 ? void 0 : context.correlationId) || '',
        requestId: (context === null || context === void 0 ? void 0 : context.requestId) || '',
    };
}
function withFormula(kb) {
    return {
        id: (kb === null || kb === void 0 ? void 0 : kb.id) || '',
        formula: (kb === null || kb === void 0 ? void 0 : kb.title) || '',
        formulaGroup: metadata_1.MetadataGetter.getGroup(kb) || '',
        isMicrosoft: metadata_1.MetadataGetter.isMicrosoft(kb) ? 'true' : 'false',
    };
}
function withKb(kb) {
    return {
        id: (kb === null || kb === void 0 ? void 0 : kb.id) || '',
        title: (kb === null || kb === void 0 ? void 0 : kb.title) || '',
        group: metadata_1.MetadataGetter.getGroup(kb) || '',
        isMicrosoft: metadata_1.MetadataGetter.isMicrosoft(kb) ? 'true' : 'false',
    };
}
function withApp(app) {
    return {
        hashedAppId: (app === null || app === void 0 ? void 0 : app.hashedAppId) || '',
        hashedProjectId: (app === null || app === void 0 ? void 0 : app.hashedProjectId) || '',
        packagingType: (app === null || app === void 0 ? void 0 : app.packagingType) || '',
        javaVersion: (app === null || app === void 0 ? void 0 : app.javaVersion) || '',
        springBootVersion: (app === null || app === void 0 ? void 0 : app.springBootVersion) || '',
        buildTool: (app === null || app === void 0 ? void 0 : app.buildTool) || '',
    };
}
//# sourceMappingURL=event.js.map