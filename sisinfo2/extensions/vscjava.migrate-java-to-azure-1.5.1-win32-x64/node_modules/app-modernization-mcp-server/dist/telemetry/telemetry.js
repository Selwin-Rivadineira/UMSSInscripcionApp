"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationInsightsTelemetryReporter = exports.LoggerTelemetryReporter = exports.TelemetryService = void 0;
const appInsights = __importStar(require("applicationinsights"));
const assert_1 = __importDefault(require("assert"));
const tsyringe_1 = require("tsyringe");
const settings_1 = require("../settings");
const types_1 = require("../types");
const utils_1 = require("../utils");
class TelemetryService {
    constructor(telemetryReporters, staticProperties) {
        this.telemetryReporters = telemetryReporters;
        this.staticProperties = staticProperties;
    }
    async sendTelemetryEvent(eventName, properties, measurements) {
        const resolvedStaticProperties = {};
        if (this.staticProperties) {
            for (const [key, value] of Object.entries(this.staticProperties)) {
                resolvedStaticProperties[key] = await Promise.resolve(value);
            }
        }
        const finalProperties = { ...properties, ...resolvedStaticProperties };
        this.telemetryReporters.forEach((reporter) => reporter.sendTelemetryEvent(eventName, finalProperties, measurements));
    }
}
exports.TelemetryService = TelemetryService;
// this is a simple telemetry reporter that logs events to file for debugging purpose.
let LoggerTelemetryReporter = class LoggerTelemetryReporter {
    constructor(logger) {
        this.logger = logger;
    }
    sendTelemetryEvent(eventName, properties, measurements) {
        this.logger.telemetry(eventName, properties, measurements);
    }
};
exports.LoggerTelemetryReporter = LoggerTelemetryReporter;
exports.LoggerTelemetryReporter = LoggerTelemetryReporter = __decorate([
    (0, tsyringe_1.injectable)(),
    __param(0, (0, tsyringe_1.inject)(types_1.Beans.Logger)),
    __metadata("design:paramtypes", [Object])
], LoggerTelemetryReporter);
let ApplicationInsightsTelemetryReporter = class ApplicationInsightsTelemetryReporter {
    constructor(settings, logger) {
        this.settings = settings;
        this.logger = logger;
        if (this.settings.isTelemetryDisabled()) {
            this.logger.info('Telemetry is disabled. Will not send telemetry events.');
            return;
        }
        appInsights.setup(`INSTRUMENTATIONKEY=${settings.getAiKey()}`).start();
        (0, assert_1.default)(appInsights.defaultClient, 'Application Insights client is not initialized');
        this.client = appInsights.defaultClient;
        this.client.addTelemetryProcessor((envelope) => {
            var _a, _b;
            if ((envelope === null || envelope === void 0 ? void 0 : envelope.tags) && ((_b = (_a = envelope === null || envelope === void 0 ? void 0 : envelope.data) === null || _a === void 0 ? void 0 : _a.baseData) === null || _b === void 0 ? void 0 : _b.properties)) {
                if (envelope.data.baseData.properties.operationName) {
                    envelope.tags[this.client.context.keys.operationName] =
                        envelope.data.baseData.properties.operationName;
                    delete envelope.data.baseData.properties.operationName;
                }
                if (envelope.data.baseData.properties.correlationId) {
                    envelope.tags[this.client.context.keys.operationParentId] =
                        envelope.data.baseData.properties.correlationId;
                }
                if (envelope.data.baseData.properties.requestId) {
                    envelope.tags[this.client.context.keys.operationId] =
                        envelope.data.baseData.properties.requestId;
                }
                if (envelope.data.baseData.properties.sessionId) {
                    envelope.tags[this.client.context.keys.sessionId] =
                        envelope.data.baseData.properties.sessionId;
                }
                if (envelope.data.baseData.properties.deviceId) {
                    envelope.tags[this.client.context.keys.deviceId] =
                        envelope.data.baseData.properties.deviceId;
                }
            }
            return true;
        });
    }
    sendTelemetryEvent(eventName, properties, measurements) {
        if (this.settings.isTelemetryDisabled()) {
            return;
        }
        this.client.trackTrace({
            message: JSON.stringify({ internal: (0, utils_1.isInternal)().toString() }),
            properties: {
                ...(properties || {}),
                ...(measurements || {}),
                operationName: eventName,
            },
        });
    }
};
exports.ApplicationInsightsTelemetryReporter = ApplicationInsightsTelemetryReporter;
exports.ApplicationInsightsTelemetryReporter = ApplicationInsightsTelemetryReporter = __decorate([
    (0, tsyringe_1.injectable)(),
    __param(0, (0, tsyringe_1.inject)(types_1.Beans.Settings)),
    __param(1, (0, tsyringe_1.inject)(types_1.Beans.Logger)),
    __metadata("design:paramtypes", [settings_1.Settings, Object])
], ApplicationInsightsTelemetryReporter);
//# sourceMappingURL=telemetry.js.map