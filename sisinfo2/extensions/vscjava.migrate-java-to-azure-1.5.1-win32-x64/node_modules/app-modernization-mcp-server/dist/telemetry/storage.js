"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDeviceId = getDeviceId;
exports.setDeviceId = setDeviceId;
const fs_1 = require("fs");
const path = __importStar(require("path"));
// Only import winreg on Windows
let WinReg;
if (process.platform === 'win32') {
    // eslint-disable-next-line @typescript-eslint/no-require-imports
    WinReg = require('winreg');
}
const deviceIdFileName = 'deviceid';
const registryKeyPath = '\\Software\\Microsoft\\DeveloperTools';
const registryValueName = 'deviceid';
function getDirectory() {
    var _a;
    if (!process.env.HOME && process.platform !== 'win32') {
        throw new Error('Home directory not found');
    }
    let folder;
    if (process.platform === 'darwin') {
        folder = path.join(process.env.HOME, 'Library', 'Application Support');
    }
    else if (process.platform === 'linux') {
        folder = (_a = process.env.XDG_CACHE_HOME) !== null && _a !== void 0 ? _a : path.join(process.env.HOME, '.cache');
    }
    else {
        throw new Error('Unsupported platform');
    }
    return path.join(folder, 'Microsoft', 'DeveloperTools');
}
function getDeviceIdFilePath() {
    return path.join(getDirectory(), deviceIdFileName);
}
async function exists(filePath) {
    try {
        await fs_1.promises.access(filePath);
        return true;
    }
    catch (_a) {
        return false;
    }
}
// Windows Registry-based get/set
async function getDeviceIdFromRegistry() {
    const regKey = new WinReg({
        hive: WinReg.HKCU,
        key: registryKeyPath,
    });
    return new Promise((resolve) => {
        regKey.get(registryValueName, (err, item) => {
            if (err || !item) {
                resolve(undefined);
            }
            else {
                resolve(item.value);
            }
        });
    });
}
async function setDeviceIdInRegistry(deviceId) {
    const regKey = new WinReg({
        hive: WinReg.HKCU,
        key: registryKeyPath,
    });
    return new Promise((resolve, reject) => {
        regKey.set(registryValueName, WinReg.REG_SZ, deviceId, (err) => {
            if (err)
                reject(err);
            else
                resolve();
        });
    });
}
// Native mkdirp (recursive directory creation)
async function ensureDir(dir) {
    await fs_1.promises.mkdir(dir, { recursive: true });
}
// Unified API
async function getDeviceId() {
    if (process.platform === 'win32') {
        return getDeviceIdFromRegistry();
    }
    else {
        const filePath = getDeviceIdFilePath();
        if (!(await exists(filePath))) {
            return undefined;
        }
        return fs_1.promises.readFile(filePath, 'utf8');
    }
}
async function setDeviceId(deviceId) {
    if (process.platform === 'win32') {
        await setDeviceIdInRegistry(deviceId);
    }
    else {
        await ensureDir(getDirectory());
        await fs_1.promises.writeFile(getDeviceIdFilePath(), deviceId, 'utf8');
    }
}
//# sourceMappingURL=storage.js.map