"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrationSummarySchema = exports.migrationStatusSchema = exports.completenessCheckResultSchema = exports.versionControlSummarySchema = exports.consistencyCheckResultSchema = exports.reportStatusSchema = void 0;
const zod_1 = require("zod");
const types_1 = require("../../types");
exports.reportStatusSchema = zod_1.z.object({
    status: zod_1.z
        .enum(['success', 'fail', 'unknown'])
        .describe('The status of the report generation If it is not taken, it will be set to unknown.'),
    error: zod_1.z
        .string()
        .optional()
        .describe('An optional error message if the report generation failed.'),
});
exports.consistencyCheckResultSchema = zod_1.z.object({
    critical: zod_1.z
        .number()
        .describe('Number of critical inconsistencies remaining after all fix attempts.'),
    major: zod_1.z.number().describe('Number of major inconsistencies remaining after all fix attempts.'),
    minor: zod_1.z.number().describe('Number of minor inconsistencies remaining after all fix attempts.'),
});
exports.versionControlSummarySchema = zod_1.z.object({
    versionControlSystem: zod_1.z.string().describe('Version control system of workspace.'),
    branchName: zod_1.z.string().optional().describe('The name of the branch used for migration.'),
    commitCount: zod_1.z.number().describe('Number of commits made during the migration process.'),
    hasUncommittedChanges: zod_1.z
        .boolean()
        .describe('Whether there are uncommitted changes in the workspace.'),
});
exports.completenessCheckResultSchema = zod_1.z.object({
    issuesFound: zod_1.z
        .number()
        .describe('Number of completeness issues remaining after all fix attempts.'),
});
exports.migrationStatusSchema = zod_1.z.object({
    buildFixStatus: exports.reportStatusSchema.describe('The status of the build fix operation, report only if the build fix tool is used, otherwise it will be set to unknown.'),
    testFixStatus: exports.reportStatusSchema.describe('The status of the test fix operation, report only if the test fix tool is used, otherwise it will be set to unknown.'),
    cveFixStatus: exports.reportStatusSchema.describe(`The status of the CVE fix operation, report only if the CVE fix tool is used, otherwise it will be set to unknown.`),
    consistencyCheckStatus: zod_1.z
        .object({
        ...exports.reportStatusSchema.shape,
        result: exports.consistencyCheckResultSchema.optional(),
    })
        .describe('The status of the consistency fix operation, report only if the consistency validation tool is used, otherwise it will be set to unknown.'),
    completenessCheckStatus: zod_1.z
        .object({
        ...exports.reportStatusSchema.shape,
        result: exports.completenessCheckResultSchema.optional(),
    })
        .describe('The status of the completeness fix operation, report only if the completeness validation tool is used, otherwise it will be set to unknown.'),
});
exports.migrationSummarySchema = types_1.ContextAware.extend({
    kbIds: zod_1.z.array(zod_1.z
        .string()
        .describe('The knowledge base ids which were used in code modifications. This is used to generate the migration summary.')),
    workspacePath: zod_1.z
        .string()
        .describe('The path to the workspace where the migration summary will be generated.'),
    status: exports.migrationStatusSchema.describe('The migration status of the build, test, fix operations'),
    versionControlSummary: exports.versionControlSummarySchema.describe('Summary of version control activities during the migration process.'),
});
//# sourceMappingURL=MigrationSummaryRequest.js.map