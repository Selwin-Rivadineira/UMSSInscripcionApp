"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.javaBuildToolSchema = exports.getDefaultMavenInstallPath = exports.getDefaultJDKInstallPath = void 0;
const os = __importStar(require("os"));
const path_1 = __importDefault(require("path"));
const zod_1 = require("zod");
const ToolNames_1 = require("../../tools/ToolNames");
const types_1 = require("../../types");
const getDefaultJDKInstallPath = () => {
    return path_1.default.join(os.homedir(), '.jdk');
};
exports.getDefaultJDKInstallPath = getDefaultJDKInstallPath;
const getDefaultMavenInstallPath = () => {
    return path_1.default.join(os.homedir(), '.maven');
};
exports.getDefaultMavenInstallPath = getDefaultMavenInstallPath;
const supportListJdk = process.env.APPMOD_SUPPORT_LIST_JDKS === 'true' || process.env.NODE_ENV === 'test';
exports.javaBuildToolSchema = supportListJdk
    ? types_1.ContextAware.extend({
        workspacePath: zod_1.z.string().describe('The workspace path for source code to be migrated'),
        javaHome: zod_1.z
            .string()
            .describe(`The absolute path of the appropriate JDK installation  that can be found in the migration plan..\n` +
            `You must set this parameter when a new JDK is installed during migration by tool #${ToolNames_1.UpgradeToolNames.InstallJdkTool}. It is JDK install path without bin\n`)
            .optional(),
        mavenHome: zod_1.z
            .string()
            .describe(`The absolute path of the mvn/mvnw command is located at ff the build type of the project is Maven, t\n` +
            ` - If not using a wrapper, it MUST point to the MAVEN_HOME from the migration plan\n` +
            ` - If the project is using a wrapper, it is the workspace path\n` +
            `You must set this parameter when a new maven is installed during migration by tool #${ToolNames_1.UpgradeToolNames.InstallMavenTool}.  It is maven install path without bin`)
            .optional(),
    })
    : types_1.ContextAware.extend({
        workspacePath: zod_1.z.string().describe('The workspace path for source code to be migrated'),
    });
//# sourceMappingURL=JavaBuildToolRequest.js.map