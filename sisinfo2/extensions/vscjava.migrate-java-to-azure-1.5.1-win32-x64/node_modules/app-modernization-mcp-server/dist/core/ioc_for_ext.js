"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initContainer = initContainer;
/* eslint-disable no-console */
const tsyringe_1 = require("tsyringe");
const formula_to_kb_1 = require("../kb/formula_to_kb");
const loaders_1 = require("../kb/loaders");
const markdown_to_kb_1 = require("../kb/markdown_to_kb");
const metadata_1 = require("../kb/metadata");
const store_1 = require("../kb/store");
const settings_1 = require("../settings");
const devDeviceId_1 = require("../telemetry/devDeviceId");
const event_1 = require("../telemetry/event");
const machineId_1 = require("../telemetry/machineId");
const telemetry_1 = require("../telemetry/telemetry");
const types_1 = require("../types");
const utils_1 = require("../utils");
function initContainer(options) {
    tsyringe_1.container.register(types_1.Beans.Settings, {
        useFactory: () => {
            var _a;
            const settings = new settings_1.Settings((_a = options === null || options === void 0 ? void 0 : options.basePath) !== null && _a !== void 0 ? _a : __dirname);
            settings.getCustomKbPath = () => { var _a; return (_a = options === null || options === void 0 ? void 0 : options.customKbPath) !== null && _a !== void 0 ? _a : ''; };
            settings.getMsftKbPaths = () => { var _a; return (_a = options === null || options === void 0 ? void 0 : options.msftKbPaths) !== null && _a !== void 0 ? _a : []; };
            settings.getServerType = () => { var _a; return (_a = options === null || options === void 0 ? void 0 : options.serverType) !== null && _a !== void 0 ? _a : ''; };
            settings.getLogLevel = () => { var _a; return (_a = options === null || options === void 0 ? void 0 : options.logLevel) !== null && _a !== void 0 ? _a : 'info'; };
            settings.isDebugTelemetry = () => { var _a; return (_a = options === null || options === void 0 ? void 0 : options.debugTelemetry) !== null && _a !== void 0 ? _a : false; };
            settings.isTelemetryDisabled = () => { var _a; return (_a = options === null || options === void 0 ? void 0 : options.telemetryDisabled) !== null && _a !== void 0 ? _a : false; };
            settings.getCallerId = () => { var _a; return (_a = options === null || options === void 0 ? void 0 : options.callerId) !== null && _a !== void 0 ? _a : ''; };
            settings.getCallerVersion = () => { var _a; return (_a = options === null || options === void 0 ? void 0 : options.callerVersion) !== null && _a !== void 0 ? _a : ''; };
            settings.getCallerType = () => { var _a; return (_a = options === null || options === void 0 ? void 0 : options.callerType) !== null && _a !== void 0 ? _a : ''; };
            settings.getCallerMachineId = () => { var _a; return (_a = options === null || options === void 0 ? void 0 : options.callerMachineId) !== null && _a !== void 0 ? _a : ''; };
            settings.getCallerSessionId = () => { var _a; return (_a = options === null || options === void 0 ? void 0 : options.callerSessionId) !== null && _a !== void 0 ? _a : ''; };
            settings.getServeFrom = () => { var _a; return (_a = options === null || options === void 0 ? void 0 : options.serveFrom) !== null && _a !== void 0 ? _a : ''; };
            return settings;
        },
    });
}
tsyringe_1.container.register(types_1.Beans.Logger, {
    useFactory: () => {
        return {
            info: (message, ...args) => console.log(message, ...args),
            warn: (message, ...args) => console.warn(message, ...args),
            error: (message, ...args) => console.error(message, ...args),
            debug: (message, ...args) => console.debug(message, ...args),
            trace: (message, ...args) => console.trace(message, ...args),
            telemetry: (message, ...args) => console.log(message, ...args),
        };
    },
});
tsyringe_1.container.register(types_1.Beans.TelemetryReporter, {
    useFactory: (c) => {
        const settings = c.resolve(types_1.Beans.Settings);
        const logger = c.resolve(types_1.Beans.Logger);
        if (settings.isDebugTelemetry()) {
            logger.debug('Debug telemetry is enabled. Using LoggerTelemetryReporter.');
            return new telemetry_1.LoggerTelemetryReporter(logger);
        }
        return new telemetry_1.ApplicationInsightsTelemetryReporter(settings, logger);
    },
});
tsyringe_1.container.register(types_1.Beans.TelemetryService, {
    useFactory: (c) => {
        const settings = c.resolve(types_1.Beans.Settings);
        const telemetryReporter = c.resolve(types_1.Beans.TelemetryReporter);
        const telemetryService = new telemetry_1.TelemetryService([telemetryReporter], {
            serverName: settings.getServerName(),
            serverVersion: settings.getServerVersion(),
            internal: (0, utils_1.isInternal)().toString(),
            devDeviceId: (0, devDeviceId_1.getDeviceId)(),
            machineId: (0, machineId_1.getMachineID)(),
            callerId: settings.getCallerId(),
            callerVersion: settings.getCallerVersion(),
            callerType: settings.getCallerType(),
            callerMachineId: settings.getCallerMachineId(),
            callerSessionId: settings.getCallerSessionId(),
            serveFrom: settings.getServeFrom(),
        });
        return telemetryService;
    },
});
tsyringe_1.container.register(types_1.Beans.CustomDocumentLoader, {
    useFactory: (c) => {
        const settings = c.resolve(types_1.Beans.Settings);
        const logger = c.resolve(types_1.Beans.Logger);
        return (0, loaders_1.createLoaderFromPaths)(logger, {
            watch: true,
        }, {
            filePath: settings.getCustomKbPath(),
            metadata: { author: 'custom' },
        });
    },
});
tsyringe_1.container.register(types_1.Beans.MsftDocumentLoader, {
    useFactory: (c) => {
        const settings = c.resolve(types_1.Beans.Settings);
        const logger = c.resolve(types_1.Beans.Logger);
        const msftKbPath = settings.getMsftKbPaths();
        return (0, loaders_1.createLoaderFromPaths)(logger, {
            watch: false,
        }, ...msftKbPath.map((filePath) => ({
            filePath,
            metadata: { author: 'microsoft' },
        })));
    },
});
tsyringe_1.container.register(types_1.Beans.DocumentLoader, {
    useFactory: (c) => {
        return loaders_1.CompositeLoader.from(c.resolve(types_1.Beans.CustomDocumentLoader), c.resolve(types_1.Beans.MsftDocumentLoader));
    },
});
tsyringe_1.container.register(types_1.Beans.KBStore, store_1.KBStore, { lifecycle: tsyringe_1.Lifecycle.Singleton });
tsyringe_1.container.register(types_1.Beans.KBLoaders, {
    useFactory: (c) => {
        const documentLoader = c.resolve(types_1.Beans.DocumentLoader);
        const settings = c.resolve(types_1.Beans.Settings);
        const logger = c.resolve(types_1.Beans.Logger);
        return [
            new formula_to_kb_1.FormulaToKb(documentLoader, settings, logger),
            new markdown_to_kb_1.MarkdownToKb(documentLoader, logger),
        ];
    },
});
tsyringe_1.container.register(types_1.Beans.KBVectorStore, {
    useFactory: (c) => {
        const settings = c.resolve(types_1.Beans.Settings);
        const embeddingsProvider = c.resolve(types_1.Beans.EmbeddingsProvider);
        const logger = c.resolve(types_1.Beans.Logger);
        logger.info(settings.getVectorStoreType());
        if (settings.getVectorStoreType() === 'in-memory') {
            return new store_1.InMemoryVectorStore(embeddingsProvider, logger, (kb) => metadata_1.MetadataGetter.getSource(kb), // Identifier function
            store_1.formatKbHeader, store_1.formatKbContent);
        }
        else {
            throw new Error(`Unsupported vector store type: ${settings.getVectorStoreType()}`);
        }
    },
});
tsyringe_1.container.register(types_1.Beans.EmbeddingsProvider, {
    useFactory: () => {
        return {
            computeEmbeddings: async () => {
                return [];
            },
        };
    },
});
tsyringe_1.container.register(types_1.Beans.Reranker, {
    useFactory: () => {
        return {
            rerank: async (documents) => {
                return documents;
            },
        };
    },
});
tsyringe_1.container.register(types_1.Beans.McpEventEmitter, {
    useFactory: (c) => {
        const telemetryService = c.resolve(types_1.Beans.TelemetryService);
        const logger = c.resolve(types_1.Beans.Logger);
        return new event_1.JavaTelemetryEventEmitter(telemetryService, logger);
    },
});
//# sourceMappingURL=ioc_for_ext.js.map