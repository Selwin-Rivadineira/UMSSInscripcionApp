"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolRegistry = void 0;
const ToolNames_1 = require("../tools/ToolNames");
const CompletenessValidationToolImpl_1 = require("./implementations/CompletenessValidationToolImpl");
const ConsistencyValidationToolImpl_1 = require("./implementations/ConsistencyValidationToolImpl");
const GetKnowledgeBaseToolImpl_1 = require("./implementations/GetKnowledgeBaseToolImpl");
const InstallAppCatToolImpl_1 = require("./implementations/InstallAppCatToolImpl");
const JavaBuildToolImpl_1 = require("./implementations/JavaBuildToolImpl");
const JavaFixTestToolImpl_1 = require("./implementations/JavaFixTestToolImpl");
const JavaRunTestToolImpl_1 = require("./implementations/JavaRunTestToolImpl");
const MigrationSummaryToolImpl_1 = require("./implementations/MigrationSummaryToolImpl");
const PrecheckAssessmentToolImpl_1 = require("./implementations/PrecheckAssessmentToolImpl");
const RunAssessmentToolImpl_1 = require("./implementations/RunAssessmentToolImpl");
const RunTaskToolImpl_1 = require("./implementations/RunTaskToolImpl");
const SearchFileToolImpl_1 = require("./implementations/SearchFileToolImpl");
const SearchKnowledgeBaseToolImpl_1 = require("./implementations/SearchKnowledgeBaseToolImpl");
const VersionControlToolImpl_1 = require("./implementations/VersionControlToolImpl");
const ToolFactory_1 = require("./ToolFactory");
/**
 * Registry for all tool implementations
 * This is where we register all available tools
 */
class ToolRegistry {
    /**
     * Initialize and register all tools
     */
    static initialize() {
        if (this.initialized) {
            return;
        }
        // Register Java Build Tool
        ToolFactory_1.ToolFactory.registerTool(ToolNames_1.McpToolNames.JAVA_BUILD, JavaBuildToolImpl_1.JavaBuildToolImpl);
        // Register Java Test Tools
        ToolFactory_1.ToolFactory.registerTool(ToolNames_1.McpToolNames.JAVA_RUN_TEST, JavaRunTestToolImpl_1.JavaRunTestToolImpl);
        ToolFactory_1.ToolFactory.registerTool(ToolNames_1.McpToolNames.JAVA_FIX_TEST, JavaFixTestToolImpl_1.JavaFixTestToolImpl);
        // Register Knowledge Base Tools
        ToolFactory_1.ToolFactory.registerTool(ToolNames_1.McpToolNames.SEARCH_KB, SearchKnowledgeBaseToolImpl_1.SearchKnowledgeBaseToolImpl);
        ToolFactory_1.ToolFactory.registerTool(ToolNames_1.McpToolNames.GET_KB, GetKnowledgeBaseToolImpl_1.GetKnowledgeBaseToolImpl);
        // Register File Search Tool
        ToolFactory_1.ToolFactory.registerTool(ToolNames_1.McpToolNames.SEARCH_FILE, SearchFileToolImpl_1.SearchFileToolImpl);
        // Register Migration Tools
        ToolFactory_1.ToolFactory.registerTool(ToolNames_1.McpToolNames.MIGRATION_SUMMARY, MigrationSummaryToolImpl_1.MigrationSummaryToolImpl);
        ToolFactory_1.ToolFactory.registerTool(ToolNames_1.McpToolNames.RUN_TASK, RunTaskToolImpl_1.RunTaskToolImpl);
        // Register Validation Tools
        ToolFactory_1.ToolFactory.registerTool(ToolNames_1.McpToolNames.CONSISTENCY_VALIDATE, ConsistencyValidationToolImpl_1.ConsistencyValidationToolImpl);
        ToolFactory_1.ToolFactory.registerTool(ToolNames_1.McpToolNames.COMPLETENESS_VALIDATE, CompletenessValidationToolImpl_1.CompletenessValidationToolImpl);
        // Register Assessment Tools
        ToolFactory_1.ToolFactory.registerTool(ToolNames_1.McpToolNames.INSTALL_APPCAT, InstallAppCatToolImpl_1.InstallAppCatToolImpl);
        ToolFactory_1.ToolFactory.registerTool(ToolNames_1.McpToolNames.PRECHECK_ASSESSMENT, PrecheckAssessmentToolImpl_1.PrecheckAssessmentToolImpl);
        ToolFactory_1.ToolFactory.registerTool(ToolNames_1.McpToolNames.RUN_ASSESSMENT, RunAssessmentToolImpl_1.RunAssessmentToolImpl);
        // Register Version Control Tool
        ToolFactory_1.ToolFactory.registerTool(ToolNames_1.McpToolNames.VERSION_CONTROL, VersionControlToolImpl_1.VersionControlToolImpl);
        this.initialized = true;
    }
    /**
     * Get all registered tool names
     */
    static getRegisteredToolNames() {
        this.initialize();
        return ToolFactory_1.ToolFactory.getRegisteredTools();
    }
    /**
     * Check if a tool is registered
     */
    static isToolRegistered(toolName) {
        this.initialize();
        return ToolFactory_1.ToolFactory.isToolRegistered(toolName);
    }
}
exports.ToolRegistry = ToolRegistry;
ToolRegistry.initialized = false;
// Auto-initialize when this module is imported
ToolRegistry.initialize();
//# sourceMappingURL=ToolRegistry.js.map