import { Settings } from '../../settings';
/**
 * Pure utility class for determining appropriate tool names based on runtime environment
 */
export declare class ToolNameHelper {
    /**
     * Gets the appropriate CVE tool name based on the runtime environment
     * - IntelliJ: Uses validate_cves_for_java (UpgradeToolNames.CveValidateTool)
     * - VS Code: Uses appmod-validate-cve (VscodeToolNames.CveFixTool)
     * @param settings The settings instance to check runtime environment
     * @returns CVE tool name to use
     */
    static getCveToolName(settings: Settings): string;
    /**
     * Gets the appropriate terminal tool name based on the runtime environment
     * - Jest/Testing: Uses appmod_run_in_terminal
     * - Production: Uses run_in_terminal
     * @param isJest Whether running in Jest test environment
     * @returns Terminal tool name to use
     */
    static getTerminalToolName(isJest: boolean): string;
    /**
     * Gets the appropriate Java build tool name based on the runtime environment
     * - IntelliJ: Uses build_java_project (UpgradeToolNames.BuildJavaProject)
     * - VS Code: Uses appmod-build-project (McpToolNames.JAVA_BUILD)
     * @param settings The settings instance to check runtime environment
     * @returns Java build tool name to use
     */
    static getBuildJavaProjectToolName(settings: Settings): string;
    /**
     * Gets the appropriate Java test runner tool name based on the runtime environment
     * - IntelliJ: Uses run_tests_for_java (UpgradeToolNames.RunTestsForJava)
     * - VS Code: Uses appmod-run-test (McpToolNames.JAVA_RUN_TEST)
     * @param settings The settings instance to check runtime environment
     * @returns Java test runner tool name to use
     */
    static getRunTestsForJavaToolName(settings: Settings): string;
}
//# sourceMappingURL=ToolNameHelper.d.ts.map