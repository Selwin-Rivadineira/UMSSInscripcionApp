"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VersionControlToolImpl = void 0;
const tsyringe_1 = require("tsyringe");
const ToolNames_1 = require("../../tools/ToolNames");
const types_1 = require("../../types");
const Tool_1 = require("../Tool");
const toolDescription_1 = require("../toolDescription");
const GitVersionControl_1 = require("./versioncontrol/GitVersionControl");
/**
 * A tool to perform version control operations
 * Using GitVersionControl as the default implementation
 */
class VersionControlToolImpl extends Tool_1.BaseTool {
    constructor() {
        super();
        this.name = ToolNames_1.McpToolNames.VERSION_CONTROL;
        this.toolReferenceName = ToolNames_1.McpToolNames.VERSION_CONTROL;
        this.displayName = 'Version Control';
        this.description = toolDescription_1.ToolDescriptions.VERSION_CONTROL;
        // Use Git as the default implementation
        this.versionControl = new GitVersionControl_1.GitVersionControl();
    }
    async execute(request, context) {
        const { workspacePath, action } = request;
        const eventEmitter = tsyringe_1.container.resolve(types_1.Beans.McpEventEmitter);
        const logger = tsyringe_1.container.resolve(types_1.Beans.Logger);
        try {
            // Execute the requested action using the version control implementation
            const result = await this.versionControl.execute(request, context);
            return this.createStructuredResponse(result);
        }
        catch (err) {
            // Handle any errors from the version control implementation
            const error = err instanceof Error ? err : new Error(String(err));
            logger.error(`Version control operation failed: ${error.message}`);
            eventEmitter.emit('version_control_fail', {
                versionControlSystem: 'git',
                error: error.message,
                workspacePath: workspacePath,
                action: action,
            }, context);
            return this.createStructuredResponse({
                success: false,
                output: `Version control operation failed: ${error.message}`,
                versionControlAvailable: true,
                error: error.message,
                message: `Version control operation failed: ${error.message}`,
            });
        }
    }
}
exports.VersionControlToolImpl = VersionControlToolImpl;
//# sourceMappingURL=VersionControlToolImpl.js.map