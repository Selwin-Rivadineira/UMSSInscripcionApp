"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolNameHelper = void 0;
const ToolNames_1 = require("../../tools/ToolNames");
/**
 * Pure utility class for determining appropriate tool names based on runtime environment
 */
class ToolNameHelper {
    /**
     * Gets the appropriate CVE tool name based on the runtime environment
     * - IntelliJ: Uses validate_cves_for_java (UpgradeToolNames.CveValidateTool)
     * - VS Code: Uses appmod-validate-cve (VscodeToolNames.CveFixTool)
     * @param settings The settings instance to check runtime environment
     * @returns CVE tool name to use
     */
    static getCveToolName(settings) {
        return settings.isRunningInIntelliJ()
            ? ToolNames_1.UpgradeToolNames.CveValidateTool
            : ToolNames_1.VscodeToolNames.CveFixTool;
    }
    /**
     * Gets the appropriate terminal tool name based on the runtime environment
     * - Jest/Testing: Uses appmod_run_in_terminal
     * - Production: Uses run_in_terminal
     * @param isJest Whether running in Jest test environment
     * @returns Terminal tool name to use
     */
    static getTerminalToolName(isJest) {
        return isJest ? 'appmod_run_in_terminal' : 'run_in_terminal';
    }
    /**
     * Gets the appropriate Java build tool name based on the runtime environment
     * - IntelliJ: Uses build_java_project (UpgradeToolNames.BuildJavaProject)
     * - VS Code: Uses appmod-build-project (McpToolNames.JAVA_BUILD)
     * @param settings The settings instance to check runtime environment
     * @returns Java build tool name to use
     */
    static getBuildJavaProjectToolName(settings) {
        return settings.isRunningInIntelliJ()
            ? ToolNames_1.UpgradeToolNames.BuildJavaProject
            : ToolNames_1.McpToolNames.JAVA_BUILD;
    }
    /**
     * Gets the appropriate Java test runner tool name based on the runtime environment
     * - IntelliJ: Uses run_tests_for_java (UpgradeToolNames.RunTestsForJava)
     * - VS Code: Uses appmod-run-test (McpToolNames.JAVA_RUN_TEST)
     * @param settings The settings instance to check runtime environment
     * @returns Java test runner tool name to use
     */
    static getRunTestsForJavaToolName(settings) {
        return settings.isRunningInIntelliJ()
            ? ToolNames_1.UpgradeToolNames.RunTestsForJava
            : ToolNames_1.McpToolNames.JAVA_RUN_TEST;
    }
}
exports.ToolNameHelper = ToolNameHelper;
//# sourceMappingURL=ToolNameHelper.js.map