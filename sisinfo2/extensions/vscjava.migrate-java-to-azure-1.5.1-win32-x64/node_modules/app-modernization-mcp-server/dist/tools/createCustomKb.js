"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCustomKbSchema = void 0;
exports.createCustomKb = createCustomKb;
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const tsyringe_1 = require("tsyringe");
const zod_1 = require("zod");
const types_1 = require("../types");
const utils_1 = require("../utils");
exports.createCustomKbSchema = zod_1.z.object({
    workspacePath: zod_1.z
        .string()
        .describe('The path to the workspace where the git repository is located. This should be a valid path on your local machine.')
        .min(1, 'Workspace path cannot be empty'),
    commit: zod_1.z
        .string()
        .describe('The commit hash to get the diff from. This should be a valid commit hash in the git repository.')
        .min(1, 'Commit hash cannot be empty'),
});
async function createCustomKb(request, context) {
    const settings = tsyringe_1.container.resolve(types_1.Beans.Settings);
    const diff = await getCommitMessage(request.workspacePath, request.commit);
    const summary = await summarizeDiff(diff, context);
    const file = `${settings.getCustomKbPath()}/custom-kb-${request.commit}.md`;
    fs_1.default.writeFileSync(file, summary);
    return utils_1.MCPOutput.success(`Custom knowledge base created under ${file} successfully.`);
}
async function getCommitMessage(workspaceBasePath, hash) {
    return await new Promise((resolve, reject) => {
        const command = `git show --unified=0 --ignore-cr-at-eol --ignore-all-space ${hash}`;
        const MaxBuffer = 1024 * 1024 * 1; // 1MB
        const options = { cwd: workspaceBasePath, maxBuffer: MaxBuffer };
        (0, child_process_1.exec)(command, options, (err, stdout) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(stdout);
            }
        });
    });
}
async function summarizeDiff(diff, context) {
    if (!context.sendRequest) {
        throw new Error('No sendRequest function provided in context');
    }
    return await context.sendRequest(`You are an expert in summarizing code diffs. Please provide a concise summary of the changes. 
You should cluster the changes by same purpose, and provide a summary for each cluster:
- What was changed
- Why it was changed
- Any relevant context or implications of the change
- Code examples if necessary
Then, you should generate id, title, description in the front matter on top of markdown, for example:
---
id: A unique identifier for the knowledge base
title: The title of the knowledge base
description: A brief description of the knowledge base
---`, diff);
}
//# sourceMappingURL=createCustomKb.js.map