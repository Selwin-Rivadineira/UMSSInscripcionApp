name: 'Migrate Ehcache Spring configuration to Azure Cache for Redis'
description: "Converts Ehcache Spring configuration to Azure Cache for Redis configuration"
codeLocation:
  type: textsearch
  filePattern: '**/*.java'
  codePattern: >-
    @EnableCaching|CacheManager|EhCacheCacheManager|EhCacheManagerFactoryBean|net.sf.ehcache

steps:
  - description: "Migrate Ehcache Spring configuration to Azure Cache for Redis configuration"
    type: "instruction"
    content: |
      Your task is to migrate a Java Spring configuration file from using Ehcache to Azure Cache for Redis. Follow these detailed instructions to make the transition:

      ## Identifying Ehcache Spring Configuration
      
      Look for Spring configuration classes that:
      
      1. Are annotated with `@Configuration` and `@EnableCaching`
      2. Define beans of type `CacheManager`, `EhCacheCacheManager`, or `EhCacheManagerFactoryBean`
      3. Configure Ehcache either through XML reference or programmatic configuration
      4. Contain references to `net.sf.ehcache` classes
      
      ## Replacement Strategy
      
      Transform your Ehcache configuration using these guidelines:
      
      1. Keep the `@EnableCaching` annotation unchanged
      
      2. Replace Ehcache bean configurations with Redis equivalents:
         - Replace `EhCacheCacheManager` with `RedisCacheManager`
         - Replace `EhCacheManagerFactoryBean` with `LettuceConnectionFactory` configuration
         - Add a `RedisTemplate` bean for direct Redis operations
      
      3. Configure connection to Azure Redis Cache:
         - Add `@Value` annotations for host, port, and password properties
         - Configure Redis connection with SSL enabled (required for Azure)
         - Use port 6380 for Azure Redis Cache
      
      4. Convert Ehcache TTL and eviction settings:
         - Map timeToLiveSeconds to RedisCacheConfiguration's entryTtl method
         - Configure per-cache TTL settings using withInitialCacheConfigurations
      
      ## Implementation Considerations
      
      - Keep the `@EnableCaching` annotation as Spring's cache abstraction remains applicable
      - Use Lettuce as the Redis client (default in Spring Boot Redis starter)
      - Always enable SSL for Azure Redis Cache connections
      - Properly configure serialization for cache keys and values
      - Externalize connection parameters via properties or environment variables
      - Configure proper connection timeouts and pooling for production use
      - Consider adding monitoring for Redis connection health
