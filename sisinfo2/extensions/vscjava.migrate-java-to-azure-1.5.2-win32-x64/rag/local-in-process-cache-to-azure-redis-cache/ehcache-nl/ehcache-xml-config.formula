name: 'Migrate Ehcache XML configuration to Azure Cache for Redis'
description: "Converts Ehcache XML configuration to Azure Cache for Redis application properties"
codeLocation:
  type: textsearch
  filePattern: '**/ehcache.xml'
  codePattern: >-
    <ehcache|<cache|<diskStore|<defaultCache

steps:
  - description: "Migrate Ehcache XML configuration to Azure Cache for Redis application properties"
    type: "instruction"
    content: |
      Your task is to examine an Ehcache XML configuration file and create equivalent Spring application properties for Azure Cache for Redis. Follow these detailed instructions to make the transition:

      ## Identifying Ehcache XML Configuration Elements
      
      Review the ehcache.xml file and identify these key configuration elements:
      
      1. Default cache settings:
         - maxElementsInMemory
         - eternal flag
         - timeToIdleSeconds and timeToLiveSeconds
         - memoryStoreEvictionPolicy (LRU, LFU, FIFO)
      
      2. Named cache entries with specific settings:
         - Cache names
         - Individual TTL and idle time settings
         - Element limits and eviction policies
      
      3. diskStore configuration (not directly applicable to Redis)
      
      ## Replacement Strategy
      
      Create or update application.properties or application.yml with these Redis settings:
      
      1. Redis connection properties:
         - spring.data.redis.host=[YOUR_AZURE_REDIS_HOST]
         - spring.data.redis.port=6380 (Azure Redis uses this port)
         - spring.data.redis.password=[YOUR_ACCESS_KEY]
         - spring.data.redis.ssl.enabled=true (required for Azure Redis)
      
      2. Connection pool settings to approximate element limits:
         - spring.data.redis.lettuce.pool.max-active
         - spring.data.redis.lettuce.pool.max-idle
         - spring.data.redis.lettuce.pool.min-idle
      
      3. Document cache TTL settings (implemented in Java config):
         - Note the TTL values from XML for reference in Java configuration
         - There is no direct properties equivalent for individual cache TTLs
      
      ## Implementation Considerations
      
      - Redis does not support diskStore - consider Redis persistence options
      - TTL settings must be configured programmatically in a RedisCacheManager bean
      - Azure Redis eviction policies are configured in the Azure portal
      - Ehcache's eternal=true can be achieved by not setting an expiration in Redis
      - Not all Ehcache XML features have direct Redis property equivalents
      - Document a plan to remove ehcache.xml once the migration is complete
      
      ## Further Changes Required
      
      This is only the properties portion of migration. You'll need to:
      
      1. Update your Java configuration with a RedisCacheManager bean
      2. Configure per-cache TTL settings in that bean
      3. Set up Redis connection properly in your Spring configuration
      4. Verify cache naming consistency throughout the application
