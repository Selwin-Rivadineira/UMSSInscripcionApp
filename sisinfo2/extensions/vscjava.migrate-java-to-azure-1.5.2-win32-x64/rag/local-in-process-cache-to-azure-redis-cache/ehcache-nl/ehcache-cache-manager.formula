name: 'Migrate Ehcache CacheManager implementations to Azure Cache for Redis'
description: "Converts Ehcache CacheManager code to Redis-compatible cache managers"
codeLocation:
  type: textsearch
  filePattern: '**/*.java'
  codePattern: >-
    CacheManager|EhCacheCacheManager|SimpleCacheManager|ConcurrentMapCacheManager|extends CacheManager

steps:
  - description: "Migrate Ehcache CacheManager implementations to Azure Cache for Redis"
    type: "instruction"
    content: |
      Your task is to migrate Java code that implements or extends Ehcache's CacheManager to use Redis-compatible cache managers instead. Follow these detailed instructions to make the transition:

      ## Identifying Ehcache CacheManager Implementations
      
      Look for these Ehcache CacheManager patterns:
      
      1. Custom classes that extend Ehcache's CacheManager
      2. Spring-specific implementations like EhCacheCacheManager
      3. Classes that directly use or manage Ehcache CacheManager instances
      4. Other Spring cache managers like SimpleCacheManager configured with Ehcache
      
      ## Replacement Strategy
      
      Replace with appropriate Redis cache manager implementations:
      
      1. For custom CacheManager extensions:
         - Replace inheritance from Ehcache's CacheManager with Spring's RedisCacheManager
         - Or implement Spring's CacheManager interface directly
      
      2. For Spring-based applications:
         - Replace EhCacheCacheManager with RedisCacheManager
         - Configure RedisCacheManager with LettuceConnectionFactory
         - Set up appropriate TTL and cache configurations
      
      3. For direct CacheManager usage:
         - Switch to Spring's RedisCacheManager
         - Or use RedisTemplate directly for more control
         
      4. For non-Spring applications:
         - Create a custom Redis cache implementation using RedisTemplate and LettuceConnectionFactory
         - Implement a singleton pattern for connection management
         - Handle serialization/deserialization of objects (using Jackson for JSON serialization)
         - Create your own CacheManager implementation if needed
      
      ## Implementation Considerations
      
      - Create a LettuceConnectionFactory bean first, configuring:
         - Host, port (6380), and password for Azure Redis
         - SSL enabled (required for Azure Redis)
         - Connection pooling settings
         - NOTE: Only create this bean ONCE per project to avoid connection conflicts
      
      - Configure RedisCacheManager with:
         - Default TTL settings that match your Ehcache configuration
         - Per-cache configuration for different TTL requirements
         - Serialization strategy (important for complex objects)
         - NOTE: Only create this bean ONCE per project to avoid cache inconsistencies
      
      - For custom cache behaviors:
         - Consider extending RedisCacheManager
         - Or implement CacheManager interface with Redis operations
      
      - When overriding cache methods:
         - Map CacheManager.getCache() to RedisCacheManager functionality
         - Adapt any custom logic to work with Redis operations
         
      ## Multiple RedisTemplate Configuration
      
      When you need multiple RedisTemplate beans with different generic types:
      
      - Each RedisTemplate must have a unique bean name/identifier
      - Use @Qualifier annotation when autowiring specific templates
      - Example:
      
      ```java
      @Bean
      @Qualifier("stringObjectRedisTemplate")
      public RedisTemplate<String, Object> stringObjectRedisTemplate(RedisConnectionFactory connectionFactory) {
          RedisTemplate<String, Object> template = new RedisTemplate<>();
          template.setConnectionFactory(connectionFactory);
          // Configure serializers
          return template;
      }
      
      @Bean
      @Qualifier("stringUserRedisTemplate") 
      public RedisTemplate<String, User> stringUserRedisTemplate(RedisConnectionFactory connectionFactory) {
          RedisTemplate<String, User> template = new RedisTemplate<>();
          template.setConnectionFactory(connectionFactory);
          // Configure custom serializers for User objects
          return template;
      }
      
      // Usage with @Autowired
      @Autowired
      @Qualifier("stringUserRedisTemplate")
      private RedisTemplate<String, User> userRedisTemplate;
      ```

      Implementation notes:
      1. Replace inheritance from Ehcache's CacheManager with Spring's RedisCacheManager
      2. Use Lettuce as the Redis client via LettuceConnectionFactory
      3. RedisConnectionFactory and RedisCacheManager should ONLY be declared as beans ONCE per application
      4. Configure multiple RedisTemplate instances with different generic types using unique @Qualifier annotations
      5. Always configure SSL (required for Azure Redis Cache) and use port 6380
      6. Convert Ehcache TTL settings to Redis cache TTL via RedisCacheConfiguration's entryTtl method
      7. For different cache regions with varied settings, use the withInitialCacheConfigurations method
      8. Make sure to properly configure serialization for Redis cache entries
      9. If you need custom cache behavior, extend RedisCacheManager or implement CacheManager interface
      
      ## Non-Spring Applications
      
      For applications not using Spring Framework:
      
      1. Direct Redis implementation:
         - Use the Spring Data Redis libraries with Lettuce as the underlying client
         - Implement a singleton pattern to manage the Redis connection and templates
         - Create wrapper classes that mimic your Ehcache interfaces
         
      2. For non-Spring Redis implementation, ensure you:
         - Import required classes like RedisStandaloneConfiguration, LettuceClientConfiguration, and LettuceConnectionFactory
         - Configure SSL with .useSsl() which is required for Azure Redis Cache
         - Call afterPropertiesSet() on both connection factory and template instances
         - Set proper serializers for RedisTemplate when caching objects (StringRedisSerializer for keys, GenericJackson2JsonRedisSerializer for values)
