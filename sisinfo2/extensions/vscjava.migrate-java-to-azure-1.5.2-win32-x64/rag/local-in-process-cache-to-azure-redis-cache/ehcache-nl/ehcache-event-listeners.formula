name: 'Migrate Ehcache event listeners to Azure Cache for Redis'
description: "Converts Ehcache CacheEventListener implementations to Redis-compatible event handling mechanisms"
codeLocation:
  type: textsearch
  filePattern: '**/*.java'
  codePattern: >-
    CacheEventListener|extends CacheEventListener|implements CacheEventListener|CacheEntryEvent|EventType|CacheEntryCreateEvent|CacheEntryUpdatedEvent|CacheEntryRemovedEvent|CacheEntryExpiredEvent|registerCacheEventListener|@CacheEventListener

steps:
  - description: "Migrate Ehcache event listeners to Azure Cache for Redis"
    type: "instruction"
    content: |
      Your task is to migrate Java code that uses Ehcache event listeners to use Redis-compatible event handling mechanisms instead. Follow these detailed instructions to make the transition:

      ## Identifying Ehcache Event Listeners
      
      Look for these Ehcache event listener patterns:
      
      1. Classes implementing the CacheEventListener interface:
         - Implementations of notifyElementRemoved, notifyElementPut, notifyElementUpdated, etc.
         - Classes extending AbstractCacheEventListener
      
      2. Ehcache 3.x annotation-based listeners:
         - Classes with @CacheEventListener annotation
         - Methods with @EventType annotations
      
      3. Listener registration code:
         - registerCacheEventListener calls
         - CacheEventListenerFactory implementations
         - XML configuration referencing listeners
      
      ## Fundamental Difference
      
      Redis uses a different approach to event notification:
      
      - Ehcache: Direct callback interface for cache operations
      - Redis: Keyspace notifications via publish/subscribe mechanism
      
      ## Replacement Strategy
      
      1. Configure Redis Keyspace Notifications:
         - Enable keyspace notifications on the Redis server
         - Add "notify-keyspace-events" setting with appropriate values
      
      2. Implement Redis Event Listeners:
         - For Spring applications: Use RedisMessageListenerContainer
         - Create MessageListener implementations for different event types
         - Subscribe to appropriate Redis pub/sub channels
      
      3. Map Ehcache events to Redis channels:
         - notifyElementPut → __keyevent@*__:set
         - notifyElementUpdated → __keyevent@*__:set
         - notifyElementRemoved → __keyevent@*__:del
         - notifyElementExpired → __keyevent@*__:expired
         - notifyElementEvicted → __keyevent@*__:evicted
      
      4. Configure in application:
         - Enable notifications in application.properties: spring.redis.notify-keyspace-events=KEA
      
      ## Implementation Considerations
      
      - Redis keyspace notifications are not enabled by default and must be explicitly configured
      - Common notification configuration values:
        * K = Keyspace events (events on key names)
        * E = Keyevent events (events published to event names)
        * A = All commands (not just set/expire/del)
        * x = Expired events
        * e = Evicted events
      - Keyspace notifications increase Redis CPU usage; only enable what you need
      - Not all Ehcache events have direct Redis equivalents
      - Redis events don't include the previous value of modified keys
      - There's no direct equivalent to Ehcache's notifyRemoveAll - consider tracking custom events
      - For high-frequency cache operations, consider a dedicated Redis instance for notifications
