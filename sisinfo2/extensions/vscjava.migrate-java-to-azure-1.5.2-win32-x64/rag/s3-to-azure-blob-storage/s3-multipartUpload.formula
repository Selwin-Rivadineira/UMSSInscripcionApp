name: 'Migrate S3client multipartUpload to Azure Blob Storage stageBlock'
description: ""
codeLocation:
  type: textsearch
  filePattern: '**/*.java'
  codePattern: >-
    CompleteMultipartUploadRequest|CompleteMultipartUploadResponse|AbortMultipartUploadRequest|CreateMultipartUploadRequest|CreateMultipartUploadResponse|UploadPartRequest|UploadPartResponse

steps:
  - description: "Migrate s3client with multipartUpload API to Azure Blob Storage stageBlock"
    type: "instruction"
    content: |
      Your task is to migrate a Java file from using the Amazon S3 API to the Azure Storage Blob API while maintaining the same functionality. Below is a reference to the relevant Azure Storage Blob APIs for your convenience. You can tell whether it's an aws or Azure API from the package name.
      Try replace all references to S3 APIs with equivalent Azure Storage Blob APIs, using the provided API descriptions as guidance.
      Ensure the resulting code is clean, efficient, and preserves the original functionality.
      Some of the methods are of the same name under different class, please pay attention to the type before using.
      You should pay special attention that these blob related APIs should use BlockBlobClient to achieve, don't forget to import the package whenever you are adding a new class reference in code edit.
      Below are the APIs provided for your reference:

      Interface: CompleteMultipartUploadRequest.Builder
        Package: software.amazon.awssdk.services.s3.model
        Methods:
          - CompleteMultipartUploadRequest.Builder bucket​(String bucket)
            Description: Name of the bucket to which the multipart upload was initiated.
            Parameters:
              - bucket - Name of the bucket to which the multipart upload was initiated.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - CompleteMultipartUploadRequest.Builder key​(String key)
            Description: Object key for which the multipart upload was initiated.
            Parameters:
              - key - Object key for which the multipart upload was initiated.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - CompleteMultipartUploadRequest.Builder mpuObjectSize​(Long mpuObjectSize)
            Description: The expected total object size of the multipart upload request. If there’s a mismatch between the specified object size value and the actual object size value, it results in an HTTP 400 InvalidRequest error.
            Parameters:
              - mpuObjectSize - The expected total object size of the multipart upload request.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - CompleteMultipartUploadRequest.Builder uploadId​(String uploadId)
            Description: ID for the initiated multipart upload.
            Parameters:
              - uploadId - ID for the initiated multipart upload.
            Returns: Returns a reference to this object so that method calls can be chained together.

      Interface: CompleteMultipartUploadResponse.Builder
        Package: software.amazon.awssdk.services.s3.model
        Methods:
          - CompleteMultipartUploadResponse.Builder bucket​(String bucket)
            Description: The name of the bucket that contains the newly created object. Does not return the access point ARN or access point alias if used.
            Parameters:
              - bucket - The name of the bucket that contains the newly created object. Does not return the access point ARN or access point alias if used.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - CompleteMultipartUploadResponse.Builder key​(String key)
            Description: The object key of the newly created object.
            Parameters:
              - key - The object key of the newly created object.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - CompleteMultipartUploadResponse.Builder expiration​(String expiration)
            Description: If the object expiration is configured, this will contain the expiration date (expiry-date) and rule ID (rule-id). The value of rule-id is URL-encoded.
            Parameters:
              - expiration - If the object expiration is configured, this will contain the expiration date ( expiry-date) and rule ID (rule-id). The value of rule-id is URL-encoded.
            Returns: Returns a reference to this object so that method calls can be chained together.

      Interface: AbortMultipartUploadRequest.Builder
        Package: software.amazon.awssdk.services.s3.model
        Methods:
          - AbortMultipartUploadRequest.Builder bucket​(String bucket)
            Description: The bucket name to which the upload was taking place.
            Parameters:
              - bucket - The bucket name to which the upload was taking place.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - AbortMultipartUploadRequest.Builder key​(String key)
            Description: Key of the object for which the multipart upload was initiated.
            Parameters:
              - key - Key of the object for which the multipart upload was initiated.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - AbortMultipartUploadRequest.Builder uploadId​(String uploadId)
            Description: Upload ID that identifies the multipart upload.
            Parameters:
              - uploadId - Upload ID that identifies the multipart upload.
            Returns: Returns a reference to this object so that method calls can be chained together.

      Interface: CreateMultipartUploadRequest.Builder
        Package: software.amazon.awssdk.services.s3.model
        Methods:
          - CreateMultipartUploadRequest.Builder bucket​(String bucket)
            Description: The name of the bucket where the multipart upload is initiated and where the object is uploaded.
            Parameters:
              - bucket - The name of the bucket where the multipart upload is initiated and where the object is uploaded.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - CreateMultipartUploadRequest.Builder key​(String key)
            Description: Object key for which the multipart upload is to be initiated.
            Parameters:
              - key - Object key for which the multipart upload is to be initiated.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - CreateMultipartUploadRequest.Builder expires​(Instant expires)
            Description: The date and time at which the object is no longer cacheable.
            Parameters:
              - expires - The date and time at which the object is no longer cacheable.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - CreateMultipartUploadRequest.Builder metadata​(Map<String,​String> metadata)
            Description: A map of metadata to store with the object in S3.
            Parameters:
              - metadata - A map of metadata to store with the object in S3.
            Returns: Returns a reference to this object so that method calls can be chained together.

      Interface: CreateMultipartUploadResponse.Builder
        Package: software.amazon.awssdk.services.s3.model
        Methods:
          - CreateMultipartUploadResponse.Builder bucket​(String bucket)
            Description: The name of the bucket to which the multipart upload was initiated. Does not return the access point ARN or access point alias if used.
            Parameters:
              - bucket - The name of the bucket to which the multipart upload was initiated.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - CreateMultipartUploadResponse.Builder key​(String key)
            Description: Object key for which the multipart upload was initiated.
            Parameters:
              - key - Object key for which the multipart upload was initiated.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - CreateMultipartUploadResponse.Builder uploadId​(String uploadId)
            Description: The date and time at which the object is no longer cacheable.
            Parameters:
              - uploadId - ID for the initiated multipart upload.
            Returns: Returns a reference to this object so that method calls can be chained together.

      Interface: UploadPartRequest.Builder
        Package: software.amazon.awssdk.services.s3.model
        Methods:
          - UploadPartRequest.Builder bucket​(String bucket)
            Description: The name of the bucket to which the multipart upload was initiated.
            Parameters:
              - bucket - The name of the bucket to which the multipart upload was initiated.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - UploadPartRequest.Builder contentLength​(Long contentLength)
            Description: Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.
            Parameters:
              - contentLength - Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - UploadPartRequest.Builder key​(String key)
            Description: Object key for which the multipart upload was initiated.
            Parameters:
              - key - Object key for which the multipart upload was initiated.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - UploadPartRequest.Builder partNumber​(Integer partNumber)
            Description: Part number of part being uploaded. This is a positive integer between 1 and 10,000.
            Parameters:
              - partNumber - Part number of part being uploaded. This is a positive integer between 1 and 10,000.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - UploadPartRequest.Builder uploadId​(String uploadId)
            Description: Upload ID identifying the multipart upload whose part is being uploaded.
            Parameters:
              - uploadId - Upload ID identifying the multipart upload whose part is being uploaded.
            Returns: Returns a reference to this object so that method calls can be chained together.

      Interface: UploadPartResponse.Builder
        Package: software.amazon.awssdk.services.s3.model
        Methods:
          - UploadPartResponse.Builder eTag​(String eTag)
            Description: Entity tag for the uploaded object.
            Parameters:
              - eTag - Entity tag for the uploaded object.
            Returns: Returns a reference to this object so that method calls can be chained together.

      Class: BlockBlobClient extends BlobClientBase
        Description: Client to a block blob.
        Package: com.azure.storage.blob.specialized
        Methods:
          - public void stageBlock(String base64BlockId, BinaryData data)
            Description: Uploads the specified block to the block blob's "staging area" to be later committed by a call to commitBlockList.
            Parameters:
              - base64BlockId - A Base64 encoded String that specifies the ID for this block. Note that all block ids for a given blob must be the same length.
              - data - The data to write to the block. Note that this BinaryData must have defined length and must be replayable if retries are enabled
          - public void stageBlock(String base64BlockId, InputStream data, long length)
            Description: Uploads the specified block to the block blob's "staging area" to be later committed by a call to commitBlockList.
            Parameters:
              - base64BlockId - A Base64 encoded String that specifies the ID for this block. Note that all block ids for a given blob must be the same length.
              - data - The data to write to the block. The data must be markable. This is in order to support retries. If the data is not markable, consider using getBlobOutputStream() and writing to the returned OutputStream. Alternatively, consider wrapping your data source in a BufferedInputStream to add mark support.
              - length - The exact length of the data. It is important that this value match precisely the length of the data provided in the InputStream.
          - public Response stageBlockWithResponse(BlockBlobStageBlockOptions options, Duration timeout, Context context)
            Description: Uploads the specified block to the block blob's "staging area" to be later committed by a call to commitBlockList.
            Parameters:
              - options - BlockBlobStageBlockOptions
              - timeout - An optional timeout value beyond which a RuntimeException will be raised.
              - context - Additional context that is passed through the Http pipeline during the service call.
            Returns: A response containing status code and HTTP headers
          - public Response stageBlockWithResponse(String base64BlockId, InputStream data, long length, byte[] contentMd5, String leaseId, Duration timeout, Context context)
            Description: Uploads the specified block to the block blob's "staging area" to be later committed by a call to commitBlockList.
            Parameters:
              - base64BlockId - A Base64 encoded String that specifies the ID for this block. Note that all block ids for a given blob must be the same length.
              - data - The data to write to the block. The data must be markable. This is in order to support retries. If the data is not markable, consider using getBlobOutputStream() and writing to the returned OutputStream. Alternatively, consider wrapping your data source in a BufferedInputStream to add mark support.
              - length - The exact length of the data. It is important that this value match precisely the length of the data provided in the InputStream.
              - contentMd5 - An MD5 hash of the block content. This hash is used to verify the integrity of the block during transport. When this header is specified, the storage service compares the hash of the content that has arrived with this header value. Note that this MD5 hash is not stored with the blob. If the two hashes do not match, the operation will fail.
              - leaseId - The lease ID the active lease on the blob must match.
              - timeout - An optional timeout value beyond which a RuntimeException will be raised.
              - context - Additional context that is passed through the Http pipeline during the service call.
            Returns: A response containing status code and HTTP headers
          - public BlockBlobItem commitBlockList(List base64BlockIds)
            Description: Writes a blob by specifying the list of block IDs that are to make up the blob. In order to be written as part of a blob, a block must have been successfully written to the server in a prior stageBlock operation. You can call commitBlockList to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together. Any blocks not specified in the block list and permanently deleted.
            Parameters:
              - base64BlockIds - A list of base64 encode Strings that specifies the block IDs to be committed.
            Returns: The information of the block blob.
          - public BlockBlobItem commitBlockList(List base64BlockIds, boolean overwrite)
            Description: Writes a blob by specifying the list of block IDs that are to make up the blob. In order to be written as part of a blob, a block must have been successfully written to the server in a prior stageBlock operation. You can call commitBlockList to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together. Any blocks not specified in the block list and permanently deleted.
            Parameters:
              - base64BlockIds - A list of base64 encode Strings that specifies the block IDs to be committed.
              - overwrite - Whether to overwrite, should data exist on the blob.
            Returns: The information of the block blob.
          - public Response commitBlockListWithResponse(BlockBlobCommitBlockListOptions options, Duration timeout, Context context)
            Description: Writes a blob by specifying the list of block IDs that are to make up the blob. In order to be written as part of a blob, a block must have been successfully written to the server in a prior stageBlock operation. You can call commitBlockList to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together. Any blocks not specified in the block list and permanently deleted.
            Parameters:
              - options - BlockBlobCommitBlockListOptions
              - timeout - An optional timeout value beyond which a RuntimeException will be raised
              - context - Additional context that is passed through the Http pipeline during the service call

      Class: BlockBlobCommitBlockListOptions
        Description: Extended options that may be passed when committing a block list.
        Package: com.azure.storage.blob.options
        Methods:
          - public BlockBlobCommitBlockListOptions setHeaders(BlobHttpHeaders headers)
            Parameters:
              - headers - BlobHttpHeaders
            Returns: The updated options
          - public BlockBlobCommitBlockListOptions setMetadata(Map metadata)
            Parameters:
              - metadata - The metadata to associate with the blob.
            Returns: The updated options
          - public BlockBlobCommitBlockListOptions setTier(AccessTier tier)
            Parameters:
              - tier - AccessTier
            Returns: The updated options

      Class: BlockBlobStageBlockOptions
        Description: Extended options that may be passed when staging a block.
        Package: com.azure.storage.blob.options
        Methods:
          - public BlockBlobStageBlockOptions setContentMd5(byte[] contentMd5)
            Parameters:
              - contentMd5 - An MD5 hash of the block content. This hash is used to verify the integrity of the block during transport. When this header is specified, the storage service compares the hash of the content that has arrived with this header value. Note that this MD5 hash is not stored with the blob. If the two hashes do not match, the operation will fail.
            Returns: The updated options
          - public BlockBlobStageBlockOptions setLeaseId(String leaseId)
            Parameters:
              - leaseId - Lease ID for accessing source content.
            Returns: The updated options
