name: 'Migrate AWS SecretsManagerClient createSecret/putSecretValue to Azure Key Vault setSecret'
description: ""
codeLocation:
  type: textsearch
  filePattern: '**/*.java'
  codePattern: >-
    CreateSecretRequest|PutSecretValueRequest
steps:
  - description: "Migrate SecretsManagerClient with createSecret/putSecretValue API to Azure Key Vault setSecret"
    type: "instruction"
    content: |
      Your task is to migrate a Java file from using the AWS SecretsManager API to the Azure Keyvault API while maintaining the same functionality. Below is a reference to the relevant Azure Keyvault APIs for your convenience. You can tell whether it's an aws or Azure API from the package name.
      Try replace all references to AWS SecretsManager APIs with equivalent Azure Keyvault APIs, using the provided API descriptions as guidance.
      Ensure the resulting code is clean, efficient, and preserves the original functionality.
      Some of the methods are of the same name under different class, please pay attention to the type before using.
      Below are the APIs provided for your reference, don't forget to import the package whenever you are adding a new class reference in code edit:

      Interface: SecretsManagerClient
        Package: software.amazon.awssdk.services.secretsmanager
        Methods:
          - default CreateSecretResponse createSecret(CreateSecretRequest createSecretRequest) throws InvalidParameterException, InvalidRequestException, LimitExceededException, EncryptionFailureException, ResourceExistsException, ResourceNotFoundException, MalformedPolicyDocumentException, InternalServiceErrorException, PreconditionNotMetException, DecryptionFailureException, AwsServiceException, SdkClientException, SecretsManagerException
            Description: Creates a new secret. A secret can be a password, a set of credentials such as a user name and password, an OAuth token, or other secret information that you store in an encrypted form in Secrets Manager. The secret also includes the connection information to access a database or other service, which Secrets Manager doesn't encrypt. A secret in Secrets Manager consists of both the protected secret data and the important information needed to manage the secret.
            Parameters:
            - createSecretRequest
            Returns: Result of the CreateSecret operation returned by the service.
          - default default CreateSecretResponse createSecret(Consumer<CreateSecretRequest.Builder> createSecretRequest) throws InvalidParameterException, InvalidRequestException, LimitExceededException, EncryptionFailureException, ResourceExistsException, ResourceNotFoundException, MalformedPolicyDocumentException, InternalServiceErrorException, PreconditionNotMetException, DecryptionFailureException, AwsServiceException, SdkClientException, SecretsManagerException
            Description: Creates a new secret. A secret can be a password, a set of credentials such as a user name and password, an OAuth token, or other secret information that you store in an encrypted form in Secrets Manager. The secret also includes the connection information to access a database or other service, which Secrets Manager doesn't encrypt. A secret in Secrets Manager consists of both the protected secret data and the important information needed to manage the secret.
            Parameters:
            - createSecretRequest - A Consumer that will call methods on CreateSecretRequest.Builder to create a request.
            Returns: Result of the CreateSecret operation returned by the service.
          - default PutSecretValueResponse putSecretValue(PutSecretValueRequest putSecretValueRequest) throws InvalidParameterException, InvalidRequestException, LimitExceededException, EncryptionFailureException, ResourceExistsException, ResourceNotFoundException, InternalServiceErrorException, DecryptionFailureException, AwsServiceException, SdkClientException, SecretsManagerException
            Description: Creates a new version with a new encrypted secret value and attaches it to the secret. The version can contain a new SecretString value or a new SecretBinary value.
            Parameters:
            - putSecretValueRequest -
            Returns: Result of the PutSecretValue operation returned by the service.
          - default default CreateSecretResponse createSecret(Consumer<CreateSecretRequest.Builder> createSecretRequest) throws InvalidParameterException, InvalidRequestException, LimitExceededException, EncryptionFailureException, ResourceExistsException, ResourceNotFoundException, MalformedPolicyDocumentException, InternalServiceErrorException, PreconditionNotMetException, DecryptionFailureException, AwsServiceException, SdkClientException, SecretsManagerException
            Description: Creates a new version with a new encrypted secret value and attaches it to the secret. The version can contain a new SecretString value or a new SecretBinary value.
            Parameters:
            - putSecretValueRequest - A Consumer that will call methods on PutSecretValueRequest.Builder to create a request.
            Returns: Result of the PutSecretValue operation returned by the service.

      Class: CreateSecretRequest
        Package:software.amazon.awssdk.services.secretsmanager.model
        Methods:
          - public static CreateSecretRequest.Builder builder()

      Interface: CreateSecretRequest.Builder
        Methods:
          - CreateSecretRequest.Builder name(String name)
            Description: The name of the new secret.
            Parameters:
            - name - The name of the new secret.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - CreateSecretRequest.Builder description(String description)
            Description: The description of the secret.
            Parameters:
            - description - The description of the secret.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - CreateSecretRequest.Builder secretBinary(SdkBytes secretBinary)
            Description: The binary data to encrypt and store in the new version of the secret. We recommend that you store your binary data in a file and then pass the contents of the file as a parameter.
            Parameters:
            - secretBinary - The binary data to encrypt and store in the new version of the secret. We recommend that you store your binary data in a file and then pass the contents of the file as a parameter.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - CreateSecretRequest.Builder secretString(String secretString)
            Description: The text data to encrypt and store in this new version of the secret. We recommend you use a JSON structure of key/value pairs for your secret value.
            Parameters:
            - secretString - The text data to encrypt and store in this new version of the secret. We recommend you use a JSON structure of key/value pairs for your secret value.
            Returns: Returns a reference to this object so that method calls can be chained together.

      Class: PutSecretValueRequest
        Package:software.amazon.awssdk.services.secretsmanager.model
        Methods:
          - public static PutSecretValueRequest.Builder builder()

      Interface: PutSecretValueRequest.Builder
        Methods:
          - PutSecretValueRequest.Builder secretId(String secretId)
            Description: The ARN or name of the secret to add a new version to.
            Parameters:
            - secretId - The ARN or name of the secret to add a new version to.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - PutSecretValueRequest.Builder secretBinary(SdkBytes secretBinary)
            Description: The binary data to encrypt and store in the new version of the secret. To use this parameter in the command-line tools, we recommend that you store your binary data in a file and then pass the contents of the file as a parameter.
            Parameters:
            - secretBinary - The binary data to encrypt and store in the new version of the secret. To use this parameter in the command-line tools, we recommend that you store your binary data in a file and then pass the contents of the file as a parameter.
            Returns: Returns a reference to this object so that method calls can be chained together.
          - PutSecretValueRequest.Builder secretString(String secretString)
            Description: The text to encrypt and store in the new version of the secret.
            Parameters:
            - secretString - The text to encrypt and store in the new version of the secret.
            Returns: Returns a reference to this object so that method calls can be chained together.

      Class SecretClient
        Package: com.azure.security.keyvault.secrets
        Methods:
          - public KeyVaultSecret setSecret(KeyVaultSecret secret)
            Description: Adds a secret to the key vault if it does not exist. If the named secret exists, a new version of the secret is created. This operation requires the secrets/set permission. The getExpiresOn(), getContentType(), and getNotBefore() values in secret are optional. If not specified, isEnabled() is set to true by key vault.
            Parameters:
            - secret - The Secret object containing information about the secret and its properties. The properties getName() and getValue() cannot be null.
            Returns: The KeyVaultSecret.
          - public KeyVaultSecret setSecret(String name, String value)
            Description: Adds a secret to the key vault if it does not exist. If the named secret exists, a new version of the secret is created. This operation requires the secrets/set permission.
            Parameters:
            - name - The name of the secret. It is required and cannot be null.
            - value - The value of the secret. It is required and cannot be null.
            Returns: The KeyVaultSecret.
          - public Response setSecretWithResponse(KeyVaultSecret secret, Context context)
            Description: Adds a secret to the key vault if it does not exist. If the named secret exists, a new version of the secret is created. This operation requires the secrets/set permission.
            Parameters:
            - secret - The Secret object containing information about the secret and its properties. The properties secret.name and secret.value must be non null.
            - context - Additional context that is passed through the HTTP pipeline during the service call.
            Returns: A Response<T> whose value contains the KeyVaultSecret.
