#codebase

Prompt for Java Project Code Migration: Apache Ignite → Azure Cache for Redis

---

### Context
Your Java project currently uses Apache Ignite as a distributed cache
Key Points:
1. You need to migrate the entire project to use Azure Cache for Redis instead of Apache Ignite, focusing on code changes, dependency updates, and configuration adjustments.
2. Please find suitable places to make the changes directly, like in-place modifying the pom.xml/build.gradle/application.yml file, write compilable code, don't leave uncompleted code blocks.
3. You need to change the all the Apache Ignite cache related logic and keep other unchanged. At the same time, each place that uses Apache Ignite API, must be replaced with Azure cache for redis ones.
4. Ignore data migration and infrastructure setup.
5. You should delete or comment out the original implementation, since the depdendency will be removed. Or we cannot pass the build.

---

### Actionable Steps

#### 1. Dependency Replacement
Apache Ignite Dependency → Redis Client
- Remove Ignite from `pom.xml`:
  ```xml
  <!-- Remove Apache Ignite dependencies -->
  <dependency>
    <groupId>org.apache.ignite</groupId>
    <artifactId>ignite-core</artifactId>
    <version>2.15.0</version>
  </dependency>
  <dependency>
    <groupId>org.apache.ignite</groupId>
    <artifactId>ignite-spring</artifactId>
    <version>2.15.0</version>
  </dependency>
  ```
- Add Redis Client (e.g., Lettuce):
  ```xml
  <dependency>
    <groupId>io.lettuce</groupId>
    <artifactId>lettuce-core</artifactId>
    <version>6.2.4</version>
  </dependency>
  <!-- Optional: Spring Boot Redis Starter -->
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-redis</artifactId>
    <version>3.4.4</version>
  </dependency>
  ```

---

#### 2. Configuration Migration
Ignite Config → Redis Connection
Note: if it's a spring boot project, consider leveraging the spring boot properties file to init the redis connections. At the same time, Azure cache for Redis requires SSL -> true by default.
- Replace Ignite XML/Java config with Redis connection setup.
  - Ignite (remove):
    ```java
    IgniteConfiguration cfg = new IgniteConfiguration();
    cfg.setClientMode(true); // Client node
    TcpDiscoverySpi spi = new TcpDiscoverySpi();
    TcpDiscoveryVmIpFinder ipFinder = new TcpDiscoveryVmIpFinder();
    ipFinder.setAddresses(Collections.singletonList("127.0.0.1:47500"));
    spi.setIpFinder(ipFinder);
    cfg.setDiscoverySpi(spi);
    Ignite ignite = Ignition.start(cfg);
    ```
  - Redis (new):
    ```java
    RedisURI uri = RedisURI.Builder.redis("<AZURE_REDIS_HOST>")
        .withPort(6380)
        .withSsl(true)
        .withAuthentication("<USERNAME>", "<PASSWORD>")
        .build();
    RedisClient client = RedisClient.create(uri);
    StatefulRedisConnection<String, String> connection = client.connect();
    RedisCommands<String, String> commands = connection.sync();
    ```

- Optional: Spring Boot `application.yml` Configuration
  If using Spring Boot, update Redis properties (keep strict the same properties), and please also consider using the following configs in the redis connection file above:
  ```yaml
  spring:
    data:
      redis:
        host: <AZURE_REDIS_HOST>
        port: 6380
        username: <USERNAME>
        password: <PASSWORD>
        ssl:
          enabled: true
    # Optional: Enable Azure passwordless authentication
    cloud:
      azure:
        redis:
          passwordless-enabled: true
  ```

---

#### 3. Code Refactoring

You need to find all the distributed cache related usages and replace them with Azure cache for redis implementation base on the guides below:

Ignite-Specific APIs → Redis Commands
- Basic Cache Operations:
  ```java
  // Ignite
  IgniteCache<String, String> cache = ignite.getOrCreateCache("myCache");
  cache.put("key", "value");
  String value = cache.get("key");

  // Redis
  commands.set("key", "value");
  String value = commands.get("key");
  ```
- Distributed Locks:

  // Ignite (Distributed Lock)
  Lock lock = ignite.reentrantLock("myLock", true, true);
  lock.lock();
  // ... critical section ...
  lock.unlock();

  // Redis (SET with NX/EX)
  String result = commands.set("lock-key", "owner", SetArgs.Builder.nx().ex(10));
 OK".equals(result)) {
    // ... critical section ...
    commands.del("lock-key");
  }
  ```
- Transactions:
  ```java
  // Ignite (Transactional)
  try (Transaction tx = ignite.transactions().txStart()) {
    cache.put("key", "value");
    tx.commit();
  }

  // Redis (MULTI/EXEC)
  commands.multi();
  commands.set("key1", "value1");
  commands.set("key2", "value2");
  commands.exec();
  ```

---

#### 4. Advanced Feature Migration (Optional)
- Distributed Data Structures:
  - Ignite Queue → Redis List:
    ```java
    // Ignite
    IgniteQueue<String> queue = ignite.queue("myQueue", 0, null);
    queue.add("task1");

    // Redis
    commands.lpush("myQueue", "task1");
    ```
  - Ignite AtomicLong → Redis INCR:
    ```java
    // Redis
    Long counter = commands.incr("counter");
    ```
- Cache Configuration:
  Replace Ignite `CacheConfiguration` with Redis TTL settings:
  ```java
  // Ignite (TTL)
  CacheConfiguration<String, String> cfg = new CacheConfiguration<>();
  cfg.setExpiryPolicyFactory(CreatedExpiryPolicy.factoryOf(Duration.ONE_MINUTE));

  // Redis (TTL)
  commands.setex("key", 60, "value"); // 60 seconds
  ```

---

#### 5. Error Handling
- Ignite Exceptions (e.g., `IgniteException`) → Redis Exceptions (e.g., `RedisCommandExecutionException`):
  ```java
  try {
    commands.get("key");
  } catch (RedisCommandExecutionException e) {
    // Handle Redis-specific errors (e.g., invalid command)
  }
  ```

---

### Pass the build
Use this command to check whether the project can pass the build after migration. If not, fix any build error and make sure it pass the build.
For windows:
```
cmd /c "mvn clean compile -B -fn -DskipTests -Dossindex.failOnError=false -Dossindex.skip=true -Dlicense.skip=true -Dcheckstyle.skip=true -Dencoding=UTF-8"
```
For Linux / macOS:
```
mvn clean compile -B -fn -DskipTests -Dossindex.failOnError=false -Dossindex.skip=true -Dlicense.skip=true -Dcheckstyle.skip=true -Dencoding=UTF-8
```

### Key Takeaways
1. Dependency Cleanup: Remove Ignite libraries and replace with Lettuce/Spring Data Redis.
2. Connection Security: Use SSL and Azure authentication credentials.
3. Spring Boot Optimization: Simplify configuration via `application.yml` for Redis host/port/SSL.
4. Locking Mechanism: Migrate Ignite locks to Redis `SETNX`-based locks for distributed consistency.
