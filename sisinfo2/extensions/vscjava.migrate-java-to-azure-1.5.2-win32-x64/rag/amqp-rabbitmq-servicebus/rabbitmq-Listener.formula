name: "Migrate RabbitMQ Listener"
description: "Migrate RabbitMQ Listener to Azure Service Bus Listener"

codeLocation:
  type: textsearch
  filePattern: '**/*.java'
  codePattern: "RabbitListener|RabbitHandler|EnableRabbit|AmqpHeaders"

steps:
  - description: "Migrate RabbitMQ Listener to Service Bus"
    type: "instruction"
    content: |
      Your task is to migrate a Java file from using the RabbitMQ listener methods to the Azure Service Bus listener methods while maintaining the same functionality.
      Migrate the messaging listeners follow the items one by one:
        - Remove annotation @EnableRabbit.
        - Change annotation @RabbitListener to @ServiceBusListener and add a new annotation @EnableAzureMessaging to the class.
        - Update @ServiceBusListener parameters based on the RabbitMQ topology from the dependency file by checking Spring Beans of RabbitMQ queues, exchanges and bindings, and collect names of RabbitMQ resources before migration.
          - If there are only Beans of org.springframework.amqp.core.Queue without any Exchange or Binding, then this is a queue topology that the RabbitMQ Queue name should be migrated to Service Bus Queue name. You should migrate the "queues" parameter of RabbitListener to "@ServiceBusListener(destination=<queue name>)".
          - If there are Beans of org.springframework.amqp.core.Exchange (as well as its implementation types) or org.springframework.amqp.core.Binding, then this is a topic and subscription topology. You should firstly analyze the binding relationships between queues and exchanges according to the Binding beans before migration.
            Then when migrating to Service Bus, the RabbitMQ Exchange name should be migrated to Service Bus Topic name, and RabbitMQ Queue name should be migrated to Service Bus Subscription name. You should migrate the "queues" parameter of RabbitListener to "@ServiceBusListener(destination=<topic name>, group=<subscription name>)".
        - For the parameters in the listener function, follow the rules to migrate. Don't add new parameters not in the original listener:
          - If there is Typed parameter "T msg", migrate it to "T msg".
          - If there is a custom domain-specific object parameter, keep the parameter signature exactly as is without changing the type or name.
          - If there is Channel parameter, migrate to "@Header(ServiceBusMessageHeaders.RECEIVED_MESSAGE_CONTEXT) ServiceBusReceivedMessageContext context", in the listener body migrate channel.basicAck to context.complete, channel.basicNack to context.abandon. Add null-check for the injected context before invoking it.
          - If there is "Message" parameter of type org.springframework.amqp.core.Message, migrate to "Message<T>" of type org.springframework.messaging.Message, where T is the message payload type.
          - Keep the "@Headers Map<String, Object> headers" to "@Headers Map<String, Object> headers".
        - For RabbitListener with parameter `bindings = @QueueBinding`:
          - Map [Exchange name, Queue name] to Service Bus [Topic name, Subscription name]. If there is only [Exchange name] from RabbitListener, then generate the [Subscription name] by adding a "sub" suffix of the [Topic name].
          - In ServiceBusListener set destination to Topic name and group to Subscription name.
          - Ignore the key settings for `bindings`.
        - For RabbitListener with parameter `group =`:
          - don't migrate it to Service Bus since there is no associated parameter in ServiceBusListener.
        - Map the other parameters between @RabbitListener and @ServiceBusListener.
        - For the functions of RabbitListener that are not supported by the ServiceBusListener, please directly use the com.azure.messaging.servicebus.ServiceBusProcessorClient behind the ServiceBusListener. To leverage the ServiceBusProcessorClient, use the Spring Bean of com.azure.messaging.servicebus.ServiceBusClientBuilder which is provided by the Spring Cloud Azure Starter automatically, then create the processor client by the client builder:
            1. Autowire the bean of ServiceBusClientBuilder, com.azure.identity.DefaultAzureCredential and com.azure.spring.cloud.autoconfigure.implementation.servicebus.properties.AzureServiceBusProperties from the application context
            2. Create the ServiceBusProcessorClient(s) from the ServiceBusClientBuilder using the DefaultAzureCredential bean as the credential and fully qualified namespace from the AzureServiceBusProperties
            3. Configure the queue or topic/subscription to the processor according to the topology
            4. Convert the RabbitListener method handler to type of Consumer<ServiceBusReceivedMessageContext> and pass it to the processMessage() method of the client builder. Convert the error handling code from the source code if any to a type of Consumer<ServiceBusErrorContext>, otherwise just add some logging for the error handling.
            5. After creating required processor clients, call the "start" method to start them.
            6. Find the proper place to close the clients.

        - Remove all AMQP-related imports after migration
          - All imports from packages starting with 'org.springframework.amqp'
          - All imports from packages starting with 'com.rabbitmq'
          - Any other unused imports that were related to RabbitMQ
        - When migrating code to service bus, make sure to add the necessary imports for every newly add class.

      Below are the key information of the rabbitmq and service bus classes, interfaces and annotations for your reference:

      Annotation: RabbitListener
        Package: org.springframework.amqp.rabbit.annotation
        Properties:
          - id: The unique identifier of the container managing for this endpoint.
          - containerFactory: The bean name of the RabbitListenerContainerFactory to use to create the message listener container responsible to serve this endpoint.
          - queues: The queues for this listener. The entries can be 'queue name', 'property-placeholder keys' or 'expressions'.
          - concurrency: Set the concurrency of the listener container for this listener.
          - group: Assigns a consumer group name to the listener container to manage the listeners in the client side. Don't migrate this parameter to ServiceBusListener's 'group' parameter.

      Annotation: QueueBinding, Queue, Exchange
        Package: org.springframework.amqp.rabbit.annotation

      Class: ExchangeTypes
        Package: org.springframework.amqp.core

      Interface: Message
        Package: org.springframework.amqp.core

      Class: MessageProperties
        Package: org.springframework.amqp.core

      Interface: Channel
        Package: com.rabbitmq.client

      Annotation: ServiceBusListener
        Package: com.azure.spring.messaging.servicebus.implementation.core.annotation
        Properties:
          - id: The unique identifier of the container managing this endpoint.
          - containerFactory: The bean name of the MessageListenerContainerFactory to use to create the message listener container responsible for serving this endpoint.
          - destination: The destination name for this listener, resolved through the container-wide.
          - group: The name for the durable group, if any. It should be the name for a Service Bus Subscription, which is different from RabbitListener's 'group' parameter.
          - concurrency: Override the container factory's concurrency setting for the listener. It should be an int value.

      Annotation: EnableAzureMessaging
        Package: com.azure.spring.messaging.implementation.annotation

      Interface: Message<T>
        Package: org.springframework.messaging
        Methods:
          - getPayload()
            Description: Return the message payload.
            Returns: T
          - getHeaders()
            Description: Return message headers for the message.
            Returns: MessageHeaders

      Class: ServiceBusReceivedMessageContext
        Package: com.azure.messaging.servicebus

      Class: ServiceBusMessageHeaders
        Package: com.azure.spring.messaging.servicebus.support

      Class: ServiceBusProcessorClient
        Package: com.azure.messaging.servicebus
        Description: The processor client for processing Service Bus messages.
        Methods: 
          - start()
            Description: Starts the processor in the background.
            Returns: void
          - close()
            Description: Stops message processing and closes the processor. 
            Returns: void  

      Sample Migrations:
      1. listener with payload
      ```java
      // before
      public void listener(T payload) {
      }

      // after
      public void listener(T payload) {
      }
      ```

      2. listener with org.springframework.amqp.core.Message
      ```java
      // before
      public void listener(Message message) {
          T body = JSON.parseObject(message.getBody(), T.class);
          ...
      }

      // after
      public void listener(Message<T> message) {
          T body = message.getPayload();
          ...
      }
      ```

      3. listener with payload and headers
      ```java
      // before
      public void listener(T msg, @Headers Map<String, Object> headers) {
          ...
      }

      // after
      public void listener(T msg, @Headers Map<String, Object> headers) {
          ...
      }
      ```

      4. listener with payload, Message and Channel
      ```java
      // before
      public void listener(T payload, Message message, Channel channel) {
         ...
      }

      // after
      public void listener(T payload, Message<T> message, @Header(ServiceBusMessageHeaders.RECEIVED_MESSAGE_CONTEXT) ServiceBusReceivedMessageContext context) {
         ...
      }
      ```

      5. RabbitListener with `bindings = @QueueBinding`
      ```java
      // before
      @RabbitListener(bindings = @QueueBinding(
            key = "contractEvents.*",
            value = @Queue("queueName"),
            exchange = @Exchange(value = "exchangeName", type = ExchangeTypes.TOPIC)
      ))
      public void listener(T message) {
      }

      // after
      @ServiceBusListener(destination = "exchangeName", group = "queueName")
      public void listener(T message) {
      }
      ```

      6. RabbitListener with a domain-specific custom object
      ```java
      // before
      public void listener(EventeumMessage message) {
      }

      // after
      public void listener(EventeumMessage message) {
      }
      ```

      7. ServiceBusListener on topic and suscription
      ```java
      // before
      @Bean("demoExchange")
      public DirectExchange demoExchange(){
          return new DirectExchange("demoExchange");
      }

      @Bean("demoQueue")
      public Queue demoQueue(){
          return QueueBuilder.durable("demoQueue").build();
      }

      @Bean
      public Binding demoBinding(){
          return BindingBuilder.bind(demoQueue()).to(demoExchange()).with("demo.key").noargs();
      }

      @RabbitListener(queues = "demoQueue")
      public void listener(T message) {
      }

      // after, exchange to topic, queue to subscription, Binding to the rule options on subscription create.
      @Bean
      ServiceBusAdministrationClient adminClient(AzureServiceBusProperties properties, TokenCredential credential) {
          return new ServiceBusAdministrationClientBuilder()
                  .credential(properties.getFullyQualifiedNamespace(), credential)
                  .buildClient();
      }

      @Bean("demoTopic")
      public TopicProperties demoTopic(ServiceBusAdministrationClient adminClient) {
          try {
              return adminClient.getTopic("demoTopic");
          } catch (ResourceNotFoundException e) {
              return adminClient.createTopic("demoTopic");
          }
      }

      @Bean("demoSubscription")
      @DependsOn("demoTopic")
      public SubscriptionProperties demoSubscription(ServiceBusAdministrationClient adminClient) {
          try {
              return adminClient.getSubscription("demoTopic", "demoSubscription");
          } catch (ResourceNotFoundException e) {
              CorrelationRuleFilter ruleFilter = new CorrelationRuleFilter();
              ruleFilter.setLabel("demo.key");
              CreateRuleOptions createRuleOptions = new CreateRuleOptions().setFilter(ruleFilter);
              return adminClient.createSubscription("demoTopic", "demoSubscription",
                      "default_rule_name", new CreateSubscriptionOptions(), createRuleOptions);
          }
      }

      // listener with destination + group
      @ServiceBusListener(destination = "demoTopic", group = "demoSubscription")
      public void listener(T message) {
      }
      ```
