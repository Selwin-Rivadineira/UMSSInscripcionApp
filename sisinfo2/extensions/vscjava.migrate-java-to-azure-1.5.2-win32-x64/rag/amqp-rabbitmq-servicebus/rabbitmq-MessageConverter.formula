name: "Migrate RabbitMQ MessageConverter"
description: "Migrate RabbitMQ MessageConverter to Azure Service Bus MessageConverter"

codeLocation:
  type: textsearch
  filePattern: '**/*.java'
  codePattern: 'org\.springframework\.amqp\.support\.converter\.'

steps:
  - description: "Migrate RabbitMQ MessageConverter to Service Bus"
    type: "instruction"
    content: |
      Your task is to migrate the bean or class member of MessageConverter from RabbitMQ to ServiceBus.
      *DO NOT* optimize the code blocks not directly related to the migration changes, *KEEP* those commented out code, minimize the amount of code changes.

      Important guidelines:

      1. Locate the message converter classes from the package "org.springframework.amqp.support.converter", understand the usage and follow the orders of the scenarios below:
        - If the message converter is initialized without any customizations, then remove the bean or the class member entirely and don't add any replacement.
          Example of what to remove without replacement:
          ```java
          import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
          import org.springframework.amqp.support.converter.MessageConverter;

          @Bean
          public MessageConverter converter() {
              return new Jackson2JsonMessageConverter();
          }
          ```
        - If the message converter is of Jackson2JsonMessageConverter and it has a customized ObjectMapper, replace it with ServiceBusMessageConverter and customize its ObjectMapper with the same customizations. For example:
          ```java
          // before
          import com.fasterxml.jackson.annotation.JsonInclude;
          import com.fasterxml.jackson.databind.ObjectMapper;
          import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
          import org.springframework.context.annotation.Bean;

          @Bean
          public Jackson2JsonMessageConverter producerJackson2MessageConverter() {
              ObjectMapper objectMapper = new ObjectMapper();
              objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
              return new Jackson2JsonMessageConverter(objectMapper);
          }

          // after
          import com.fasterxml.jackson.annotation.JsonInclude;
          import com.fasterxml.jackson.databind.ObjectMapper;
          import com.azure.spring.messaging.servicebus.implementation.support.converter.ServiceBusMessageConverter;
          import org.springframework.context.annotation.Bean;

          @Bean
          public ServiceBusMessageConverter serviceBusMessageConverter() {
              ObjectMapper objectMapper = new ObjectMapper();
              objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
              return new ServiceBusMessageConverter(objectMapper);
          }
          ```
        - For the class members of message converter type, also handle all the references to them accordingly.
      2. For the RabbitTemplate or AmqpTemplate setup that includes setMessageConverter() calls:
        - Completely remove the RabbitTemplate or AmqpTemplate bean definition and DO NOT create a ServiceBusTemplate bean as a replacement.
        - ServiceBusTemplate is automatically provided by the Azure ServiceBus auto-configuration, so there's no need to define a custom bean for it.
        - Example of what to remove without replacement:
          ```java
          // Remove this code entirely without creating a ServiceBusTemplate replacement
          import org.springframework.amqp.rabbit.connection.ConnectionFactory;
          import org.springframework.amqp.rabbit.core.RabbitTemplate;
          import org.springframework.context.annotation.Bean;

          @Bean
          public RabbitTemplate rabbitTemplate(final ConnectionFactory connectionFactory) {
              final RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory);
              rabbitTemplate.setMessageConverter(producerJackson2MessageConverter());
              return rabbitTemplate;
          }
          ```
      3. Remove all AMQP-related imports after migration
        - All imports of classes starting with 'org.springframework.amqp'
        - All imports of classes starting with 'com.rabbitmq'
