name: "Migrate RabbitMQ resources"
description: "Migrate RabbitMQ resource creation to Azure Service Bus resources"

codeLocation:
  type: textsearch
  filePattern: '**/*.java'
  codePattern: 'amqp\.core\.'

steps:
  - description: "Migrate RabbitMQ resources creation"
    type: "instruction"
    content: |
      Your task is to migrate a Java file with Spring Bean configurations of RabbitMQ resource to Azure Service Bus resource beans.
      Describe the code to find queues, exchanges and bindings relationships, tell if there is a binding to exchange for each queue or queue only and begin the migration:
        - If there are only Beans of RabbitMQ Queue, then it should be migrated to the Beans of QueueProperties in service bus.
        - If there are Beans of RabbitMQ Queue, Binding and Exchange, then migrate the two beans of Queue and Binding to a single bean of SubscriptionProperties. And migrate the bean of Exchange to TopicProperties in Service bus. To keep the same functionality, do not create service bus queue in this scenario.
        - Find the resource names in the source file, and reuse the names when create new service bus resources.
      More RabbitMQ to Service bus resources mapping relationships:
        - Migrate Objects or Beans of AmqpAdmin or RabbitAdmin to ServiceBusAdministrationClient.
        - When constructing the ServiceBusAdministrationClient, autowire the AzureServiceBusProperties and TokenCredential beans from Spring Context, 
          use AzureServiceBusProperties#getFullyQualifiedNamespace and TokenCredential to initialize the client.
        - Migrate Objects or Beans of TopicExchange / DirectExchange / CustomExchange to TopicProperties.
        - Migrate Objects or Beans of RabbitListenerContainerFactory / SimpleRabbitListenerContainerFactory / DirectRabbitListenerContainerFactory to PropertiesSupplier<ConsumerIdentifier, ProcessorProperties>, and map the properties configured to the rabbit container factory to the ProcessorProperties except for message converter or connection factory.
        - Add a Bean of PropertiesSupplier<String, ProducerProperties> when there are any customized properties configured for RabbitTemplate except for message converter and connection factory, and configure the ProducerProperties as how RabbitTemplate are configured.

      Remove all amqp imports after migration.
      Remove all unused imports after migration.
      Add the necessary imports for every newly add class.
      Do all the above code migration in the original file instead of creating a new file for Service Bus Configuration.

      Below are the APIs provided for your reference:
      Class: AzureServiceBusProperties
        Package: com.azure.spring.cloud.autoconfigure.implementation.servicebus.properties

      Class: TokenCredential
        Package: com.azure.core.credential

      Class: ResourceNotFoundException
        Package: com.azure.core.exception

      Class: TopicProperties, SubscriptionProperties, QueueProperties, CorrelationRuleFilter, CreateRuleOptions, CreateSubscriptionOptions
        Package: com.azure.messaging.servicebus.administration.models

      Class: ServiceBusAdministrationClient, ServiceBusAdministrationClientBuilder
        Package: com.azure.messaging.servicebus.administration

      Annotation: DependsOn
        Package: org.springframework.context.annotation

      Interface: PropertiesSupplier<K, V>
        Package: com.azure.spring.messaging
        Description: An interface to provide properties by providing key.
        Methods:
          - getProperties(K key)
            Returns: V
            Description: Get the properties by the key
            Parameters:
              - key: the provided key to identity the target properties instance
      
      Class: ConsumerIdentifier
        Package: com.azure.spring.messaging
        Description: The class to describe the consumer identifier according to the consumer destination and group.
        Methods: 
          - ConsumerIdentifier(String destination)
            Description: Construct an instance via the consumer destination, which is used for Service Bus Queue.
            Parameters: 
              - destination: the consumer destination, should be a Service Bus Queue name.
          - ConsumerIdentifier(String destination, String group)
            Description: Construct an instance via the consumer destination and group, which is used for Event Hubs and Service Bus Topic.
            Parameters: 
              - destination: the consumer destination
              - group: the group

      Class: ProcessorProperties
        Package: com.azure.spring.messaging.servicebus.core.properties
        Description: A service bus processor related properties.
        Methods: 
          - setMaxConcurrentCalls(Integer maxConcurrentCalls)
            Description: Set the max concurrent call number.
            Return: void
            Parameters: 
              - maxConcurrentCalls: the max concurrent call number. 
          - setAutoComplete(Boolean autoComplete)
            Description: Set whether to enable auto-complete.
            Return: void
            Parameters: 
              - autoComplete: whether auto-complete is enabled.
          - setPrefetchCount(Integer prefetchCount)
            Description: Set the prefetch count.
            Return: void
            Parameters: 
              - prefetchCount: the prefetch count
          - setSubscriptionName(String subscriptionName)
            Description: Set the subscription name.
            Return: void
            Parameters: 
              - subscriptionName: the subscription name
          - getRetry()
            Description: Get the retry configuration.
            Return: com.azure.spring.cloud.core.provider.retry.AmqpRetryProperties

      Class: ProducerProperties
        Package: com.azure.spring.messaging.servicebus.core.properties
        Description: A service bus producer related properties.
        Methods: 
          - getRetry()
            Description: Get the retry configuration.
            Return: com.azure.spring.cloud.core.provider.retry.AmqpRetryProperties

      Interface: AmqpRetryProperties
        Description: Unified http retry properties for all Azure SDKs based on HTTP.
        Package: com.azure.spring.cloud.core.properties.retry
        Methods: 
          - setTryTimeout(Duration tryTimeout)
            Description: Set how long to wait until a timeout.
            Return: void
            Parameters: 
              - tryTimeout: the timeout
          - setMode(RetryOptionsProvider.RetryMode mode)
            Description: Set the mode for retry backoff.
            Return: void
            Parameters: 
              - mode: the mode for retry backoff. Accept two types of value: "FIXED" and "EXPONENTIAL".
          - getFixed()
            Description: Get the retry options of the fixed retry mode.
            Return: com.azure.spring.cloud.core.properties.retry.FixedRetryProperties
          - getExponential()
            Description: Get the retry options of the exponential retry mode.
            Return: com.azure.spring.cloud.core.properties.retry.ExponentialRetryProperties
          
      Class: FixedRetryProperties
        Description: Properties of the fixed retry mode.
        Package: com.azure.spring.cloud.core.properties.retry
          - setMaxRetries(Integer maxRetries)
            Description: Set the maximum number attempts.
            Return: void
            Parameters: 
              - maxRetries: the maximum number attempts.
          - setDelay(Duration delay)
            Description: Set the amount of time to wait between retry attempts.
            Return: void
            Parameters: 
              - delay: the amount of time to wait between retry attempts.
          
      Class: ExponentialRetryProperties
        Description: Properties of the exponential retry mode.
        Package: com.azure.spring.cloud.core.properties.retry
          - setMaxRetries(Integer maxRetries)
            Description: Set the maximum number attempts.
            Return: void
            Parameters: 
              - maxRetries: the maximum number attempts.
          - setBaseDelay(Duration baseDelay)
            Description: Set the amount of time to wait between retry attempts.
            Return: void
            Parameters: 
              - baseDelay: The delay to wait between retry attempts.
          - setMaxDelay(Duration maxDelay)
            Description: Set the maximum permissible amount of time between retry attempts.
            Return: void
            Parameters: 
              - maxDelay: The maximum permissible amount of time between retry attempts.

      Important guidelines and migration examples:

      1. Init a ServiceBusAdministrationClient bean:
        ```java
        @Bean
        public ServiceBusAdministrationClient adminClient(AzureServiceBusProperties properties, TokenCredential credential) {
            return new ServiceBusAdministrationClientBuilder()
                    .credential(properties.getFullyQualifiedNamespace(), credential)
                    .buildClient();
        }
        ```

      2. Migrate the Spring Bean of Exchange in RabbitMQ to the Bean of Topic in Service Bus
        ```java
        // before: Create exchange in RabbitMQ
        @Bean
        DirectExchange exchange() {
            return new DirectExchange(exchange);
        }

        // after: Create topic in Service Bus
        @Bean
        public TopicProperties topicProperties(ServiceBusAdministrationClient adminClient,
                String topicName) {
            try {
                return adminClient.getTopic(topicName);
            } catch (ResourceNotFoundException e) {
                return adminClient.createTopic(topicName);
            }
        }
        ```
      3. Migrate the Spring Beans of Queue and Binding to the Bean of Subscription with rule options, don't migrate to Service Bus Queue.
        ```java
        // before: create queue and binding
        @Bean
        public Queue queue(String queueName) {
            return new Queue(queueName);
        }

        @Bean
        public Binding binding(Queue queue, DirectExchange exchange) {
            return BindingBuilder.bind(queue).to(exchange).with(routingKey);
        }

        // after: create subscription with filter rule
        @Bean
        @DependsOn("topicProperties")
        public SubscriptionProperties subscription(
                ServiceBusAdministrationClient adminClient,
                String topicName,
                String subscriptionName,
                String routeKey) {

            try {
                return adminClient.getSubscription(topicName, subscriptionName);
            } catch (ResourceNotFoundException e) {
                CreateSubscriptionOptions subOptions = new CreateSubscriptionOptions();
                CorrelationRuleFilter filter = new CorrelationRuleFilter().setLabel(routeKey); // label for subject
                CreateRuleOptions ruleOptions = new CreateRuleOptions()
                        .setFilter(filter);
                return adminClient.createSubscription(topicName, subscriptionName, "RouteKey", subOptions, ruleOptions);
            }
        }

      4. If there is only Spring Bean of Queue without binding in RabbitMQ, then migrate it to the Bean of Queue in Service Bus
        ```java
        // before: create queue in RabbitMQ
        @Bean
        public Queue queue(String queueName) {
            return new Queue(queueName);
        }

        // after: create queue in Service Bus
        @Bean
        public QueueProperties queue(ServiceBusAdministrationClient adminClient, String queueName) {
            try {
                return adminClient.getQueue(queueName);
            } catch (ResourceNotFoundException e) {
                return adminClient.createQueue(queueName);
            }
        }
        ```

        ```
