import { z } from 'zod';
export declare const runTaskSchema: z.ZodObject<{
    kbId: z.ZodOptional<z.ZodString>;
    scenario: z.ZodOptional<z.ZodString>;
    workspacePath: z.ZodString;
}, "strip", z.ZodTypeAny, {
    workspacePath: string;
    kbId?: string | undefined;
    scenario?: string | undefined;
}, {
    workspacePath: string;
    kbId?: string | undefined;
    scenario?: string | undefined;
}>;
export declare const validationStage: z.ZodObject<{
    title: z.ZodString;
    instruction: z.ZodString;
}, "strip", z.ZodTypeAny, {
    instruction: string;
    title: string;
}, {
    instruction: string;
    title: string;
}>;
export declare const runTaskResponseSchema: z.ZodObject<{
    sessionId: z.ZodString;
    runMode: z.ZodEnum<["interactive", "non-interactive"]>;
    goal: z.ZodString;
    scope: z.ZodString;
    successCriteria: z.ZodString;
    toolUsageInstructions: z.ZodString;
    progressTrackingInstructions: z.ZodString;
    planningInstructions: z.ZodString;
    versionControlSetupInstructions: z.ZodString;
    generalExecutionInstructions: z.ZodString;
    finalSummaryInstructions: z.ZodString;
    validations: z.ZodObject<{
        validationInstructions: z.ZodString;
        stages: z.ZodArray<z.ZodObject<{
            title: z.ZodString;
            instruction: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            instruction: string;
            title: string;
        }, {
            instruction: string;
            title: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        validationInstructions: string;
        stages: {
            instruction: string;
            title: string;
        }[];
    }, {
        validationInstructions: string;
        stages: {
            instruction: string;
            title: string;
        }[];
    }>;
}, "strip", z.ZodTypeAny, {
    sessionId: string;
    scope: string;
    runMode: "interactive" | "non-interactive";
    goal: string;
    successCriteria: string;
    toolUsageInstructions: string;
    progressTrackingInstructions: string;
    planningInstructions: string;
    versionControlSetupInstructions: string;
    generalExecutionInstructions: string;
    finalSummaryInstructions: string;
    validations: {
        validationInstructions: string;
        stages: {
            instruction: string;
            title: string;
        }[];
    };
}, {
    sessionId: string;
    scope: string;
    runMode: "interactive" | "non-interactive";
    goal: string;
    successCriteria: string;
    toolUsageInstructions: string;
    progressTrackingInstructions: string;
    planningInstructions: string;
    versionControlSetupInstructions: string;
    generalExecutionInstructions: string;
    finalSummaryInstructions: string;
    validations: {
        validationInstructions: string;
        stages: {
            instruction: string;
            title: string;
        }[];
    };
}>;
export type RunTaskRequest = z.infer<typeof runTaskSchema>;
export type RunTaskResponse = z.infer<typeof runTaskResponseSchema>;
//# sourceMappingURL=RunTaskRequest.d.ts.map