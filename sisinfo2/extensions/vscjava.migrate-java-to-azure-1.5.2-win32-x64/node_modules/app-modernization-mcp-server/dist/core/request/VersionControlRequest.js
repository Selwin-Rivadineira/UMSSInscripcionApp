"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VersionControlRequestSchema = exports.VersionControlActionSchema = void 0;
const z = __importStar(require("zod"));
/**
 * Define the version control actions schema
 *
 * These actions represent the available operations that can be performed on the version control system:
 * - checkStatus: Get the current status of the repository (modified files, branch info, etc.)
 * - createBranch: Create a new branch from the current HEAD
 * - commitChanges: Commit all staged and unstaged changes
 * - stashChanges: Temporarily store changes without committing them
 * - discardChanges: Discard all local changes, reverting to HEAD
 * - checkForUncommittedChanges: Check if there are any uncommitted changes in the repository
 */
exports.VersionControlActionSchema = z.enum([
    'checkStatus',
    'createBranch',
    'commitChanges',
    'stashChanges',
    'discardChanges',
    'checkForUncommittedChanges',
]);
/**
 * Define the request schema for version control operations
 */
exports.VersionControlRequestSchema = z.object({
    workspacePath: z
        .string()
        .describe('The absolute path to the workspace where version control operations should be performed.'),
    action: exports.VersionControlActionSchema.describe('The version control action to perform. Available options: ' +
        'checkStatus (get repository status), ' +
        'createBranch (create new branch), ' +
        'commitChanges (commit all changes), ' +
        'stashChanges (stash working changes), ' +
        'discardChanges (discard all changes), ' +
        'checkForUncommittedChanges (check if workspace has uncommitted changes)'),
    branchName: z
        .string()
        .optional()
        .describe('The name of the branch to create. Optional parameter, but required when action is "createBranch".'),
    commitMessage: z
        .string()
        .optional()
        .describe('The commit message to use. Optional parameter, but required when action is "commitChanges".'),
    stashMessage: z
        .string()
        .optional()
        .describe('Message to include with stashed changes. Completely optional, only used when action is "stashChanges".'),
});
// We'll use ToolResponse directly instead of defining a custom response type
//# sourceMappingURL=VersionControlRequest.js.map