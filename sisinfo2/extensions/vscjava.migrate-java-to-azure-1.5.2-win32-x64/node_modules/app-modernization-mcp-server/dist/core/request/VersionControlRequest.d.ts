import * as z from 'zod';
/**
 * Define the version control actions schema
 *
 * These actions represent the available operations that can be performed on the version control system:
 * - checkStatus: Get the current status of the repository (modified files, branch info, etc.)
 * - createBranch: Create a new branch from the current HEAD
 * - commitChanges: Commit all staged and unstaged changes
 * - stashChanges: Temporarily store changes without committing them
 * - discardChanges: Discard all local changes, reverting to HEAD
 * - checkForUncommittedChanges: Check if there are any uncommitted changes in the repository
 */
export declare const VersionControlActionSchema: z.ZodEnum<["checkStatus", "createBranch", "commitChanges", "stashChanges", "discardChanges", "checkForUncommittedChanges"]>;
export type VersionControlAction = z.infer<typeof VersionControlActionSchema>;
/**
 * Define the request schema for version control operations
 */
export declare const VersionControlRequestSchema: z.ZodObject<{
    workspacePath: z.ZodString;
    action: z.ZodEnum<["checkStatus", "createBranch", "commitChanges", "stashChanges", "discardChanges", "checkForUncommittedChanges"]>;
    branchName: z.ZodOptional<z.ZodString>;
    commitMessage: z.ZodOptional<z.ZodString>;
    stashMessage: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    workspacePath: string;
    action: "checkStatus" | "createBranch" | "commitChanges" | "stashChanges" | "discardChanges" | "checkForUncommittedChanges";
    branchName?: string | undefined;
    commitMessage?: string | undefined;
    stashMessage?: string | undefined;
}, {
    workspacePath: string;
    action: "checkStatus" | "createBranch" | "commitChanges" | "stashChanges" | "discardChanges" | "checkForUncommittedChanges";
    branchName?: string | undefined;
    commitMessage?: string | undefined;
    stashMessage?: string | undefined;
}>;
export type VersionControlRequest = z.infer<typeof VersionControlRequestSchema>;
//# sourceMappingURL=VersionControlRequest.d.ts.map