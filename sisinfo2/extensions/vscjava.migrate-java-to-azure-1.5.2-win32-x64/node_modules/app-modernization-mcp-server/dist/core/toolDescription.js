"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolDescriptions = void 0;
/**
 * Constants for tool descriptions used in MCP server registration
 */
exports.ToolDescriptions = {
    JAVA_BUILD: '(For migration only) This tool uses Maven or Gradle to build your project and report any detected errors after migration. You should use this tool to verify after making code changes, and fix any errors found.',
    JAVA_RUN_TEST: 'This tool runs tests in the Java project and reports any detected errors or test failures after migration.',
    JAVA_FIX_TEST: 'This tool generate a plan to guide you fix unit tests failures in the Java project after migration. You should strictly follow the plan to fix the unit tests failures.',
    CONSISTENCY_VALIDATE: 'This tool validates the consistency of migrated code by analyzing git diffs for any behavior changes. It identifies critical and major issues that need to be fixed to maintain functional equivalence between pre-migration and post-migration code.',
    COMPLETENESS_VALIDATE: 'This tool validates migration completeness by systematically discovering old technology references that should have been migrated but were left unchanged. It generates detailed validation guidelines to identify missing removals and incomplete transformations across all files in the workspace.',
    INSTALL_APPCAT: 'Installs the AppCAT CLI for Java only if it is missing or outdated during the prerequisite check phase of assessment. After successful installation, proceed to initialize the Java application assessment process to check prerequisites. This tool is strictly limited to the pre-migration assessment preparation phase and must not be invoked during code migration workflows.',
    PRECHECK_ASSESSMENT: 'Performs prerequisites verification and AppCAT CLI version checks to initialize the Java application assessment process. Generates an assessment plan for review. This tool is strictly limited to the pre-migration assessment phase and must not be invoked during code migration workflows.',
    RUN_ASSESSMENT: 'Executes the AppCAT CLI for Java to assess the Java application. This tool is strictly limited to the pre-migration assessment phase and must not be invoked during code migration workflows.',
    KB_ASSESSMENT: 'Executes the Java application assessment based on the provided knowledge base of source-to-target technology mappings to identify the technology usage. This tool is strictly limited to the pre-migration assessment phase and must not be invoked during code migration workflows.',
    SEARCH_KB: 'Searches the application modernization knowledge base using a query string. Returns relevant articles, documentation, and best practices. Use this tool to find information about app modernization strategies, migration paths, and common patterns.',
    SEARCH_FILE: 'Searches content from files in the project workspace by query and file patterns. Returns a list of files that match the search query. Use this tool to find specific code files or resources in your project based on patterns.',
    GET_KB: 'Retrieves the complete content of a specific knowledge base article using its ID. Use this tool when you have a document ID and need to access its full content for detailed information about app modernization techniques.',
    MIGRATION_SUMMARY: '(For migration only) Generates a summary for the migration session, including details about the migration scenario, task name, modified files, and the final status of build and test fix operations. This tool helps you document the migration process and its outcomes.',
    RUN_TASK: 'This tool will start a new migration session to run task based on given scenario or knowledge base id. This tool will provide a comprehensive migration plan, including steps to build the project, run tests, fix test failures, and more. It is designed to automate the migration process for the applications.',
    RUN_IN_TERMINAL: 'This tool runs a command in the terminal and returns the output.',
    VERSION_CONTROL: 'This tool provides version control operations for the migration process. It handles operations like checking repository status, creating branches, committing changes, stashing changes, and discarding changes.',
};
//# sourceMappingURL=toolDescription.js.map