import { McpContext } from '../types';
export interface Tool<TRequest, TResponse> {
    /**
     * The unique name of the tool, used to reference the tool in the extension implementation code.
     */
    name: string;
    /**
     * The name for users to reference the tool in a chat prompt
     */
    toolReferenceName: string;
    /**
     * The user-friendly name of the tool, used for displaying in the UI.
     */
    displayName: string;
    /**
     * Description of what the tool does
     */
    description: string;
    execute(request: TRequest, context: McpContext): Promise<TResponse>;
}
export interface ToolResponse {
    success: boolean;
    message: string;
    details?: any;
}
export declare abstract class BaseTool<TRequest, TResponse extends ToolResponse> implements Tool<TRequest, TResponse> {
    /**
     * The unique name of the tool, used to reference the tool in the extension implementation code.
     */
    abstract name: string;
    /**
     * The name for users to reference the tool in a chat prompt
     */
    abstract toolReferenceName: string;
    /**
     * The user-friendly name of the tool, used for displaying in the UI.
     */
    abstract displayName: string;
    /**
     * Description of what the tool does
     */
    abstract description: string;
    abstract execute(request: TRequest, context: McpContext): Promise<TResponse>;
    protected createSuccessResponse(message: string, details?: any): TResponse;
    protected createErrorResponse(message: string, details?: any): TResponse;
    protected createStructuredResponse(structuredData: any, message?: string): TResponse;
}
//# sourceMappingURL=Tool.d.ts.map