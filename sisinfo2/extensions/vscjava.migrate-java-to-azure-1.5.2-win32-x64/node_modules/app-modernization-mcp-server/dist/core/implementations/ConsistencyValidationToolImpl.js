"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsistencyValidationToolImpl = void 0;
const child_process_1 = require("child_process");
const tsyringe_1 = require("tsyringe");
const consistencyPrompts_1 = require("../../evaluate/consistencyPrompts");
const ToolNames_1 = require("../../tools/ToolNames");
const types_1 = require("../../types");
const utils_1 = require("../../utils");
const Tool_1 = require("../Tool");
const toolDescription_1 = require("../toolDescription");
class ConsistencyValidationToolImpl extends Tool_1.BaseTool {
    constructor() {
        super(...arguments);
        this.name = ToolNames_1.McpToolNames.CONSISTENCY_VALIDATE;
        this.toolReferenceName = ToolNames_1.McpToolNames.CONSISTENCY_VALIDATE;
        this.displayName = 'Validate Migration Consistency';
        this.description = toolDescription_1.ToolDescriptions.CONSISTENCY_VALIDATE;
    }
    /**
     * Gets the git diff for the current working directory in the specified workspace
     * @param workspacePath - The path to the workspace
     * @param baselineRevisionId - The baseline revision/commit ID to compare against. If not provided, compares against the last commit
     * @returns The generated git diff as a string
     */
    getGitDiff(workspacePath, baselineRevisionId) {
        const logger = tsyringe_1.container.resolve(types_1.Beans.Logger);
        try {
            (0, child_process_1.execSync)('git add .', { cwd: workspacePath }).toString();
            // Generate git diff - either against a specific revision or the last commit
            const gitCommand = baselineRevisionId
                ? `git diff ${baselineRevisionId} -- .`
                : 'git diff HEAD -- .';
            logger.info('run git command: ', gitCommand);
            const gitDiff = (0, child_process_1.execSync)(gitCommand, { cwd: workspacePath }).toString();
            return gitDiff;
        }
        catch (error) {
            logger.error(`Failed to generate git diff:`, error);
            return '';
        }
    }
    async execute(request, context) {
        const workspacePath = request.workspacePath;
        const migrationScenario = request.migrationScenario || 'Migrate to Azure';
        const baselineRevisionId = request.baselineRevisionId;
        const gitDiff = this.getGitDiff(workspacePath, baselineRevisionId);
        const kbStore = tsyringe_1.container.resolve(types_1.Beans.KBStore);
        const kbs = (await Promise.all(request.kbIds.map((kbId) => kbStore.findKbById(context, kbId)))).flat();
        const message = `# Migration Consistency Validation
Follow these steps to validate the consistency of the migrated code and fix any issues:

1. You are given a git diff in section ***GIT DIFF***

2. Follow the detailed instruction in section  ***Detailed Analysis Instructions for Identifying Illegal Changes*** to analyze code changes.

> [!NOTE]
> You have the highest decision-making authority at any time, you do NOT need to seek my approval/confirmation, please directly execute your plan as you see fit.

---
# GIT DIFF
${gitDiff}

---
# Detailed Analysis Instructions for Identifying Illegal Changes
${(0, consistencyPrompts_1.AZURE_MIGRATE_CONSISTENCY_EVALUATION)({ scenario: migrationScenario, knowledgeBase: kbs.map((kb) => (0, utils_1.kbToMarkdown)(kb)).join('\n\n') })}

}
---

`;
        return this.createSuccessResponse(message);
    }
}
exports.ConsistencyValidationToolImpl = ConsistencyValidationToolImpl;
//# sourceMappingURL=ConsistencyValidationToolImpl.js.map