import { TelemetryBoolean } from '../../telemetry/telemetry';
import { McpContext } from '../../types';
import { PrecheckAssessmentToolRequest } from '../request/PrecheckAssessmentRequest';
import { BaseTool, ToolResponse } from '../Tool';
type AppCatConfig = {
    target: string[];
    mode: string;
};
export type AssessmentConfig = {
    appcat: AppCatConfig[];
};
export type InstallToolInfo = {
    found: boolean;
    path: string;
    version: string;
    error?: string;
};
export declare const APPCAT_MINIMAL_VERSION = "7.7.0.2";
export declare const APPMOD_DIR: string;
export declare const APPCAT_DIR: string;
export declare const APPCAT_LOG = "appcat.log";
export declare const ASSESSMENT_CONFIG = "assessment-config.yaml";
export declare const ASSESSMENT_PLAN = "assessment-plan.md";
export declare class PrecheckAssessmentToolImpl extends BaseTool<PrecheckAssessmentToolRequest, ToolResponse> {
    name: string;
    toolReferenceName: string;
    displayName: string;
    description: string;
    execute(request: PrecheckAssessmentToolRequest, context: McpContext): Promise<ToolResponse>;
}
export declare function loadAssessmentConfig(configPath: string): Promise<AssessmentConfig>;
export declare function saveAssessmentConfig(configPath: string, appcatConfig: AssessmentConfig): Promise<void>;
export declare function sendTelemetryWhenAppCatCheck(result: 'success' | 'fail', error?: Error, workspacePathExists?: TelemetryBoolean | 'N/A', isJavaProject?: TelemetryBoolean | 'N/A', projectLanguages?: string, appCatVersion?: string): Promise<void>;
export {};
//# sourceMappingURL=PrecheckAssessmentToolImpl.d.ts.map