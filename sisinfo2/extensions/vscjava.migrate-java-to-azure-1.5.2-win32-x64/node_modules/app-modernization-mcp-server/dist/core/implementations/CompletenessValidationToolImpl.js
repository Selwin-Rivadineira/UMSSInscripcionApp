"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompletenessValidationToolImpl = void 0;
const tsyringe_1 = require("tsyringe");
const completenessPrompts_1 = require("../../evaluate/completenessPrompts");
const ToolNames_1 = require("../../tools/ToolNames");
const types_1 = require("../../types");
const utils_1 = require("../../utils");
const Tool_1 = require("../Tool");
const toolDescription_1 = require("../toolDescription");
class CompletenessValidationToolImpl extends Tool_1.BaseTool {
    constructor() {
        super(...arguments);
        this.name = ToolNames_1.McpToolNames.COMPLETENESS_VALIDATE;
        this.toolReferenceName = ToolNames_1.McpToolNames.COMPLETENESS_VALIDATE;
        this.displayName = 'Validate Migration Completeness';
        this.description = toolDescription_1.ToolDescriptions.COMPLETENESS_VALIDATE;
    }
    async execute(request, context) {
        const workspacePath = request.workspacePath;
        const migrationScenario = request.migrationScenario || 'Migrate to Azure';
        const kbStore = tsyringe_1.container.resolve(types_1.Beans.KBStore);
        const eventEmitter = tsyringe_1.container.resolve(types_1.Beans.McpEventEmitter);
        const kbs = (await Promise.all(request.kbIds.map((kbId) => kbStore.findKbById(context, kbId)))).flat();
        const completenessPrompt = (0, completenessPrompts_1.AZURE_MIGRATE_COMPLETENESS_EVALUATION)(workspacePath, kbs.map((kb) => (0, utils_1.kbToMarkdown)(kb)).join('\n\n'), migrationScenario);
        const message = completenessPrompt;
        // Emit telemetry for completeness validation tool usage
        eventEmitter.emit('completeness_check_result', {
            result: 'success',
            message: `Completeness validation initiated for scenario: ${migrationScenario}`,
            workspacePath,
        }, context);
        return this.createSuccessResponse(message);
    }
}
exports.CompletenessValidationToolImpl = CompletenessValidationToolImpl;
//# sourceMappingURL=CompletenessValidationToolImpl.js.map