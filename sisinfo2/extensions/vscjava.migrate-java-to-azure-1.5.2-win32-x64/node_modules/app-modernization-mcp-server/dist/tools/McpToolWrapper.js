"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.McpToolWrapper = void 0;
const ToolFactory_1 = require("../core/ToolFactory");
const utils_1 = require("../utils");
/**
 * Generic MCP wrapper that can wrap any tool implementation
 */
class McpToolWrapper {
    static async execute(toolName, request, mcpContext) {
        const tool = ToolFactory_1.ToolFactory.createTool(toolName);
        if (!tool) {
            return utils_1.MCPOutput.error(`Tool '${toolName}' not found or not registered`);
        }
        try {
            // Execute the tool directly with McpContext
            const result = await tool.execute(request, mcpContext);
            if (result.success) {
                // If the result has structured details, use MCPOutput.structured
                if (result.details) {
                    return utils_1.MCPOutput.structured(result.details);
                }
                return utils_1.MCPOutput.success(result.message);
            }
            else {
                return utils_1.MCPOutput.error(result.message);
            }
        }
        catch (error) {
            return utils_1.MCPOutput.error(`Unexpected error in tool '${toolName}': ${error.message || error}`);
        }
    }
}
exports.McpToolWrapper = McpToolWrapper;
//# sourceMappingURL=McpToolWrapper.js.map