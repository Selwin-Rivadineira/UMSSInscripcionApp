"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVersionControlTool = exports.searchKbTool = exports.searchFileTool = exports.runTaskTool = exports.getRunAssessmentTool = exports.getPrecheckAssessmentTool = exports.getMigrationSummary = exports.getJavaRunTestTool = exports.getJavaTestFixTool = exports.getJavaBuildTool = exports.getInstallAppCatTool = exports.getKbTool = exports.getConsistencyValidationTool = exports.getCompletenessValidationTool = void 0;
require("../core/ToolRegistry"); // Ensure tools are registered
const McpToolWrapper_1 = require("./McpToolWrapper");
const ToolNames_1 = require("./ToolNames");
// Completeness Validation Tool
const getCompletenessValidationTool = async (request, context) => {
    return McpToolWrapper_1.McpToolWrapper.execute(ToolNames_1.McpToolNames.COMPLETENESS_VALIDATE, request, context);
};
exports.getCompletenessValidationTool = getCompletenessValidationTool;
// Consistency Validation Tool
const getConsistencyValidationTool = async (request, context) => {
    return McpToolWrapper_1.McpToolWrapper.execute(ToolNames_1.McpToolNames.CONSISTENCY_VALIDATE, request, context);
};
exports.getConsistencyValidationTool = getConsistencyValidationTool;
// Get Knowledge Base Tool
const getKbTool = async (request, context) => {
    return await McpToolWrapper_1.McpToolWrapper.execute(ToolNames_1.McpToolNames.GET_KB, request, context);
};
exports.getKbTool = getKbTool;
// Install AppCat Tool
const getInstallAppCatTool = async (request, context) => {
    return McpToolWrapper_1.McpToolWrapper.execute(ToolNames_1.McpToolNames.INSTALL_APPCAT, request, context);
};
exports.getInstallAppCatTool = getInstallAppCatTool;
// Java Build Tool
const getJavaBuildTool = async (request, context) => {
    return await McpToolWrapper_1.McpToolWrapper.execute(ToolNames_1.McpToolNames.JAVA_BUILD, request, context);
};
exports.getJavaBuildTool = getJavaBuildTool;
// Java Fix Test Tool
const getJavaTestFixTool = async (request, context) => {
    return await McpToolWrapper_1.McpToolWrapper.execute(ToolNames_1.McpToolNames.JAVA_FIX_TEST, request, context);
};
exports.getJavaTestFixTool = getJavaTestFixTool;
// Java Run Test Tool
const getJavaRunTestTool = async (request, context) => {
    return await McpToolWrapper_1.McpToolWrapper.execute(ToolNames_1.McpToolNames.JAVA_RUN_TEST, request, context);
};
exports.getJavaRunTestTool = getJavaRunTestTool;
// Migration Summary Tool
const getMigrationSummary = async (request, context) => {
    return McpToolWrapper_1.McpToolWrapper.execute(ToolNames_1.McpToolNames.MIGRATION_SUMMARY, request, context);
};
exports.getMigrationSummary = getMigrationSummary;
// Precheck Assessment Tool
const getPrecheckAssessmentTool = async (request, context) => {
    return McpToolWrapper_1.McpToolWrapper.execute(ToolNames_1.McpToolNames.PRECHECK_ASSESSMENT, request, context);
};
exports.getPrecheckAssessmentTool = getPrecheckAssessmentTool;
// Run Assessment Tool
const getRunAssessmentTool = async (request, context) => {
    return McpToolWrapper_1.McpToolWrapper.execute(ToolNames_1.McpToolNames.RUN_ASSESSMENT, request, context);
};
exports.getRunAssessmentTool = getRunAssessmentTool;
// Run Task Tool
const runTaskTool = async (request, context) => {
    return await McpToolWrapper_1.McpToolWrapper.execute(ToolNames_1.McpToolNames.RUN_TASK, request, context);
};
exports.runTaskTool = runTaskTool;
// Search File Tool
const searchFileTool = async (request, context) => {
    return await McpToolWrapper_1.McpToolWrapper.execute(ToolNames_1.McpToolNames.SEARCH_FILE, request, context);
};
exports.searchFileTool = searchFileTool;
// Search Knowledge Base Tool
const searchKbTool = async (request, context) => {
    return await McpToolWrapper_1.McpToolWrapper.execute(ToolNames_1.McpToolNames.SEARCH_KB, request, context);
};
exports.searchKbTool = searchKbTool;
// Version Control Tool
const getVersionControlTool = async (request, context) => {
    return await McpToolWrapper_1.McpToolWrapper.execute(ToolNames_1.McpToolNames.VERSION_CONTROL, request, context);
};
exports.getVersionControlTool = getVersionControlTool;
//# sourceMappingURL=mcpTools.js.map