"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XenovaInferenceService = void 0;
const transformers_1 = require("@xenova/transformers");
const tsyringe_1 = require("tsyringe");
const settings_1 = require("../settings");
const types_1 = require("../types");
const utils_1 = require("../utils");
let XenovaInferenceService = class XenovaInferenceService {
    constructor(settings, logger) {
        this.settings = settings;
        this.logger = logger;
        if (settings.getLogLevel() === 'debug' || settings.getLogLevel() === 'trace') {
            transformers_1.env.backends.onnx.debug = true; // Enable ONNX debug mode
            transformers_1.env.backends.onnx.logLevel = 'verbose'; // Set ONNX log level to verbose
        }
        transformers_1.env.allowRemoteModels = settings.isModelRemoteDownloadEnabled();
        transformers_1.env.localModelPath = this.settings.getModelPath();
        transformers_1.env.cacheDir = this.settings.getModelPath();
        this.mutex = new utils_1.Mutex();
    }
    async initEmbed(settings, logger) {
        const unlock = await this.mutex.lock();
        try {
            if (!this.embedder) {
                this.embedder = await (0, transformers_1.pipeline)('feature-extraction', settings.getEmbeddingModelName(), {
                    quantized: true,
                });
                logger.debug(`Initialized embedding model: ${settings.getEmbeddingModelName()}}`);
            }
        }
        finally {
            unlock();
        }
    }
    async computeEmbeddings(text) {
        try {
            await this.initEmbed(this.settings, this.logger);
            const output = await this.embedder(text.toLowerCase(), {
                pooling: 'mean',
                normalize: true,
            });
            return Array.from(output.data);
        }
        catch (error) {
            this.logger.error('Error calculating embedding:', error);
            throw error;
        }
    }
    async rerank(query, candidates) {
        try {
            // make candidates reranked in batch with 20 for each batch
            this.logger.debug(`Reranking batch candidates for query: ${query}`);
            const batchSize = 10;
            let allScores = [];
            const tokenizer = await transformers_1.AutoTokenizer.from_pretrained(this.settings.getRerankingModelName(), {
                quantized: true,
            });
            const model = await transformers_1.AutoModelForSequenceClassification.from_pretrained(this.settings.getRerankingModelName(), { quantized: true });
            for (let i = 0; i < candidates.length; i += batchSize) {
                const batch = candidates.slice(i, i + batchSize).map((c) => c.toLowerCase());
                const inputs = tokenizer(new Array(batch.length).fill(query.toLowerCase()), {
                    text_pair: batch,
                    padding: true,
                    truncation: true,
                    max_length: 512,
                });
                const output = await model(inputs);
                const logits = output.logits || output[0];
                const rerankScores = logits.sigmoid().data;
                allScores = allScores.concat(batch.map((d, j) => ({ index: i + j, score: rerankScores[j] })));
                this.logger.trace(`Reranked for query: ${query} for ${allScores.length} candidates:\n---\n${allScores.map((s) => `[${s.score}] Candidate: ${candidates[s.index]}`).join('\n')}\n---\n`);
            }
            return allScores.sort((a, b) => b.score - a.score);
        }
        catch (error) {
            this.logger.error('Error reranking documents:', error);
            // throw error;
            return [];
        }
    }
};
exports.XenovaInferenceService = XenovaInferenceService;
exports.XenovaInferenceService = XenovaInferenceService = __decorate([
    (0, tsyringe_1.injectable)(),
    __param(0, (0, tsyringe_1.inject)(types_1.Beans.Settings)),
    __param(1, (0, tsyringe_1.inject)(types_1.Beans.Logger)),
    __metadata("design:paramtypes", [settings_1.Settings, Object])
], XenovaInferenceService);
//# sourceMappingURL=inference.js.map