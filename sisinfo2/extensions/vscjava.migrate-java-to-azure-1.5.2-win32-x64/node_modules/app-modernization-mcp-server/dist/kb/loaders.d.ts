import { Ignore } from 'ignore';
import { MCPLogger } from '../logger';
import { Path } from '../types';
export type Document = {
    pageContent: string;
    metadata: Record<string, any>;
};
export type DocumentEvents = {
    add: {
        filePath: string;
        doc: Document;
    };
    change: {
        filePath: string;
        doc: Document;
    };
    delete: {
        filePath: string;
    };
};
export interface DocumentWatcher {
    on<E extends keyof DocumentEvents>(event: E, listener: (args: DocumentEvents[E]) => void): void;
    watch(): void;
}
export interface DocumentLoader {
    load(): Promise<Document[]>;
}
export interface DocumentLoaderWithWatcher extends DocumentLoader, DocumentWatcher {
}
export type DocumentLoaderLike = DocumentLoader | DocumentLoaderWithWatcher;
export declare function isDocumentLoaderWithWatcher(loader: DocumentLoaderLike): loader is DocumentLoaderWithWatcher;
export type LoadersMapping = {
    [extension: string]: (filePath: string) => DocumentLoader;
};
export declare class FileLoader implements DocumentLoader {
    protected filePath: string;
    protected assignedMetadata: Record<string, any>;
    constructor(filePath: string, assignedMetadata: Record<string, any>);
    load(): Promise<Document[]>;
    protected readFile(filePath: string): Promise<string>;
}
export declare class DirectoryLoader implements DocumentLoader {
    private directoryPath;
    private loadersMapping;
    private ignore;
    private logger;
    constructor(directoryPath: string, loadersMapping: LoadersMapping, ignore: Ignore, logger: MCPLogger);
    load(): Promise<Document[]>;
}
export declare function decorateWithWatcher(directoryLoader: DirectoryLoader, logger: MCPLogger): DocumentLoaderWithWatcher;
export declare class CompositeLoader implements DocumentLoaderWithWatcher {
    loaders: DocumentLoaderLike[];
    private constructor();
    on<E extends keyof DocumentEvents>(event: E, listener: (args: DocumentEvents[E]) => void): void;
    watch(): void;
    load(): Promise<Document[]>;
    static from(...loaders: DocumentLoaderLike[]): CompositeLoader;
}
export interface DirectoryLoaderOptions {
    watch?: boolean;
}
export declare function createLoaderFromPaths(logger: MCPLogger, options: DirectoryLoaderOptions, ...paths: Path[]): DocumentLoaderLike;
export declare function createLoadesMapping(assignedMetadata: Record<string, any>): LoadersMapping;
//# sourceMappingURL=loaders.d.ts.map