"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MavenBuildTool = void 0;
const Environment_1 = require("./context/Environment");
const JavaBuildTool_1 = require("./JavaBuildTool");
const testreport_1 = require("./test/testreport");
const maven_1 = require("./utils/maven");
class MavenBuildTool extends JavaBuildTool_1.JavaBuildTool {
    constructor(mvn = 'mvn', repoPath, env = Environment_1.Environment.Local, cmdInfo, logger, signal) {
        super(repoPath);
        this.mvn = mvn;
        this.env = env;
        this.cmdInfo = cmdInfo;
        this.logger = logger;
        this.signal = signal;
    }
    async getDirectDependencies() {
        const logger = this.logger || console;
        return (0, maven_1.mvnDirectDependencies)(this.repoPath, this.mvn, this.env, logger);
    }
    async compile() {
        var _a, _b;
        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.info(`[MavenBuildTool] Getting build errors of ${this.repoPath} using Maven`);
        // -fn (fail-never) flag is used to ensure we get all the errors. We pass -q to suppress output. However, if the build fails, we still get something.
        const cmdArgs = [
            '-Dencoding=UTF-8',
            'clean',
            'test-compile',
            '-B',
            '-fn',
            '-Dossindex.failOnError=false',
            '-Dossindex.skip=true',
            '-Dlicense.skip=true',
            '-Dcheckstyle.skip=true',
            '-DskipLicenseCheck=true',
            '-DskipCheckStyle=true',
        ];
        const option = {
            logger: this.logger,
            exitOnError: false,
            throwIfFail: true,
            signal: this.signal,
        };
        const raw = await (0, maven_1.runMvnCmd)(this.repoPath, this.mvn, cmdArgs, this.env, this.logger, this.cmdInfo, option);
        (_b = this.logger) === null || _b === void 0 ? void 0 : _b.info(`[MavenBuildTool] parsing compilation errors.`);
        return await (0, maven_1.parseMavenOutput)(this.repoPath, raw);
    }
    async test() {
        var _a, _b, _c;
        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.info(`[MavenBuildTool] Running test cases of ${this.repoPath} using Maven`);
        // -fn (fail-never) flag is used to ensure we get all the errors. We pass -q to suppress output. However, if the build fails, we still get something.
        const cmdArgs = [
            '-Dencoding=UTF-8',
            'clean',
            'test',
            '-q',
            '-B',
            '-fn',
            '-Dossindex.failOnError=false',
            '-Dossindex.skip=true',
            '-Dlicense.skip=true',
            '-Dcheckstyle.skip=true',
            '-DskipLicenseCheck=true',
            '-DskipCheckStyle=true',
        ];
        const option = {
            logger: this.logger,
            exitOnError: false,
            throwIfFail: false,
            signal: this.signal,
        };
        const raw = await (0, maven_1.runMvnCmd)(this.repoPath, this.mvn, cmdArgs, this.env, this.logger, this.cmdInfo, option);
        const compileErrors = (await (0, maven_1.parseMavenOutput)(this.repoPath, raw)).details || [];
        (_b = this.logger) === null || _b === void 0 ? void 0 : _b.info(`[MavenBuildTool] loading surefire reports.`);
        const reports = await (0, testreport_1.getSurefireReports)(this.repoPath);
        (_c = this.logger) === null || _c === void 0 ? void 0 : _c.info(`[MavenBuildTool] summarizing surefire reports.`);
        const result = (0, testreport_1.summarizeSurefireReports)(reports);
        result.compileErrors = compileErrors;
        return result;
    }
}
exports.MavenBuildTool = MavenBuildTool;
//# sourceMappingURL=MavenBuildTool.js.map