"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSurefireReports = getSurefireReports;
exports.summarizeSurefireReports = summarizeSurefireReports;
const fast_xml_parser_1 = require("fast-xml-parser");
const fs_1 = __importDefault(require("fs"));
const glob_1 = require("glob");
const path_1 = __importDefault(require("path"));
async function getSurefireReports(rootPath) {
    // https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd
    let surefireReportFiles = await (0, glob_1.glob)('**/target/surefire-reports/TEST-*.xml', {
        ignore: 'src/**',
        nodir: true,
        cwd: rootPath,
    });
    if (!surefireReportFiles || surefireReportFiles.length === 0) {
        surefireReportFiles = await (0, glob_1.glob)('**/build/test-results/test/TEST-*.xml', {
            ignore: 'src/**',
            nodir: true,
            cwd: rootPath,
        });
    }
    if (!(surefireReportFiles === null || surefireReportFiles === void 0 ? void 0 : surefireReportFiles.length)) {
        return [];
    }
    const parser = new fast_xml_parser_1.XMLParser({
        ignoreAttributes: false,
        attributeNamePrefix: '',
        allowBooleanAttributes: true,
        textNodeName: 'content',
    });
    return Promise.all(surefireReportFiles.map(async (file) => {
        const content = await fs_1.default.promises.readFile(path_1.default.join(rootPath, file), 'utf8');
        const report = parser.parse(content);
        const testsuite = report.testsuite;
        const testcases = !testsuite.testcase || Array.isArray(testsuite.testcase)
            ? testsuite.testcase
            : [testsuite.testcase];
        return {
            name: testsuite.name,
            time: testsuite.time ? Number(testsuite.time) : 0,
            tests: testsuite.tests ? Number(testsuite.tests) : 0,
            errors: testsuite.errors ? Number(testsuite.errors) : 0,
            skipped: testsuite.skipped ? Number(testsuite.skipped) : 0,
            failures: testsuite.failures ? Number(testsuite.failures) : 0,
            group: testsuite.group,
            testcases: testcases === null || testcases === void 0 ? void 0 : testcases.map((testcase) => {
                var _a, _b, _c, _d, _e, _f;
                return ({
                    name: testcase.name,
                    classname: testcase.classname,
                    group: testcase.group,
                    time: testcase.time ? Number(testcase.time) : 0,
                    failures: !testcase.failure || Array.isArray(testcase.failure)
                        ? ((_a = testcase.failure) !== null && _a !== void 0 ? _a : [])
                        : [testcase.failure],
                    rerunFailures: !testcase.rerunFailure || Array.isArray(testcase.rerunFailure)
                        ? ((_b = testcase.rerunFailure) !== null && _b !== void 0 ? _b : [])
                        : [testcase.rerunFailure],
                    flakyFailures: !testcase.flakyFailure || Array.isArray(testcase.flakyFailure)
                        ? ((_c = testcase.flakyFailure) !== null && _c !== void 0 ? _c : [])
                        : [testcase.flakyFailure],
                    skipped: testcase.skipped,
                    errors: !testcase.error || Array.isArray(testcase.error)
                        ? ((_d = testcase.error) !== null && _d !== void 0 ? _d : [])
                        : [testcase.error],
                    rerunErrors: !testcase.rerunError || Array.isArray(testcase.rerunError)
                        ? ((_e = testcase.rerunError) !== null && _e !== void 0 ? _e : [])
                        : [testcase.rerunError],
                    flakyErrors: !testcase.flakyError || Array.isArray(testcase.flakyError)
                        ? ((_f = testcase.flakyError) !== null && _f !== void 0 ? _f : [])
                        : [testcase.flakyError],
                });
            }),
        };
    }));
}
function summarizeSurefireReports(reports) {
    const errors = [];
    const failures = [];
    const summary = { tests: 0, failures: 0, errors: 0, skipped: 0 };
    reports.forEach((report) => {
        var _a;
        summary.tests += report.tests;
        summary.failures += report.failures;
        summary.errors += report.errors;
        summary.skipped += report.skipped;
        (_a = report.testcases) === null || _a === void 0 ? void 0 : _a.forEach((testcase) => {
            var _a, _b;
            ((_a = testcase.errors) !== null && _a !== void 0 ? _a : []).forEach((e) => {
                errors.push({
                    errorMessage: e.message,
                    raw: e.content,
                    testcaseName: testcase.name,
                });
            });
            ((_b = testcase.failures) !== null && _b !== void 0 ? _b : []).forEach((f) => {
                failures.push({
                    errorMessage: f.message,
                    raw: f.content,
                    testcaseName: testcase.name,
                });
            });
        });
    });
    return { errors, failures, summary, reports };
}
//# sourceMappingURL=testreport.js.map