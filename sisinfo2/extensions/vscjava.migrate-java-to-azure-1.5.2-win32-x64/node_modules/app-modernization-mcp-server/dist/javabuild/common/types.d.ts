export declare enum LogLevel {
    INFO = "INFO",
    ERROR = "ERROR",
    WARN = "WARN"
}
/**
 * Options for configuring log output.
 */
export interface ILogOpts {
    appendNewLine?: boolean;
    includeTimestamp?: boolean;
    includeLevel?: boolean;
}
/**
 * Interface for logging messages.
 */
export interface ILogger {
    log(message: string, level: LogLevel, opts?: ILogOpts): void;
    warn(message: string, opts?: ILogOpts): void;
    error(message: string, opts?: ILogOpts): void;
    info(message: string, opts?: ILogOpts): void;
}
/**
 * Interface for logging diagnostics messages.
 * This is used for logging messages that are not shown to the user.
 */
export interface IDiagnosticsLogger {
    /**
     * Logs a debug message.
     * @param message The message to log.
     * @param scopes The scopes to log the message under. These are ordered list of scopes that the message belongs to.
     * @param tags The tags to log the message under. These are ordered list of tags that the message belongs to.
     */
    debug(message: string, tags?: string[], scopes?: string[]): void;
}
export type EnvVars = {
    [key: string]: string;
};
/**
 * A cancellation token is passed to an asynchronous or long running
 * operation to request cancellation
 */
export interface CancellationToken {
    /**
     * Is `true` when the token has been cancelled, `false` otherwise.
     */
    isCancellationRequested: boolean;
    /**
     * Is `true` when the cancellation has been handled, `false` otherwise.
     */
    isCancellationHandled?: boolean;
}
//# sourceMappingURL=types.d.ts.map