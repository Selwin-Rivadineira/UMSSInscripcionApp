import { DependencyTag, IDependency, TDependenciesDiff, TDependency } from './types';
export declare class Dependency implements IDependency {
    readonly groupId: string;
    readonly artifactId: string;
    readonly version: string;
    readonly name?: string;
    readonly description?: string;
    readonly tags?: Array<DependencyTag>;
    readonly type?: string;
    readonly classifier?: string;
    readonly scope?: string;
    readonly module?: string;
    constructor(dep: TDependency);
    /**
     * Parses a Maven dependency coordinate string and returns an `IJavaDep` object.
     *
     * The Maven dependency coordinate string should follow the format:
     * `groupId:artifactId:type[:classifier]:version[:scope]`.
     *
     * @param id - The Maven dependency coordinate string to parse.
     * @returns An `IJavaDep` object if the coordinate string is valid, otherwise `undefined`.
     *
     * @example
     *
     * Input: com.example:library:jar:classifier:1.0.0:compile
     *
     * Output:
     *  | Group | Value       | Description                        | Example     |
     *  |-------|-------------|------------------------------------|-------------|
     *  | 1     | groupId*    | Matches the group ID.              | com.example |
     *  | 2     | artifactId* | Matches the artifact ID.           | library     |
     *  | 3     | type*       | Matches the type.                  | jar         |
     *  | 5     | classifier  | (Optional) Matches the classifier. | classifier  |
     *  | 6     | version     | Matches the version.               | 1.0.0       |
     *  | 8     | scope       | (Optinal) Matches the scope.       | compile     |
     */
    static parse(coordinate: string, module?: string): Dependency | undefined;
    get key(): string;
    static key(dep: TDependency): string;
    get gav(): string;
    static gav(dep: TDependency): string;
    get coordinate(): string;
    static coordinate(dep: TDependency): string;
    /**
     * called by JSON.stringify when the object is JSONified
     * @returns Returns a JSON representation of the dependency.
     */
    toJSON(): IDependency;
    toString(): string;
    static diff(beforeDeps: TDependency[], afterDeps: TDependency[]): TDependenciesDiff;
}
//# sourceMappingURL=Dependency.d.ts.map