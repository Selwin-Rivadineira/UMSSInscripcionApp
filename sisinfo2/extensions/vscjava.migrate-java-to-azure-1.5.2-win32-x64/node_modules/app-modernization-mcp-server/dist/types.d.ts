import { RequestHandlerExtra } from '@modelcontextprotocol/sdk/shared/protocol';
import { ServerNotification, ServerRequest } from '@modelcontextprotocol/sdk/types';
import { z } from 'zod';
export declare const FORMULA_EXTENSION = ".formula";
export declare const PROMPT_EXTENSION = ".prompt";
export declare const MARKDOWN_EXTENSION = ".md";
export declare const METADATA_EXTENSION = ".metadata";
export declare const Beans: {
    Settings: string;
    Logger: string;
    ToolsConfig: string;
    CustomDocumentLoader: string;
    MsftDocumentLoader: string;
    DocumentLoader: string;
    MarkdownLoader: string;
    EmbeddingsProvider: string;
    Reranker: string;
    TelemetryReporter: string;
    TelemetryService: string;
    McpEventEmitter: string;
    KBStore: string;
    KBLoaders: string;
    KBVectorStore: string;
};
export interface PathWithMetadata extends HasMetadata {
    filePath: string;
}
export type Path = string | PathWithMetadata;
export type SearchOption<T> = (t: T) => boolean;
export type Option<T> = (t: T) => void;
export type ToolsConfig = {
    telemetryProfile: string;
    enablement: {
        [key: string]: boolean;
    };
};
export declare const ContextAware: z.ZodObject<{
    sessionId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    sessionId: string;
}, {
    sessionId: string;
}>;
export type ContextAware = z.infer<typeof ContextAware>;
export type McpContext = {
    correlationId: string;
    requestId: string;
    signal?: AbortSignal;
    sendMessage?: (message: string, details?: any) => Promise<void>;
    reportProgress?: (message: string, progress: number) => Promise<void>;
    sendRequest?: (systemMessage: string, userMessage: string) => Promise<string>;
};
export declare const HasMetadataSchema: z.ZodObject<{
    metadata: z.ZodEffects<z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>, Record<string, any>, unknown>;
}, "strip", z.ZodTypeAny, {
    metadata: Record<string, any>;
}, {
    metadata?: unknown;
}>;
export type HasMetadata = z.infer<typeof HasMetadataSchema>;
export declare const FormulaStepSchema: z.ZodObject<{
    type: z.ZodEnum<["diff", "instruction"]>;
    description: z.ZodString;
    content: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "diff" | "instruction";
    description: string;
    content: string;
}, {
    type: "diff" | "instruction";
    description: string;
    content: string;
}>;
export type FormulaStep = z.infer<typeof FormulaStepSchema>;
export declare const CodeLocationSchema: z.ZodObject<{
    type: z.ZodEnum<["textsearch", "condition-textsearch"]>;
    filePattern: z.ZodOptional<z.ZodString>;
    codePattern: z.ZodOptional<z.ZodString>;
    fileToExclude: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "textsearch" | "condition-textsearch";
    filePattern?: string | undefined;
    codePattern?: string | undefined;
    fileToExclude?: string | undefined;
}, {
    type: "textsearch" | "condition-textsearch";
    filePattern?: string | undefined;
    codePattern?: string | undefined;
    fileToExclude?: string | undefined;
}>;
export type CodeLocation = z.infer<typeof CodeLocationSchema>;
export declare const FormulaSchema: z.ZodObject<{
    metadata: z.ZodEffects<z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>, Record<string, any>, unknown>;
} & {
    name: z.ZodString;
    description: z.ZodString;
    codeLocation: z.ZodObject<{
        type: z.ZodEnum<["textsearch", "condition-textsearch"]>;
        filePattern: z.ZodOptional<z.ZodString>;
        codePattern: z.ZodOptional<z.ZodString>;
        fileToExclude: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "textsearch" | "condition-textsearch";
        filePattern?: string | undefined;
        codePattern?: string | undefined;
        fileToExclude?: string | undefined;
    }, {
        type: "textsearch" | "condition-textsearch";
        filePattern?: string | undefined;
        codePattern?: string | undefined;
        fileToExclude?: string | undefined;
    }>;
    customPrompt: z.ZodOptional<z.ZodString>;
    steps: z.ZodArray<z.ZodObject<{
        type: z.ZodEnum<["diff", "instruction"]>;
        description: z.ZodString;
        content: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "diff" | "instruction";
        description: string;
        content: string;
    }, {
        type: "diff" | "instruction";
        description: string;
        content: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    metadata: Record<string, any>;
    description: string;
    name: string;
    codeLocation: {
        type: "textsearch" | "condition-textsearch";
        filePattern?: string | undefined;
        codePattern?: string | undefined;
        fileToExclude?: string | undefined;
    };
    steps: {
        type: "diff" | "instruction";
        description: string;
        content: string;
    }[];
    customPrompt?: string | undefined;
}, {
    description: string;
    name: string;
    codeLocation: {
        type: "textsearch" | "condition-textsearch";
        filePattern?: string | undefined;
        codePattern?: string | undefined;
        fileToExclude?: string | undefined;
    };
    steps: {
        type: "diff" | "instruction";
        description: string;
        content: string;
    }[];
    metadata?: unknown;
    customPrompt?: string | undefined;
}>;
export type Formula = z.infer<typeof FormulaSchema>;
export declare const PromptSchema: z.ZodObject<{
    metadata: z.ZodEffects<z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>, Record<string, any>, unknown>;
} & {
    content: z.ZodString;
}, "strip", z.ZodTypeAny, {
    metadata: Record<string, any>;
    content: string;
}, {
    content: string;
    metadata?: unknown;
}>;
export type Prompt = z.infer<typeof PromptSchema>;
export declare const FormulaGroupSchema: z.ZodObject<{
    id: z.ZodString;
    displayName: z.ZodString;
    description: z.ZodString;
}, "strip", z.ZodTypeAny, {
    description: string;
    id: string;
    displayName: string;
}, {
    description: string;
    id: string;
    displayName: string;
}>;
export type FormulaGroup = z.infer<typeof FormulaGroupSchema>;
export declare const FormulaMetadataSchema: z.ZodObject<{
    metadata: z.ZodEffects<z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>, Record<string, any>, unknown>;
} & {
    group: z.ZodObject<{
        id: z.ZodString;
        displayName: z.ZodString;
        description: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        description: string;
        id: string;
        displayName: string;
    }, {
        description: string;
        id: string;
        displayName: string;
    }>;
    tags: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    metadata: Record<string, any>;
    group: {
        description: string;
        id: string;
        displayName: string;
    };
    tags: string[];
}, {
    group: {
        description: string;
        id: string;
        displayName: string;
    };
    tags: string[];
    metadata?: unknown;
}>;
export type FormulaMetadata = z.infer<typeof FormulaMetadataSchema>;
export declare const KBSchema: z.ZodObject<{
    metadata: z.ZodEffects<z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>, Record<string, any>, unknown>;
} & {
    id: z.ZodString;
    title: z.ZodString;
    description: z.ZodString;
    content: z.ZodOptional<z.ZodString>;
    disabled: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    metadata: Record<string, any>;
    description: string;
    id: string;
    title: string;
    content?: string | undefined;
    disabled?: boolean | undefined;
}, {
    description: string;
    id: string;
    title: string;
    metadata?: unknown;
    content?: string | undefined;
    disabled?: boolean | undefined;
}>;
export type KB = z.infer<typeof KBSchema>;
export type KBWithScore = {
    item: KB;
    score: number;
};
export interface KbAssessmentToolRequest {
    workspacePath: string;
}
export declare class TypeTest {
    static isWorkspacePathAware(obj: any): obj is {
        workspacePath: string;
    };
    static isContextAware(obj: any): obj is ContextAware;
    static isRequestHandlerExtra(obj: any): obj is RequestHandlerExtra<ServerRequest, ServerNotification>;
}
export type ServerType = 'javaMigration' | 'dotnetMigration' | 'codetocloud';
//# sourceMappingURL=types.d.ts.map