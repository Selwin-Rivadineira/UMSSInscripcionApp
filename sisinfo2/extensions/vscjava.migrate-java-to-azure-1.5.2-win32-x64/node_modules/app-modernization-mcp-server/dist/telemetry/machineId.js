"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMachineID = getMachineID;
const macaddress = __importStar(require("macaddress"));
const utils_1 = require("../utils");
const invalidMacAddress = ['00:00:00:00:00:00', 'ff:ff:ff:ff:ff:ff', 'ac:de:48:00:11:22'];
function validateMacAddress(mac) {
    if (!mac)
        return false;
    const tempCandidate = mac.toLowerCase().replace(/-/g, ':');
    return !invalidMacAddress.includes(tempCandidate);
}
async function getMac() {
    try {
        const all = await macaddress.all();
        for (const iface of Object.values(all)) {
            const mac = iface.mac;
            if (mac && validateMacAddress(mac)) {
                return mac;
            }
        }
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
    }
    catch (err) {
        // ignore
    }
    return '';
}
async function getMacMachineID() {
    const mac = await getMac();
    if (mac) {
        return (0, utils_1.hashString)(mac);
    }
    return '';
}
async function getMachineID() {
    const machineID = await getMacMachineID();
    if (machineID) {
        return machineID;
    }
    return '';
}
//# sourceMappingURL=machineId.js.map