import { MCPLogger } from '../logger';
import { Settings } from '../settings';
export type TelemetryBoolean = 'true' | 'false';
export type McpPropertyMap = JavaPropertyMap;
export type successOrFail = {
    result: 'success';
} | {
    result: 'fail';
    error: string;
    stack: string;
};
export type correlate = {
    correlationId: string;
    requestId: string;
};
export type formula = {
    id: string;
    formula: string;
    formulaGroup: string;
    isMicrosoft: TelemetryBoolean;
};
export type telemetryKb = {
    id: string;
    title: string;
    group: string;
    isMicrosoft: TelemetryBoolean;
};
export type app = {
    hashedAppId: string;
    hashedProjectId: string;
    packagingType: string;
    javaVersion: string;
    springBootVersion: string;
    buildTool: string;
};
export type JavaPropertyMap = {
    'java/migrateassistant/appcat/check': {
        properties: successOrFail & {
            workspacePathExists?: TelemetryBoolean | 'N/A';
            isJavaProject?: TelemetryBoolean | 'N/A';
            projectLanguages?: string;
            appCatVersion?: string;
        };
        measurements: never;
    };
    'java/migrateassistant/appcat/install': {
        properties: successOrFail;
        measurements: {
            duration: number;
        };
    };
    'java/migrateassistant/appcat/scan': {
        properties: successOrFail & {
            exitCode?: string;
        };
        measurements: {
            duration: number;
        };
    };
    'java/migrateassistant/task/run': {
        properties: successOrFail & app & correlate & {
            scenario?: string;
            kbId?: string;
        };
        measurements: never;
    };
    'java/migrateassistant/kb/load': {
        properties: successOrFail & correlate;
        measurements: {
            duration: number;
            loaded: number;
        };
    };
    'java/migrateassistant/kb/get': {
        properties: successOrFail & correlate & {
            kbId: string;
        };
        measurements: {
            duration: number;
            hit: number;
        };
    };
    'java/migrateassistant/kb/list': {
        properties: successOrFail & correlate;
        measurements: {
            duration: number;
            hit: number;
        };
    };
    'java/migrateassistant/kb/search': {
        properties: successOrFail & correlate & {
            query: string;
        };
        measurements: {
            duration: number;
            total: number;
            hit: number;
            reranked: number;
            mean: number;
            median: number;
            stddev: number;
            min: number;
            max: number;
        };
    };
    'java/migrateassistant/formula/apply': {
        properties: successOrFail & formula & app & correlate;
        measurements: never;
    };
    'java/migrateassistant/file/search': {
        properties: successOrFail & correlate & {
            query: string;
            includePattern: string;
        };
        measurements: {
            hit: number;
            duration: number;
        };
    };
    'java/migrateassistant/kb/applied': {
        properties: successOrFail & telemetryKb & app & correlate;
        measurements: never;
    };
    'java/migrateassistant/tool/invoke': {
        properties: successOrFail & correlate & {
            invokedToolId: string;
        };
        measurements: {
            duration: number;
        };
    };
    'java/migrateassistant/buildFix/output': {
        properties: correlate & app & {
            result: string;
            message: string;
        };
        measurements: never;
    };
    'java/migrateassistant/buildFix/build': {
        properties: successOrFail & app & correlate;
        measurements: never;
    };
    'java/migrateassistant/testFix/output': {
        properties: correlate & app & {
            result: string;
            message: string;
        };
        measurements: never;
    };
    'java/migrateassistant/testFix/test': {
        properties: successOrFail & app & correlate;
        measurements: {
            numberOfTestErrors: number;
        };
    };
    'java/migrateassistant/cveFix/output': {
        properties: correlate & app & {
            result: string;
            message: string;
        };
        measurements: never;
    };
    'java/migrateassistant/consistency/output': {
        properties: correlate & app & {
            result: string;
            message: string;
        };
        measurements: {
            critical: number;
            major: number;
            minor: number;
        };
    };
    'java/migrateassistant/completeness/output': {
        properties: correlate & app & {
            result: string;
            message: string;
        };
        measurements: never;
    };
    'java/migrateassistant/versioncontrol/output': {
        properties: correlate & app & {
            versionControlSystem: string;
            commitCount: number;
            branchName: string;
            hasUncommittedChanges: boolean;
        };
        measurements: never;
    };
    'java/migrateassistant/versioncontrol/commit': {
        properties: correlate & app & {
            versionControlSystem: string;
            commitId: string;
            isGithubcom: boolean;
        };
        measurements: never;
    };
    'java/migrateassistant/versioncontrol/fail': {
        properties: correlate & app & {
            versionControlSystem: string;
            action: string;
            error: string;
        };
        measurements: never;
    };
};
export interface ITelemetryService {
    /**
     * Sends a telemetry event.
     * @param eventName The name of the event.
     * @param properties The properties of the event.
     * @param measurements The measurements of the event.
     */
    sendTelemetryEvent<E extends keyof McpPropertyMap>(eventName: E, properties?: McpPropertyMap[E]['properties'], measurements?: McpPropertyMap[E]['measurements']): Promise<void>;
}
export interface ITelemetryReporter {
    sendTelemetryEvent(eventName: string, properties?: Record<string, string>, measurements?: Record<string, number>): void;
}
export declare class TelemetryService implements ITelemetryService {
    private readonly telemetryReporters;
    private staticProperties?;
    constructor(telemetryReporters: ITelemetryReporter[], staticProperties?: {
        [key: string]: string | Promise<string>;
    } | undefined);
    sendTelemetryEvent<E extends keyof McpPropertyMap>(eventName: E, properties?: McpPropertyMap[E]['properties'], measurements?: McpPropertyMap[E]['measurements']): Promise<void>;
}
export declare class LoggerTelemetryReporter implements ITelemetryReporter {
    private readonly logger;
    constructor(logger: MCPLogger);
    sendTelemetryEvent(eventName: string, properties?: Record<string, string>, measurements?: Record<string, number>): void;
}
export declare class ApplicationInsightsTelemetryReporter implements ITelemetryReporter {
    private settings;
    private logger;
    private client;
    constructor(settings: Settings, logger: MCPLogger);
    sendTelemetryEvent(eventName: string, properties?: {
        [key: string]: string;
    }, measurements?: {
        [key: string]: number;
    }): void;
}
//# sourceMappingURL=telemetry.d.ts.map