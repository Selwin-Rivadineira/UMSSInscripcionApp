import { MCPLogger } from '../logger';
import { KB, McpContext } from '../types';
import { ITelemetryService, TelemetryBoolean } from './telemetry';
export type kbSearchPerfMeter = {
    total: number;
    hit: number;
    reranked: number;
    mean: number;
    median: number;
    stddev: number;
    min: number;
    max: number;
};
export type McpEventsMap = {
    appcat_check_success: {
        workspacePathExists?: TelemetryBoolean | 'N/A';
        isJavaProject?: TelemetryBoolean | 'N/A';
        projectLanguages?: string;
        appCatVersion?: string;
    };
    appcat_check_fail: {
        workspacePathExists?: TelemetryBoolean | 'N/A';
        isJavaProject?: TelemetryBoolean | 'N/A';
        projectLanguages?: string;
        appCatVersion?: string;
        error: Error;
    };
    appcat_scan_success: {
        exitCode?: string;
        duration: number;
    };
    appcat_scan_fail: {
        error: Error;
        exitCode?: string;
        duration: number;
    };
    appcat_install_success: {
        duration: number;
    };
    appcat_install_fail: {
        error: Error;
        duration: number;
    };
    run_task_success: {
        scenario?: string;
        kbId?: string;
        workspacePath: string;
    };
    run_task_fail: {
        scenario?: string;
        kbId?: string;
        error: Error;
        workspacePath: string;
    };
    kb_load_success: {
        duration: number;
        loaded: number;
    };
    kb_load_fail: {
        error: Error;
        duration: number;
        loaded: number;
    };
    kb_get_success: {
        kbId: string;
        duration: number;
        hit: number;
    };
    kb_get_fail: {
        error: Error;
        kbId: string;
        duration: number;
        hit: number;
    };
    kb_list_success: {
        duration: number;
        hit: number;
    };
    kb_list_fail: {
        error: Error;
        duration: number;
        hit: number;
    };
    kb_search_success: {
        query: string;
        duration: number;
        perfMeter: kbSearchPerfMeter;
    };
    kb_search_fail: {
        error: Error;
        query: string;
        duration: number;
        perfMeter: kbSearchPerfMeter;
    };
    kb_apply_success: {
        kb: KB;
        workspacePath: string;
    };
    kb_apply_fail: {
        error: Error;
        kb: KB;
        workspacePath: string;
    };
    file_search_success: {
        query: string;
        includePattern: string;
        hit: number;
        duration: number;
    };
    file_search_fail: {
        query: string;
        includePattern: string;
        error: Error;
        duration: number;
    };
    kb_applied_success: {
        kb: KB;
        workspacePath: string;
    };
    kb_applied_fail: {
        error: Error;
        kb: KB;
        workspacePath: string;
    };
    tool_invoke_success: {
        invokedToolId: string;
        duration: number;
    };
    tool_invoke_fail: {
        error: Error;
        invokedToolId: string;
        duration: number;
    };
    build_fix_info: {
        jdkConfigured: boolean;
        buildToolType: string;
        isWrapper: boolean;
        buildToolConfigured: boolean;
        message: string;
        workspacePath: string;
    };
    build_fix_result: {
        result: string;
        message: string;
        workspacePath: string;
    };
    build_success: {
        workspacePath: string;
    };
    build_fail: {
        error: Error;
        workspacePath: string;
        moduleBuildStatuses?: Map<string, boolean>;
    };
    test_fix_result: {
        result: string;
        message: string;
        workspacePath: string;
    };
    test_success: {
        workspacePath: string;
        numberOfTestErrors: number;
    };
    test_fail: {
        error: Error;
        workspacePath: string;
        numberOfTestErrors: number;
    };
    cve_fix_result: {
        result: string;
        message: string;
        workspacePath: string;
    };
    consistency_check_result: {
        result: string;
        message: string;
        workspacePath: string;
        critical: number;
        major: number;
        minor: number;
    };
    version_control_result: {
        versionControlSystem: string;
        commitCount: number;
        branchName: string;
        hasUncommittedChanges: boolean;
        workspacePath: string;
    };
    version_control_commit: {
        versionControlSystem: string;
        commitId: string;
        workspacePath: string;
        isGithubcom: boolean;
    };
    version_control_fail: {
        error: string;
        workspacePath: string;
        action: string;
        versionControlSystem: string;
    };
    completeness_check_result: {
        result: string;
        message: string;
        workspacePath: string;
    };
};
export interface McpEventEmitter {
    on<K extends keyof McpEventsMap>(event: K, listener: (context: McpContext, args: McpEventsMap[K]) => Promise<void>): this;
    emit<K extends keyof McpEventsMap>(event: K, args: McpEventsMap[K], context?: McpContext): boolean;
}
export declare class DummyMcpEventEmitter implements McpEventEmitter {
    on<K extends keyof McpEventsMap>(_event: K, _listener: (context: McpContext, args: McpEventsMap[K]) => Promise<void>): this;
    emit<K extends keyof McpEventsMap>(_event: K, _args: McpEventsMap[K]): boolean;
}
export declare class JavaTelemetryEventEmitter implements McpEventEmitter {
    private telemetryService;
    private logger;
    private emitter;
    constructor(telemetryService: ITelemetryService, logger: MCPLogger);
    on<K extends keyof McpEventsMap>(event: K, listener: (context: McpContext, args: McpEventsMap[K]) => Promise<void>): this;
    emit<K extends keyof McpEventsMap>(event: K, args: McpEventsMap[K], context?: McpContext): boolean;
}
//# sourceMappingURL=event.d.ts.map