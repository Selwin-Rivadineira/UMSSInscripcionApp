var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html } from 'lit';
import { property, queryAssignedElements, state } from 'lit/decorators.js';
import { customElement, VscElement } from '../includes/VscElement.js';
import styles from './vscode-radio-group.styles.js';
/**
 * @tag vscode-radio-group
 *
 * @fires {Event} change - Dispatched when a child radio button is changed.
 */
let VscodeRadioGroup = class VscodeRadioGroup extends VscElement {
    constructor() {
        super(...arguments);
        this.variant = 'horizontal';
        /** @internal */
        this.role = 'radiogroup';
        this._focusedRadio = -1;
        this._checkedRadio = -1;
        this._firstContentLoaded = false;
        this._onKeyDownBound = this._onKeyDown.bind(this);
    }
    connectedCallback() {
        super.connectedCallback();
        this.addEventListener('keydown', this._onKeyDownBound);
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.removeEventListener('keydown', this._onKeyDownBound);
    }
    _uncheckPreviousChecked(prevChecked, prevFocused) {
        if (prevChecked !== -1) {
            this._radios[prevChecked].checked = false;
        }
        if (prevFocused !== -1) {
            this._radios[prevFocused].tabIndex = -1;
        }
    }
    _afterCheck() {
        this._focusedRadio = this._checkedRadio;
        this._radios[this._checkedRadio].checked = true;
        this._radios[this._checkedRadio].tabIndex = 0;
        this._radios[this._checkedRadio].focus();
    }
    _checkPrev() {
        const prevChecked = this._radios.findIndex((r) => r.checked);
        const prevFocused = this._radios.findIndex((r) => r.focused);
        const startPos = prevFocused !== -1 ? prevFocused : prevChecked;
        this._uncheckPreviousChecked(prevChecked, prevFocused);
        if (startPos === -1) {
            this._checkedRadio = this._radios.length - 1;
        }
        else if (startPos - 1 >= 0) {
            this._checkedRadio = startPos - 1;
        }
        else {
            this._checkedRadio = this._radios.length - 1;
        }
        this._afterCheck();
    }
    _checkNext() {
        const prevChecked = this._radios.findIndex((r) => r.checked);
        const prevFocused = this._radios.findIndex((r) => r.focused);
        const startPos = prevFocused !== -1 ? prevFocused : prevChecked;
        this._uncheckPreviousChecked(prevChecked, prevFocused);
        if (startPos === -1) {
            this._checkedRadio = 0;
        }
        else if (startPos + 1 < this._radios.length) {
            this._checkedRadio = startPos + 1;
        }
        else {
            this._checkedRadio = 0;
        }
        this._afterCheck();
    }
    _onKeyDown(ev) {
        const { key } = ev;
        const listenedKeys = ['ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown'];
        if (listenedKeys.includes(key)) {
            ev.preventDefault();
        }
        if (key === 'ArrowRight' || key === 'ArrowDown') {
            this._checkNext();
        }
        if (key === 'ArrowLeft' || key === 'ArrowUp') {
            this._checkPrev();
        }
    }
    _onChange(ev) {
        const clickedIndex = this._radios.findIndex((r) => r === ev.target);
        if (clickedIndex !== -1) {
            if (this._focusedRadio !== -1) {
                this._radios[this._focusedRadio].tabIndex = -1;
            }
            if (this._checkedRadio !== -1 && this._checkedRadio !== clickedIndex) {
                this._radios[this._checkedRadio].checked = false;
            }
            this._focusedRadio = clickedIndex;
            this._checkedRadio = clickedIndex;
            this._radios[clickedIndex].tabIndex = 0;
        }
    }
    _onSlotChange() {
        if (!this._firstContentLoaded) {
            const autoFocusedRadio = this._radios.findIndex((r) => r.autofocus);
            if (autoFocusedRadio > -1) {
                this._focusedRadio = autoFocusedRadio;
            }
            this._firstContentLoaded = true;
        }
        this._radios.forEach((r, i) => {
            // if _focusedRadio is not set, the first radio should be focusable
            if (this._focusedRadio > -1) {
                r.tabIndex = i === this._focusedRadio ? 0 : -1;
            }
            else {
                r.tabIndex = i === 0 ? 0 : -1;
            }
        });
    }
    render() {
        return html `
      <div class="wrapper">
        <slot
          @slotchange=${this._onSlotChange}
          @vsc-change=${this._onChange}
        ></slot>
      </div>
    `;
    }
};
VscodeRadioGroup.styles = styles;
__decorate([
    property({ reflect: true })
], VscodeRadioGroup.prototype, "variant", void 0);
__decorate([
    property({ reflect: true })
], VscodeRadioGroup.prototype, "role", void 0);
__decorate([
    queryAssignedElements({ selector: 'vscode-radio' })
], VscodeRadioGroup.prototype, "_radios", void 0);
__decorate([
    state()
], VscodeRadioGroup.prototype, "_focusedRadio", void 0);
__decorate([
    state()
], VscodeRadioGroup.prototype, "_checkedRadio", void 0);
VscodeRadioGroup = __decorate([
    customElement('vscode-radio-group')
], VscodeRadioGroup);
export { VscodeRadioGroup };
//# sourceMappingURL=vscode-radio-group.js.map